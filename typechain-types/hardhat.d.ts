/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import { FactoryOptions, HardhatEthersHelpers as HardhatEthersHelpersBase } from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "IL1ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1ERC20Bridge__factory>;
    getContractFactory(
      name: "IL1StandardBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL1StandardBridge__factory>;
    getContractFactory(
      name: "IL2ERC20Bridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IL2ERC20Bridge__factory>;
    getContractFactory(
      name: "CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainEnabled__factory>;
    getContractFactory(
      name: "ICrossDomainMessenger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ICrossDomainMessenger__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ExpandedERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpandedERC20__factory>;
    getContractFactory(
      name: "Lockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lockable__factory>;
    getContractFactory(
      name: "MultiCaller",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiCaller__factory>;
    getContractFactory(
      name: "MultiRole",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiRole__factory>;
    getContractFactory(
      name: "Testable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Testable__factory>;
    getContractFactory(
      name: "Timer",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Timer__factory>;
    getContractFactory(
      name: "AddressWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddressWhitelistInterface__factory>;
    getContractFactory(
      name: "ExpandedIERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ExpandedIERC20__factory>;
    getContractFactory(
      name: "OptimisticOracleConstraints",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleConstraints__factory>;
    getContractFactory(
      name: "OracleInterfaces",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OracleInterfaces__factory>;
    getContractFactory(
      name: "FinderInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FinderInterface__factory>;
    getContractFactory(
      name: "IdentifierWhitelistInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IdentifierWhitelistInterface__factory>;
    getContractFactory(
      name: "OptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimisticOracleInterface__factory>;
    getContractFactory(
      name: "SkinnyOptimisticOracleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SkinnyOptimisticOracleInterface__factory>;
    getContractFactory(
      name: "StoreInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StoreInterface__factory>;
    getContractFactory(
      name: "ArbitrumSpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumSpokePool__factory>;
    getContractFactory(
      name: "StandardBridgeLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.StandardBridgeLike__factory>;
    getContractFactory(
      name: "ArbitrumAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumAdapter__factory>;
    getContractFactory(
      name: "ArbitrumL1ERC20GatewayLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumL1ERC20GatewayLike__factory>;
    getContractFactory(
      name: "ArbitrumL1InboxLike",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ArbitrumL1InboxLike__factory>;
    getContractFactory(
      name: "CrossDomainEnabled",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CrossDomainEnabled__factory>;
    getContractFactory(
      name: "EthereumAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumAdapter__factory>;
    getContractFactory(
      name: "MockAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockAdapter__factory>;
    getContractFactory(
      name: "MockBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBridge__factory>;
    getContractFactory(
      name: "OptimismAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismAdapter__factory>;
    getContractFactory(
      name: "IFxStateSender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxStateSender__factory>;
    getContractFactory(
      name: "IRootChainManager",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRootChainManager__factory>;
    getContractFactory(
      name: "PolygonAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonAdapter__factory>;
    getContractFactory(
      name: "EthereumSpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EthereumSpokePool__factory>;
    getContractFactory(
      name: "HubPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HubPool__factory>;
    getContractFactory(
      name: "HubPoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.HubPoolInterface__factory>;
    getContractFactory(
      name: "AdapterInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AdapterInterface__factory>;
    getContractFactory(
      name: "LpTokenFactoryInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpTokenFactoryInterface__factory>;
    getContractFactory(
      name: "WETH9",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.WETH9__factory>;
    getContractFactory(
      name: "Lockable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Lockable__factory>;
    getContractFactory(
      name: "LpTokenFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LpTokenFactory__factory>;
    getContractFactory(
      name: "OptimismSpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OptimismSpokePool__factory>;
    getContractFactory(
      name: "IFxMessageProcessor",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IFxMessageProcessor__factory>;
    getContractFactory(
      name: "PolygonSpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonSpokePool__factory>;
    getContractFactory(
      name: "MaticToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MaticToken__factory>;
    getContractFactory(
      name: "PolygonIERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonIERC20__factory>;
    getContractFactory(
      name: "PolygonTokenBridger",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonTokenBridger__factory>;
    getContractFactory(
      name: "SpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpokePool__factory>;
    getContractFactory(
      name: "SpokePoolInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SpokePoolInterface__factory>;
    getContractFactory(
      name: "MerkleLibTest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MerkleLibTest__factory>;
    getContractFactory(
      name: "MockSpokePool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockSpokePool__factory>;
    getContractFactory(
      name: "PolygonERC20Test",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PolygonERC20Test__factory>;
    getContractFactory(
      name: "FxStateSenderMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FxStateSenderMock__factory>;
    getContractFactory(
      name: "RootChainManagerMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RootChainManagerMock__factory>;

    getContractAt(name: "IL1ERC20Bridge", address: string, signer?: ethers.Signer): Promise<Contracts.IL1ERC20Bridge>;
    getContractAt(
      name: "IL1StandardBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IL1StandardBridge>;
    getContractAt(name: "IL2ERC20Bridge", address: string, signer?: ethers.Signer): Promise<Contracts.IL2ERC20Bridge>;
    getContractAt(
      name: "CrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossDomainEnabled>;
    getContractAt(
      name: "ICrossDomainMessenger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ICrossDomainMessenger>;
    getContractAt(name: "Ownable", address: string, signer?: ethers.Signer): Promise<Contracts.Ownable>;
    getContractAt(name: "IERC1271", address: string, signer?: ethers.Signer): Promise<Contracts.IERC1271>;
    getContractAt(name: "ERC20", address: string, signer?: ethers.Signer): Promise<Contracts.ERC20>;
    getContractAt(name: "IERC20Metadata", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20Metadata>;
    getContractAt(name: "IERC20", address: string, signer?: ethers.Signer): Promise<Contracts.IERC20>;
    getContractAt(name: "ExpandedERC20", address: string, signer?: ethers.Signer): Promise<Contracts.ExpandedERC20>;
    getContractAt(name: "Lockable", address: string, signer?: ethers.Signer): Promise<Contracts.Lockable>;
    getContractAt(name: "MultiCaller", address: string, signer?: ethers.Signer): Promise<Contracts.MultiCaller>;
    getContractAt(name: "MultiRole", address: string, signer?: ethers.Signer): Promise<Contracts.MultiRole>;
    getContractAt(name: "Testable", address: string, signer?: ethers.Signer): Promise<Contracts.Testable>;
    getContractAt(name: "Timer", address: string, signer?: ethers.Signer): Promise<Contracts.Timer>;
    getContractAt(
      name: "AddressWhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddressWhitelistInterface>;
    getContractAt(name: "ExpandedIERC20", address: string, signer?: ethers.Signer): Promise<Contracts.ExpandedIERC20>;
    getContractAt(
      name: "OptimisticOracleConstraints",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleConstraints>;
    getContractAt(
      name: "OracleInterfaces",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OracleInterfaces>;
    getContractAt(name: "FinderInterface", address: string, signer?: ethers.Signer): Promise<Contracts.FinderInterface>;
    getContractAt(
      name: "IdentifierWhitelistInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IdentifierWhitelistInterface>;
    getContractAt(
      name: "OptimisticOracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimisticOracleInterface>;
    getContractAt(
      name: "SkinnyOptimisticOracleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SkinnyOptimisticOracleInterface>;
    getContractAt(name: "StoreInterface", address: string, signer?: ethers.Signer): Promise<Contracts.StoreInterface>;
    getContractAt(
      name: "ArbitrumSpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumSpokePool>;
    getContractAt(
      name: "StandardBridgeLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.StandardBridgeLike>;
    getContractAt(name: "ArbitrumAdapter", address: string, signer?: ethers.Signer): Promise<Contracts.ArbitrumAdapter>;
    getContractAt(
      name: "ArbitrumL1ERC20GatewayLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumL1ERC20GatewayLike>;
    getContractAt(
      name: "ArbitrumL1InboxLike",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ArbitrumL1InboxLike>;
    getContractAt(
      name: "CrossDomainEnabled",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CrossDomainEnabled>;
    getContractAt(name: "EthereumAdapter", address: string, signer?: ethers.Signer): Promise<Contracts.EthereumAdapter>;
    getContractAt(name: "MockAdapter", address: string, signer?: ethers.Signer): Promise<Contracts.MockAdapter>;
    getContractAt(name: "MockBridge", address: string, signer?: ethers.Signer): Promise<Contracts.MockBridge>;
    getContractAt(name: "OptimismAdapter", address: string, signer?: ethers.Signer): Promise<Contracts.OptimismAdapter>;
    getContractAt(name: "IFxStateSender", address: string, signer?: ethers.Signer): Promise<Contracts.IFxStateSender>;
    getContractAt(
      name: "IRootChainManager",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRootChainManager>;
    getContractAt(name: "PolygonAdapter", address: string, signer?: ethers.Signer): Promise<Contracts.PolygonAdapter>;
    getContractAt(
      name: "EthereumSpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EthereumSpokePool>;
    getContractAt(name: "HubPool", address: string, signer?: ethers.Signer): Promise<Contracts.HubPool>;
    getContractAt(
      name: "HubPoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.HubPoolInterface>;
    getContractAt(
      name: "AdapterInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AdapterInterface>;
    getContractAt(
      name: "LpTokenFactoryInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LpTokenFactoryInterface>;
    getContractAt(name: "WETH9", address: string, signer?: ethers.Signer): Promise<Contracts.WETH9>;
    getContractAt(name: "Lockable", address: string, signer?: ethers.Signer): Promise<Contracts.Lockable>;
    getContractAt(name: "LpTokenFactory", address: string, signer?: ethers.Signer): Promise<Contracts.LpTokenFactory>;
    getContractAt(
      name: "OptimismSpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OptimismSpokePool>;
    getContractAt(
      name: "IFxMessageProcessor",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IFxMessageProcessor>;
    getContractAt(
      name: "PolygonSpokePool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonSpokePool>;
    getContractAt(name: "MaticToken", address: string, signer?: ethers.Signer): Promise<Contracts.MaticToken>;
    getContractAt(name: "PolygonIERC20", address: string, signer?: ethers.Signer): Promise<Contracts.PolygonIERC20>;
    getContractAt(
      name: "PolygonTokenBridger",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonTokenBridger>;
    getContractAt(name: "SpokePool", address: string, signer?: ethers.Signer): Promise<Contracts.SpokePool>;
    getContractAt(
      name: "SpokePoolInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SpokePoolInterface>;
    getContractAt(name: "MerkleLibTest", address: string, signer?: ethers.Signer): Promise<Contracts.MerkleLibTest>;
    getContractAt(name: "MockSpokePool", address: string, signer?: ethers.Signer): Promise<Contracts.MockSpokePool>;
    getContractAt(
      name: "PolygonERC20Test",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PolygonERC20Test>;
    getContractAt(
      name: "FxStateSenderMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.FxStateSenderMock>;
    getContractAt(
      name: "RootChainManagerMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RootChainManagerMock>;

    // default types
    getContractFactory(name: string, signerOrOptions?: ethers.Signer | FactoryOptions): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(nameOrAbi: string | any[], address: string, signer?: ethers.Signer): Promise<ethers.Contract>;
  }
}
