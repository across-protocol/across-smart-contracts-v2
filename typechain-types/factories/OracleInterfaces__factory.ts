/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OracleInterfaces, OracleInterfacesInterface } from "../OracleInterfaces";

const _abi = [
  {
    inputs: [],
    name: "Bridge",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ChildMessenger",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "CollateralWhitelist",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "FinancialContractsAdmin",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "GenericHandler",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "IdentifierWhitelist",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OptimisticOracle",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Oracle",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OracleHub",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "OracleSpoke",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Registry",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "SkinnyOptimisticOracle",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "Store",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x61033161003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100e95760003560e01c80634f4a180b116100965780637608ea2f116100705780637608ea2f1461025f5780637db9743b146102865780638adca47f146102ad578063f24a534e146102d457600080fd5b80634f4a180b146101ea578063598dd097146102115780635fa2ef101461023857600080fd5b80632a71e5b3116100c75780632a71e5b31461017557806342e90c331461019c5780634596ac9b146101c357600080fd5b8063079b6c63146100ee5780631a0fbfb3146101275780631a4dbd1c1461014e575b600080fd5b6101157f47656e6572696348616e646c657200000000000000000000000000000000000081565b60405190815260200160405180910390f35b6101157f4368696c644d657373656e67657200000000000000000000000000000000000081565b6101157f4f7074696d69737469634f7261636c650000000000000000000000000000000081565b6101157f46696e616e6369616c436f6e74726163747341646d696e00000000000000000081565b6101157f53746f726500000000000000000000000000000000000000000000000000000081565b6101157f536b696e6e794f7074696d69737469634f7261636c650000000000000000000081565b6101157f4964656e74696669657257686974656c6973740000000000000000000000000081565b6101157f436f6c6c61746572616c57686974656c6973740000000000000000000000000081565b6101157f427269646765000000000000000000000000000000000000000000000000000081565b6101157f4f7261636c65487562000000000000000000000000000000000000000000000081565b6101157f526567697374727900000000000000000000000000000000000000000000000081565b6101157f4f7261636c6553706f6b6500000000000000000000000000000000000000000081565b6101157f4f7261636c6500000000000000000000000000000000000000000000000000008156fea264697066735822122065899d9e911743c9482a1a11edea202961ca9035f7b220f51fb957d9533346aa64736f6c634300080b0033";

export class OracleInterfaces__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<OracleInterfaces> {
    return super.deploy(overrides || {}) as Promise<OracleInterfaces>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OracleInterfaces {
    return super.attach(address) as OracleInterfaces;
  }
  connect(signer: Signer): OracleInterfaces__factory {
    return super.connect(signer) as OracleInterfaces__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleInterfacesInterface {
    return new utils.Interface(_abi) as OracleInterfacesInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): OracleInterfaces {
    return new Contract(address, _abi, signerOrProvider) as OracleInterfaces;
  }
}
