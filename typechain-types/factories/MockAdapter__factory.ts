/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockAdapter, MockAdapterInterface } from "../MockAdapter";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newHubPool",
        type: "address",
      },
    ],
    name: "HubPoolChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageRelayed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "RelayMessageCalled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "l1Token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "l2Token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "RelayTokensCalled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "l1Token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "l2Token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "TokensRelayed",
    type: "event",
  },
  {
    inputs: [],
    name: "bridge",
    outputs: [
      {
        internalType: "contract Mock_Bridge",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "relayMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l1Token",
        type: "address",
      },
      {
        internalType: "address",
        name: "l2Token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "relayTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a060405234801561001057600080fd5b5060405161001d9061004b565b604051809103906000f080158015610039573d6000803e3d6000fd5b506001600160a01b0316608052610058565b610475806106c083390190565b60805161063a6100866000396000818160730152818160fb015281816101c401526102c9015261063a6000f3fe6080604052600436106100345760003560e01c806352c8c75c14610039578063e6eb8ade1461004e578063e78cea9214610061575b600080fd5b61004c61004736600461039a565b6100be565b005b61004c61005c366004610416565b61028c565b34801561006d57600080fd5b506100957f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b6040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820184905285169063095ea7b3906044016020604051808303816000875af1158015610153573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061017791906104f6565b506040517fd411325b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018490527f0000000000000000000000000000000000000000000000000000000000000000169063d411325b90604401600060405180830381600087803b15801561020857600080fd5b505af115801561021c573d6000803e3d6000fd5b50506040805173ffffffffffffffffffffffffffffffffffffffff888116825287811660208301528183018790528516606082015233608082015290517f88a75b734dbf3ce2b74c9db7b20501df9c53e1daa2f8810f14d62c53e4d7274093509081900360a0019150a150505050565b6040517f297d046400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063297d046490610300908590859060040161058a565b600060405180830381600087803b15801561031a57600080fd5b505af115801561032e573d6000803e3d6000fd5b505050507f6db0d57de6d386d33cb7c8767e3ee48f4459c2dfdf017a906db2e90f8ab23a59828233604051610365939291906105c1565b60405180910390a15050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461039557600080fd5b919050565b600080600080608085870312156103b057600080fd5b6103b985610371565b93506103c760208601610371565b9250604085013591506103dc60608601610371565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561042957600080fd5b61043283610371565b9150602083013567ffffffffffffffff8082111561044f57600080fd5b818501915085601f83011261046357600080fd5b813581811115610475576104756103e7565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156104bb576104bb6103e7565b816040528281528860208487010111156104d457600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561050857600080fd5b8151801515811461051857600080fd5b9392505050565b6000815180845260005b8181101561054557602081850181015186830182015201610529565b81811115610557576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff831681526040602082015260006105b9604083018461051f565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8086168352606060208401526105f1606084018661051f565b915080841660408401525094935050505056fea26469706673582212200ecfe6f9d9ff49e5222de5849fa6cd2f7f20509d7367092cd2bfd2b5875ff19064736f6c634300080b0033608060405234801561001057600080fd5b50610455806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063297d04641461003b578063d411325b14610050575b600080fd5b61004e61004936600461021c565b610063565b005b61004e61005e3660046102fc565b6100a0565b7f5bd2d0850f0cb81f5796e2b5d3a09cb16e35c4d616a6ae0189d2b93ec13bce2b8282604051610094929190610326565b60405180910390a15050565b6040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810182905273ffffffffffffffffffffffffffffffffffffffff8316906323b872dd906064016020604051808303816000875af1158015610119573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061013d91906103b7565b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260208190526040812080548392906101739084906103e0565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff84168152602081018390527f1da67e78d7a059d567d755dcffcfeefb8bc6967dbed9f631c088b729098a612e9101610094565b803573ffffffffffffffffffffffffffffffffffffffff811681146101e857600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561022f57600080fd5b610238836101c4565b9150602083013567ffffffffffffffff8082111561025557600080fd5b818501915085601f83011261026957600080fd5b81358181111561027b5761027b6101ed565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156102c1576102c16101ed565b816040528281528860208487010111156102da57600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806040838503121561030f57600080fd5b610318836101c4565b946020939093013593505050565b73ffffffffffffffffffffffffffffffffffffffff8316815260006020604081840152835180604085015260005b8181101561037057858101830151858201606001528201610354565b81811115610382576000606083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01692909201606001949350505050565b6000602082840312156103c957600080fd5b815180151581146103d957600080fd5b9392505050565b6000821982111561041a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b50019056fea2646970667358221220f4654e5a84e5a4f9834379be5661b1dbea64cf5bdf99acc7792511f4e10ce40964736f6c634300080b0033";

export class MockAdapter__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MockAdapter> {
    return super.deploy(overrides || {}) as Promise<MockAdapter>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockAdapter {
    return super.attach(address) as MockAdapter;
  }
  connect(signer: Signer): MockAdapter__factory {
    return super.connect(signer) as MockAdapter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockAdapterInterface {
    return new utils.Interface(_abi) as MockAdapterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockAdapter {
    return new Contract(address, _abi, signerOrProvider) as MockAdapter;
  }
}
