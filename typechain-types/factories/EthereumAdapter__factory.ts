/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { EthereumAdapter, EthereumAdapterInterface } from "../EthereumAdapter";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "newHubPool",
        type: "address",
      },
    ],
    name: "HubPoolChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "MessageRelayed",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "l1Token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "l2Token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "TokensRelayed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "target",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "message",
        type: "bytes",
      },
    ],
    name: "relayMessage",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "l1Token",
        type: "address",
      },
      {
        internalType: "address",
        name: "l2Token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "relayTokens",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506107fa806100206000396000f3fe6080604052600436106100295760003560e01c806352c8c75c1461002e578063e6eb8ade14610043575b600080fd5b61004161003c36600461056e565b610056565b005b6100416100513660046105ea565b6100dc565b61007773ffffffffffffffffffffffffffffffffffffffff85168284610123565b6040805173ffffffffffffffffffffffffffffffffffffffff868116825285811660208301528183018590528316606082015290517fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9181900360800190a150505050565b6100e682826101b5565b7f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac48282604051610117929190610744565b60405180910390a15050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526101b0908490610237565b505050565b600060208201825160008082846000895af192505050806101b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f657865637574652063616c6c206661696c65640000000000000000000000000060448201526064015b60405180910390fd5b6000610299826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166103439092919063ffffffff16565b8051909150156101b057808060200190518101906102b79190610773565b6101b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161022e565b6060610352848460008561035c565b90505b9392505050565b6060824710156103ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161022e565b73ffffffffffffffffffffffffffffffffffffffff85163b61046c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161022e565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516104959190610795565b60006040518083038185875af1925050503d80600081146104d2576040519150601f19603f3d011682016040523d82523d6000602084013e6104d7565b606091505b50915091506104e78282866104f2565b979650505050505050565b60608315610501575081610355565b8251156105115782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161022e91906107b1565b803573ffffffffffffffffffffffffffffffffffffffff8116811461056957600080fd5b919050565b6000806000806080858703121561058457600080fd5b61058d85610545565b935061059b60208601610545565b9250604085013591506105b060608601610545565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156105fd57600080fd5b61060683610545565b9150602083013567ffffffffffffffff8082111561062357600080fd5b818501915085601f83011261063757600080fd5b813581811115610649576106496105bb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561068f5761068f6105bb565b816040528281528860208487010111156106a857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b838110156106e55781810151838201526020016106cd565b838111156106f4576000848401525b50505050565b600081518084526107128160208601602086016106ca565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff8316815260406020820152600061035260408301846106fa565b60006020828403121561078557600080fd5b8151801515811461035557600080fd5b600082516107a78184602087016106ca565b9190910192915050565b60208152600061035560208301846106fa56fea2646970667358221220dd19386ab891a70db6faa0a689e515de03ddeb9565752ae2d95a71931add6a8064736f6c634300080b0033";

export class EthereumAdapter__factory extends ContractFactory {
  constructor(...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<EthereumAdapter> {
    return super.deploy(overrides || {}) as Promise<EthereumAdapter>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EthereumAdapter {
    return super.attach(address) as EthereumAdapter;
  }
  connect(signer: Signer): EthereumAdapter__factory {
    return super.connect(signer) as EthereumAdapter__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EthereumAdapterInterface {
    return new utils.Interface(_abi) as EthereumAdapterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): EthereumAdapter {
    return new Contract(address, _abi, signerOrProvider) as EthereumAdapter;
  }
}
