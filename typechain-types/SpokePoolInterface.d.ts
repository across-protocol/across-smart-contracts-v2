/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface SpokePoolInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "chainId()": FunctionFragment;
    "deposit(address,address,uint256,uint256,uint64,uint32)": FunctionFragment;
    "executeRelayerRefundRoot(uint32,(uint256,uint256,uint256[],uint32,address,address[]),bytes32[])": FunctionFragment;
    "executeSlowRelayRoot(address,address,address,uint256,uint256,uint64,uint64,uint32,uint32,bytes32[])": FunctionFragment;
    "fillRelay(address,address,address,uint256,uint256,uint256,uint256,uint64,uint64,uint32)": FunctionFragment;
    "fillRelayWithUpdatedFee(address,address,address,uint256,uint256,uint256,uint256,uint64,uint64,uint64,uint32,bytes)": FunctionFragment;
    "relayRootBundle(bytes32,bytes32)": FunctionFragment;
    "setCrossDomainAdmin(address)": FunctionFragment;
    "setDepositQuoteTimeBuffer(uint32)": FunctionFragment;
    "setEnableRoute(address,uint256,bool)": FunctionFragment;
    "setHubPool(address)": FunctionFragment;
    "speedUpDeposit(address,uint64,uint32,bytes)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRelayerRefundRoot",
    values: [
      BigNumberish,
      {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSlowRelayRoot",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelay",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelayWithUpdatedFee",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "relayRootBundle", values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "setCrossDomainAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "setDepositQuoteTimeBuffer", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setEnableRoute", values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: "setHubPool", values: [string]): string;
  encodeFunctionData(
    functionFragment: "speedUpDeposit",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeRelayerRefundRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeSlowRelayRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillRelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillRelayWithUpdatedFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCrossDomainAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDepositQuoteTimeBuffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnableRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHubPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "speedUpDeposit", data: BytesLike): Result;

  events: {};
}

export class SpokePoolInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SpokePoolInterfaceInterface;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositQuoteTimeBuffer(
      buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHubPool(
      newHubPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  deposit(
    recipient: string,
    originToken: string,
    amount: BigNumberish,
    destinationChainId: BigNumberish,
    relayerFeePct: BigNumberish,
    quoteTimestamp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeRelayerRefundRoot(
    rootBundleId: BigNumberish,
    relayerRefundLeaf: {
      amountToReturn: BigNumberish;
      chainId: BigNumberish;
      refundAmounts: BigNumberish[];
      leafId: BigNumberish;
      l2TokenAddress: string;
      refundAddresses: string[];
    },
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSlowRelayRoot(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    depositId: BigNumberish,
    rootBundleId: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillRelay(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    maxTokensToSend: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    depositId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillRelayWithUpdatedFee(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    maxTokensToSend: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    newRelayerFeePct: BigNumberish,
    depositId: BigNumberish,
    depositorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relayRootBundle(
    relayerRefundRoot: BytesLike,
    slowRelayRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrossDomainAdmin(
    newCrossDomainAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositQuoteTimeBuffer(
    buffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableRoute(
    originToken: string,
    destinationChainId: BigNumberish,
    enable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHubPool(
    newHubPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  speedUpDeposit(
    depositor: string,
    newRelayerFeePct: BigNumberish,
    depositId: BigNumberish,
    depositorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    relayRootBundle(relayerRefundRoot: BytesLike, slowRelayRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    setCrossDomainAdmin(newCrossDomainAdmin: string, overrides?: CallOverrides): Promise<void>;

    setDepositQuoteTimeBuffer(buffer: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setHubPool(newHubPool: string, overrides?: CallOverrides): Promise<void>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDepositQuoteTimeBuffer(
      buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHubPool(newHubPool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositQuoteTimeBuffer(
      buffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHubPool(
      newHubPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
