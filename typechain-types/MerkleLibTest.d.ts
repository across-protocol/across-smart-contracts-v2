/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface MerkleLibTestInterface extends ethers.utils.Interface {
  functions: {
    "claimedBitMap(uint256)": FunctionFragment;
    "claimedBitMap1D()": FunctionFragment;
    "isClaimed(uint256)": FunctionFragment;
    "isClaimed1D(uint256)": FunctionFragment;
    "setClaimed(uint256)": FunctionFragment;
    "setClaimed1D(uint256)": FunctionFragment;
    "verifyPoolRebalance(bytes32,(uint256,uint256[],int256[],int256[],uint8,address[]),bytes32[])": FunctionFragment;
    "verifyRelayerRefund(bytes32,(uint256,uint256,uint256[],uint32,address,address[]),bytes32[])": FunctionFragment;
    "verifySlowRelayFulfillment(bytes32,(address,address,address,uint256,uint256,uint64,uint64,uint32),bytes32[])": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "claimedBitMap", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "claimedBitMap1D", values?: undefined): string;
  encodeFunctionData(functionFragment: "isClaimed", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "isClaimed1D", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setClaimed", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setClaimed1D", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "verifyPoolRebalance",
    values: [
      BytesLike,
      {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyRelayerRefund",
    values: [
      BytesLike,
      {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySlowRelayFulfillment",
    values: [
      BytesLike,
      {
        depositor: string;
        recipient: string;
        destinationToken: string;
        amount: BigNumberish;
        originChainId: BigNumberish;
        realizedLpFeePct: BigNumberish;
        relayerFeePct: BigNumberish;
        depositId: BigNumberish;
      },
      BytesLike[]
    ]
  ): string;

  decodeFunctionResult(functionFragment: "claimedBitMap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimedBitMap1D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isClaimed1D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setClaimed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setClaimed1D", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyPoolRebalance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifyRelayerRefund", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "verifySlowRelayFulfillment", data: BytesLike): Result;

  events: {};
}

export class MerkleLibTest extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: MerkleLibTestInterface;

  functions: {
    claimedBitMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    claimedBitMap1D(overrides?: CallOverrides): Promise<[BigNumber]>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    isClaimed1D(index: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    setClaimed(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setClaimed1D(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    verifyPoolRebalance(
      root: BytesLike,
      rebalance: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifyRelayerRefund(
      root: BytesLike,
      refund: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    verifySlowRelayFulfillment(
      root: BytesLike,
      slowRelayFulfillment: {
        depositor: string;
        recipient: string;
        destinationToken: string;
        amount: BigNumberish;
        originChainId: BigNumberish;
        realizedLpFeePct: BigNumberish;
        relayerFeePct: BigNumberish;
        depositId: BigNumberish;
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  claimedBitMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  claimedBitMap1D(overrides?: CallOverrides): Promise<BigNumber>;

  isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  isClaimed1D(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  setClaimed(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setClaimed1D(
    index: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  verifyPoolRebalance(
    root: BytesLike,
    rebalance: {
      chainId: BigNumberish;
      bundleLpFees: BigNumberish[];
      netSendAmounts: BigNumberish[];
      runningBalances: BigNumberish[];
      leafId: BigNumberish;
      l1Tokens: string[];
    },
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifyRelayerRefund(
    root: BytesLike,
    refund: {
      amountToReturn: BigNumberish;
      chainId: BigNumberish;
      refundAmounts: BigNumberish[];
      leafId: BigNumberish;
      l2TokenAddress: string;
      refundAddresses: string[];
    },
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  verifySlowRelayFulfillment(
    root: BytesLike,
    slowRelayFulfillment: {
      depositor: string;
      recipient: string;
      destinationToken: string;
      amount: BigNumberish;
      originChainId: BigNumberish;
      realizedLpFeePct: BigNumberish;
      relayerFeePct: BigNumberish;
      depositId: BigNumberish;
    },
    proof: BytesLike[],
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    claimedBitMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimedBitMap1D(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    isClaimed1D(index: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    setClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setClaimed1D(index: BigNumberish, overrides?: CallOverrides): Promise<void>;

    verifyPoolRebalance(
      root: BytesLike,
      rebalance: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifyRelayerRefund(
      root: BytesLike,
      refund: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    verifySlowRelayFulfillment(
      root: BytesLike,
      slowRelayFulfillment: {
        depositor: string;
        recipient: string;
        destinationToken: string;
        amount: BigNumberish;
        originChainId: BigNumberish;
        realizedLpFeePct: BigNumberish;
        relayerFeePct: BigNumberish;
        depositId: BigNumberish;
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    claimedBitMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    claimedBitMap1D(overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    isClaimed1D(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setClaimed(index: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setClaimed1D(index: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    verifyPoolRebalance(
      root: BytesLike,
      rebalance: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyRelayerRefund(
      root: BytesLike,
      refund: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySlowRelayFulfillment(
      root: BytesLike,
      slowRelayFulfillment: {
        depositor: string;
        recipient: string;
        destinationToken: string;
        amount: BigNumberish;
        originChainId: BigNumberish;
        realizedLpFeePct: BigNumberish;
        relayerFeePct: BigNumberish;
        depositId: BigNumberish;
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    claimedBitMap(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimedBitMap1D(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isClaimed1D(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setClaimed(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setClaimed1D(
      index: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    verifyPoolRebalance(
      root: BytesLike,
      rebalance: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyRelayerRefund(
      root: BytesLike,
      refund: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySlowRelayFulfillment(
      root: BytesLike,
      slowRelayFulfillment: {
        depositor: string;
        recipient: string;
        destinationToken: string;
        amount: BigNumberish;
        originChainId: BigNumberish;
        realizedLpFeePct: BigNumberish;
        relayerFeePct: BigNumberish;
        depositId: BigNumberish;
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
