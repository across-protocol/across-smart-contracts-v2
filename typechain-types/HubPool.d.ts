/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HubPoolInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,uint256)": FunctionFragment;
    "bondAmount()": FunctionFragment;
    "bondToken()": FunctionFragment;
    "claimProtocolFeesCaptured(address)": FunctionFragment;
    "crossChainContracts(uint256)": FunctionFragment;
    "disableL1TokenForLiquidityProvision(address)": FunctionFragment;
    "disputeRootBundle()": FunctionFragment;
    "enableL1TokenForLiquidityProvision(address)": FunctionFragment;
    "exchangeRateCurrent(address)": FunctionFragment;
    "executeRootBundle((uint256,uint256[],int256[],int256[],uint8,address[]),bytes32[])": FunctionFragment;
    "finder()": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "getRootBundleProposalAncillaryData()": FunctionFragment;
    "identifier()": FunctionFragment;
    "liquidityUtilizationCurrent(address)": FunctionFragment;
    "liquidityUtilizationPostRelay(address,uint256)": FunctionFragment;
    "liveness()": FunctionFragment;
    "loadEthForL2Calls()": FunctionFragment;
    "lpFeeRatePerSecond()": FunctionFragment;
    "lpTokenFactory()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "owner()": FunctionFragment;
    "pooledTokens(address)": FunctionFragment;
    "proposeRootBundle(uint256[],uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "protocolFeeCaptureAddress()": FunctionFragment;
    "protocolFeeCapturePct()": FunctionFragment;
    "relaySpokePoolAdminFunction(uint256,bytes)": FunctionFragment;
    "removeLiquidity(address,uint256,bool)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rootBundleProposal()": FunctionFragment;
    "setBond(address,uint256)": FunctionFragment;
    "setCrossChainContracts(uint256,address,address)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "setIdentifier(bytes32)": FunctionFragment;
    "setLiveness(uint32)": FunctionFragment;
    "setProtocolFeeCapture(address,uint256)": FunctionFragment;
    "sync(address)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unclaimedAccumulatedProtocolFees(address)": FunctionFragment;
    "weth()": FunctionFragment;
    "whitelistRoute(uint256,uint256,address,address)": FunctionFragment;
    "whitelistedRoute(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addLiquidity", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "bondAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "bondToken", values?: undefined): string;
  encodeFunctionData(functionFragment: "claimProtocolFeesCaptured", values: [string]): string;
  encodeFunctionData(functionFragment: "crossChainContracts", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "disableL1TokenForLiquidityProvision", values: [string]): string;
  encodeFunctionData(functionFragment: "disputeRootBundle", values?: undefined): string;
  encodeFunctionData(functionFragment: "enableL1TokenForLiquidityProvision", values: [string]): string;
  encodeFunctionData(functionFragment: "exchangeRateCurrent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "executeRootBundle",
    values: [
      {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "finder", values?: undefined): string;
  encodeFunctionData(functionFragment: "getCurrentTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "getRootBundleProposalAncillaryData", values?: undefined): string;
  encodeFunctionData(functionFragment: "identifier", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquidityUtilizationCurrent", values: [string]): string;
  encodeFunctionData(functionFragment: "liquidityUtilizationPostRelay", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "liveness", values?: undefined): string;
  encodeFunctionData(functionFragment: "loadEthForL2Calls", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpFeeRatePerSecond", values?: undefined): string;
  encodeFunctionData(functionFragment: "lpTokenFactory", values?: undefined): string;
  encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pooledTokens", values: [string]): string;
  encodeFunctionData(
    functionFragment: "proposeRootBundle",
    values: [BigNumberish[], BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "protocolFeeCaptureAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "protocolFeeCapturePct", values?: undefined): string;
  encodeFunctionData(functionFragment: "relaySpokePoolAdminFunction", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "removeLiquidity", values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: "renounceOwnership", values?: undefined): string;
  encodeFunctionData(functionFragment: "rootBundleProposal", values?: undefined): string;
  encodeFunctionData(functionFragment: "setBond", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "setCrossChainContracts", values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: "setCurrentTime", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setIdentifier", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "setLiveness", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setProtocolFeeCapture", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "sync", values: [string]): string;
  encodeFunctionData(functionFragment: "timerAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "transferOwnership", values: [string]): string;
  encodeFunctionData(functionFragment: "unclaimedAccumulatedProtocolFees", values: [string]): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelistRoute", values: [BigNumberish, BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: "whitelistedRoute", values: [BigNumberish, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addLiquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bondToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimProtocolFeesCaptured", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crossChainContracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disableL1TokenForLiquidityProvision", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputeRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enableL1TokenForLiquidityProvision", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchangeRateCurrent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finder", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCurrentTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRootBundleProposalAncillaryData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "identifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityUtilizationCurrent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityUtilizationPostRelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liveness", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loadEthForL2Calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpFeeRatePerSecond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "lpTokenFactory", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pooledTokens", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposeRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolFeeCaptureAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolFeeCapturePct", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relaySpokePoolAdminFunction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeLiquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "renounceOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootBundleProposal", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCrossChainContracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCurrentTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setIdentifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLiveness", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setProtocolFeeCapture", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timerAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transferOwnership", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unclaimedAccumulatedProtocolFees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedRoute", data: BytesLike): Result;

  events: {
    "BondSet(address,uint256)": EventFragment;
    "CrossChainContractsSet(uint256,address,address)": EventFragment;
    "IdentifierSet(bytes32)": EventFragment;
    "L1TokenEnabledForLiquidityProvision(address,address)": EventFragment;
    "L2TokenDisabledForLiquidityProvision(address,address)": EventFragment;
    "LiquidityAdded(address,uint256,uint256,address)": EventFragment;
    "LiquidityRemoved(address,uint256,uint256,address)": EventFragment;
    "LivenessSet(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ProposeRootBundle(uint32,uint64,uint256[],bytes32,bytes32,bytes32,address)": EventFragment;
    "ProtocolFeeCaptureSet(address,uint256)": EventFragment;
    "ProtocolFeesCapturedClaimed(address,uint256)": EventFragment;
    "RootBundleCanceled(address,uint256,bytes)": EventFragment;
    "RootBundleDisputed(address,uint256,bytes)": EventFragment;
    "RootBundleExecuted(uint256,uint256,address[],uint256[],int256[],int256[],address)": EventFragment;
    "SpokePoolAdminFunctionTriggered(uint256,bytes)": EventFragment;
    "WhitelistRoute(uint256,uint256,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BondSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CrossChainContractsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "IdentifierSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "L1TokenEnabledForLiquidityProvision"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "L2TokenDisabledForLiquidityProvision"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidityRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LivenessSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeRootBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeeCaptureSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProtocolFeesCapturedClaimed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootBundleCanceled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootBundleDisputed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RootBundleExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SpokePoolAdminFunctionTriggered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistRoute"): EventFragment;
}

export type BondSetEvent = TypedEvent<[string, BigNumber] & { newBondToken: string; newBondAmount: BigNumber }>;

export type CrossChainContractsSetEvent = TypedEvent<
  [BigNumber, string, string] & {
    l2ChainId: BigNumber;
    adapter: string;
    spokePool: string;
  }
>;

export type IdentifierSetEvent = TypedEvent<[string] & { newIdentifier: string }>;

export type L1TokenEnabledForLiquidityProvisionEvent = TypedEvent<
  [string, string] & { l1Token: string; lpToken: string }
>;

export type L2TokenDisabledForLiquidityProvisionEvent = TypedEvent<
  [string, string] & { l1Token: string; lpToken: string }
>;

export type LiquidityAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    l1Token: string;
    amount: BigNumber;
    lpTokensMinted: BigNumber;
    liquidityProvider: string;
  }
>;

export type LiquidityRemovedEvent = TypedEvent<
  [string, BigNumber, BigNumber, string] & {
    l1Token: string;
    amount: BigNumber;
    lpTokensBurnt: BigNumber;
    liquidityProvider: string;
  }
>;

export type LivenessSetEvent = TypedEvent<[BigNumber] & { newLiveness: BigNumber }>;

export type OwnershipTransferredEvent = TypedEvent<[string, string] & { previousOwner: string; newOwner: string }>;

export type ProposeRootBundleEvent = TypedEvent<
  [number, BigNumber, BigNumber[], string, string, string, string] & {
    requestExpirationTimestamp: number;
    unclaimedPoolRebalanceLeafCount: BigNumber;
    bundleEvaluationBlockNumbers: BigNumber[];
    poolRebalanceRoot: string;
    relayerRefundRoot: string;
    slowRelayRoot: string;
    proposer: string;
  }
>;

export type ProtocolFeeCaptureSetEvent = TypedEvent<
  [string, BigNumber] & {
    newProtocolFeeCaptureAddress: string;
    newProtocolFeeCapturePct: BigNumber;
  }
>;

export type ProtocolFeesCapturedClaimedEvent = TypedEvent<
  [string, BigNumber] & { l1Token: string; accumulatedFees: BigNumber }
>;

export type RootBundleCanceledEvent = TypedEvent<
  [string, BigNumber, string] & {
    disputer: string;
    requestTime: BigNumber;
    disputedAncillaryData: string;
  }
>;

export type RootBundleDisputedEvent = TypedEvent<
  [string, BigNumber, string] & {
    disputer: string;
    requestTime: BigNumber;
    disputedAncillaryData: string;
  }
>;

export type RootBundleExecutedEvent = TypedEvent<
  [BigNumber, BigNumber, string[], BigNumber[], BigNumber[], BigNumber[], string] & {
    leafId: BigNumber;
    chainId: BigNumber;
    l1Token: string[];
    bundleLpFees: BigNumber[];
    netSendAmount: BigNumber[];
    runningBalance: BigNumber[];
    caller: string;
  }
>;

export type SpokePoolAdminFunctionTriggeredEvent = TypedEvent<
  [BigNumber, string] & { chainId: BigNumber; message: string }
>;

export type WhitelistRouteEvent = TypedEvent<
  [BigNumber, BigNumber, string, string] & {
    originChainId: BigNumber;
    destinationChainId: BigNumber;
    originToken: string;
    destinationToken: string;
  }
>;

export class HubPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HubPoolInterface;

  functions: {
    addLiquidity(
      l1Token: string,
      l1TokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bondAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    bondToken(overrides?: CallOverrides): Promise<[string]>;

    claimProtocolFeesCaptured(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    crossChainContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { adapter: string; spokePool: string }>;

    disableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    enableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRateCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    finder(overrides?: CallOverrides): Promise<[string]>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<[string] & { ancillaryData: string }>;

    identifier(overrides?: CallOverrides): Promise<[string]>;

    liquidityUtilizationCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityUtilizationPostRelay(
      l1Token: string,
      relayedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liveness(overrides?: CallOverrides): Promise<[number]>;

    loadEthForL2Calls(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    lpFeeRatePerSecond(overrides?: CallOverrides): Promise<[BigNumber]>;

    lpTokenFactory(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pooledTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        isEnabled: boolean;
        lastLpFeeUpdate: number;
        utilizedReserves: BigNumber;
        liquidReserves: BigNumber;
        undistributedLpFees: BigNumber;
      }
    >;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    protocolFeeCaptureAddress(overrides?: CallOverrides): Promise<[string]>;

    protocolFeeCapturePct(overrides?: CallOverrides): Promise<[BigNumber]>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    rootBundleProposal(overrides?: CallOverrides): Promise<
      [string, string, string, BigNumber, string, boolean, number, number] & {
        poolRebalanceRoot: string;
        relayerRefundRoot: string;
        slowRelayRoot: string;
        claimedBitMap: BigNumber;
        proposer: string;
        proposerBondRepaid: boolean;
        unclaimedPoolRebalanceLeafCount: number;
        requestExpirationTimestamp: number;
      }
    >;

    setBond(
      newBondToken: string,
      newBondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIdentifier(
      newIdentifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiveness(
      newLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unclaimedAccumulatedProtocolFees(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addLiquidity(
    l1Token: string,
    l1TokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

  bondToken(overrides?: CallOverrides): Promise<string>;

  claimProtocolFeesCaptured(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  crossChainContracts(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { adapter: string; spokePool: string }>;

  disableL1TokenForLiquidityProvision(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  enableL1TokenForLiquidityProvision(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRateCurrent(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeRootBundle(
    poolRebalanceLeaf: {
      chainId: BigNumberish;
      bundleLpFees: BigNumberish[];
      netSendAmounts: BigNumberish[];
      runningBalances: BigNumberish[];
      leafId: BigNumberish;
      l1Tokens: string[];
    },
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  finder(overrides?: CallOverrides): Promise<string>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<string>;

  identifier(overrides?: CallOverrides): Promise<string>;

  liquidityUtilizationCurrent(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityUtilizationPostRelay(
    l1Token: string,
    relayedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liveness(overrides?: CallOverrides): Promise<number>;

  loadEthForL2Calls(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  lpFeeRatePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

  lpTokenFactory(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pooledTokens(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean, number, BigNumber, BigNumber, BigNumber] & {
      lpToken: string;
      isEnabled: boolean;
      lastLpFeeUpdate: number;
      utilizedReserves: BigNumber;
      liquidReserves: BigNumber;
      undistributedLpFees: BigNumber;
    }
  >;

  proposeRootBundle(
    bundleEvaluationBlockNumbers: BigNumberish[],
    poolRebalanceLeafCount: BigNumberish,
    poolRebalanceRoot: BytesLike,
    relayerRefundRoot: BytesLike,
    slowRelayRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  protocolFeeCaptureAddress(overrides?: CallOverrides): Promise<string>;

  protocolFeeCapturePct(overrides?: CallOverrides): Promise<BigNumber>;

  relaySpokePoolAdminFunction(
    chainId: BigNumberish,
    functionData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    l1Token: string,
    lpTokenAmount: BigNumberish,
    sendEth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  rootBundleProposal(overrides?: CallOverrides): Promise<
    [string, string, string, BigNumber, string, boolean, number, number] & {
      poolRebalanceRoot: string;
      relayerRefundRoot: string;
      slowRelayRoot: string;
      claimedBitMap: BigNumber;
      proposer: string;
      proposerBondRepaid: boolean;
      unclaimedPoolRebalanceLeafCount: number;
      requestExpirationTimestamp: number;
    }
  >;

  setBond(
    newBondToken: string,
    newBondAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrossChainContracts(
    l2ChainId: BigNumberish,
    adapter: string,
    spokePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIdentifier(
    newIdentifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiveness(
    newLiveness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeCapture(
    newProtocolFeeCaptureAddress: string,
    newProtocolFeeCapturePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unclaimedAccumulatedProtocolFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  weth(overrides?: CallOverrides): Promise<string>;

  whitelistRoute(
    originChainId: BigNumberish,
    destinationChainId: BigNumberish,
    originToken: string,
    destinationToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedRoute(
    originChainId: BigNumberish,
    originToken: string,
    destinationChainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addLiquidity(l1Token: string, l1TokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    bondToken(overrides?: CallOverrides): Promise<string>;

    claimProtocolFeesCaptured(l1Token: string, overrides?: CallOverrides): Promise<void>;

    crossChainContracts(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { adapter: string; spokePool: string }>;

    disableL1TokenForLiquidityProvision(l1Token: string, overrides?: CallOverrides): Promise<void>;

    disputeRootBundle(overrides?: CallOverrides): Promise<void>;

    enableL1TokenForLiquidityProvision(l1Token: string, overrides?: CallOverrides): Promise<void>;

    exchangeRateCurrent(l1Token: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    finder(overrides?: CallOverrides): Promise<string>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<string>;

    identifier(overrides?: CallOverrides): Promise<string>;

    liquidityUtilizationCurrent(l1Token: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUtilizationPostRelay(
      l1Token: string,
      relayedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liveness(overrides?: CallOverrides): Promise<number>;

    loadEthForL2Calls(overrides?: CallOverrides): Promise<void>;

    lpFeeRatePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    lpTokenFactory(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    pooledTokens(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean, number, BigNumber, BigNumber, BigNumber] & {
        lpToken: string;
        isEnabled: boolean;
        lastLpFeeUpdate: number;
        utilizedReserves: BigNumber;
        liquidReserves: BigNumber;
        undistributedLpFees: BigNumber;
      }
    >;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    protocolFeeCaptureAddress(overrides?: CallOverrides): Promise<string>;

    protocolFeeCapturePct(overrides?: CallOverrides): Promise<BigNumber>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rootBundleProposal(overrides?: CallOverrides): Promise<
      [string, string, string, BigNumber, string, boolean, number, number] & {
        poolRebalanceRoot: string;
        relayerRefundRoot: string;
        slowRelayRoot: string;
        claimedBitMap: BigNumber;
        proposer: string;
        proposerBondRepaid: boolean;
        unclaimedPoolRebalanceLeafCount: number;
        requestExpirationTimestamp: number;
      }
    >;

    setBond(newBondToken: string, newBondAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setCurrentTime(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setIdentifier(newIdentifier: BytesLike, overrides?: CallOverrides): Promise<void>;

    setLiveness(newLiveness: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(l1Token: string, overrides?: CallOverrides): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unclaimedAccumulatedProtocolFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<string>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {
    "BondSet(address,uint256)"(
      newBondToken?: string | null,
      newBondAmount?: null
    ): TypedEventFilter<[string, BigNumber], { newBondToken: string; newBondAmount: BigNumber }>;

    BondSet(
      newBondToken?: string | null,
      newBondAmount?: null
    ): TypedEventFilter<[string, BigNumber], { newBondToken: string; newBondAmount: BigNumber }>;

    "CrossChainContractsSet(uint256,address,address)"(
      l2ChainId?: null,
      adapter?: null,
      spokePool?: null
    ): TypedEventFilter<[BigNumber, string, string], { l2ChainId: BigNumber; adapter: string; spokePool: string }>;

    CrossChainContractsSet(
      l2ChainId?: null,
      adapter?: null,
      spokePool?: null
    ): TypedEventFilter<[BigNumber, string, string], { l2ChainId: BigNumber; adapter: string; spokePool: string }>;

    "IdentifierSet(bytes32)"(newIdentifier?: null): TypedEventFilter<[string], { newIdentifier: string }>;

    IdentifierSet(newIdentifier?: null): TypedEventFilter<[string], { newIdentifier: string }>;

    "L1TokenEnabledForLiquidityProvision(address,address)"(
      l1Token?: null,
      lpToken?: null
    ): TypedEventFilter<[string, string], { l1Token: string; lpToken: string }>;

    L1TokenEnabledForLiquidityProvision(
      l1Token?: null,
      lpToken?: null
    ): TypedEventFilter<[string, string], { l1Token: string; lpToken: string }>;

    "L2TokenDisabledForLiquidityProvision(address,address)"(
      l1Token?: null,
      lpToken?: null
    ): TypedEventFilter<[string, string], { l1Token: string; lpToken: string }>;

    L2TokenDisabledForLiquidityProvision(
      l1Token?: null,
      lpToken?: null
    ): TypedEventFilter<[string, string], { l1Token: string; lpToken: string }>;

    "LiquidityAdded(address,uint256,uint256,address)"(
      l1Token?: string | null,
      amount?: null,
      lpTokensMinted?: null,
      liquidityProvider?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        l1Token: string;
        amount: BigNumber;
        lpTokensMinted: BigNumber;
        liquidityProvider: string;
      }
    >;

    LiquidityAdded(
      l1Token?: string | null,
      amount?: null,
      lpTokensMinted?: null,
      liquidityProvider?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        l1Token: string;
        amount: BigNumber;
        lpTokensMinted: BigNumber;
        liquidityProvider: string;
      }
    >;

    "LiquidityRemoved(address,uint256,uint256,address)"(
      l1Token?: string | null,
      amount?: null,
      lpTokensBurnt?: null,
      liquidityProvider?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        l1Token: string;
        amount: BigNumber;
        lpTokensBurnt: BigNumber;
        liquidityProvider: string;
      }
    >;

    LiquidityRemoved(
      l1Token?: string | null,
      amount?: null,
      lpTokensBurnt?: null,
      liquidityProvider?: string | null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber, string],
      {
        l1Token: string;
        amount: BigNumber;
        lpTokensBurnt: BigNumber;
        liquidityProvider: string;
      }
    >;

    "LivenessSet(uint256)"(newLiveness?: null): TypedEventFilter<[BigNumber], { newLiveness: BigNumber }>;

    LivenessSet(newLiveness?: null): TypedEventFilter<[BigNumber], { newLiveness: BigNumber }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<[string, string], { previousOwner: string; newOwner: string }>;

    "ProposeRootBundle(uint32,uint64,uint256[],bytes32,bytes32,bytes32,address)"(
      requestExpirationTimestamp?: null,
      unclaimedPoolRebalanceLeafCount?: null,
      bundleEvaluationBlockNumbers?: null,
      poolRebalanceRoot?: BytesLike | null,
      relayerRefundRoot?: BytesLike | null,
      slowRelayRoot?: null,
      proposer?: string | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber[], string, string, string, string],
      {
        requestExpirationTimestamp: number;
        unclaimedPoolRebalanceLeafCount: BigNumber;
        bundleEvaluationBlockNumbers: BigNumber[];
        poolRebalanceRoot: string;
        relayerRefundRoot: string;
        slowRelayRoot: string;
        proposer: string;
      }
    >;

    ProposeRootBundle(
      requestExpirationTimestamp?: null,
      unclaimedPoolRebalanceLeafCount?: null,
      bundleEvaluationBlockNumbers?: null,
      poolRebalanceRoot?: BytesLike | null,
      relayerRefundRoot?: BytesLike | null,
      slowRelayRoot?: null,
      proposer?: string | null
    ): TypedEventFilter<
      [number, BigNumber, BigNumber[], string, string, string, string],
      {
        requestExpirationTimestamp: number;
        unclaimedPoolRebalanceLeafCount: BigNumber;
        bundleEvaluationBlockNumbers: BigNumber[];
        poolRebalanceRoot: string;
        relayerRefundRoot: string;
        slowRelayRoot: string;
        proposer: string;
      }
    >;

    "ProtocolFeeCaptureSet(address,uint256)"(
      newProtocolFeeCaptureAddress?: string | null,
      newProtocolFeeCapturePct?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      {
        newProtocolFeeCaptureAddress: string;
        newProtocolFeeCapturePct: BigNumber;
      }
    >;

    ProtocolFeeCaptureSet(
      newProtocolFeeCaptureAddress?: string | null,
      newProtocolFeeCapturePct?: BigNumberish | null
    ): TypedEventFilter<
      [string, BigNumber],
      {
        newProtocolFeeCaptureAddress: string;
        newProtocolFeeCapturePct: BigNumber;
      }
    >;

    "ProtocolFeesCapturedClaimed(address,uint256)"(
      l1Token?: string | null,
      accumulatedFees?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { l1Token: string; accumulatedFees: BigNumber }>;

    ProtocolFeesCapturedClaimed(
      l1Token?: string | null,
      accumulatedFees?: BigNumberish | null
    ): TypedEventFilter<[string, BigNumber], { l1Token: string; accumulatedFees: BigNumber }>;

    "RootBundleCanceled(address,uint256,bytes)"(
      disputer?: string | null,
      requestTime?: null,
      disputedAncillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        disputer: string;
        requestTime: BigNumber;
        disputedAncillaryData: string;
      }
    >;

    RootBundleCanceled(
      disputer?: string | null,
      requestTime?: null,
      disputedAncillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        disputer: string;
        requestTime: BigNumber;
        disputedAncillaryData: string;
      }
    >;

    "RootBundleDisputed(address,uint256,bytes)"(
      disputer?: string | null,
      requestTime?: null,
      disputedAncillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        disputer: string;
        requestTime: BigNumber;
        disputedAncillaryData: string;
      }
    >;

    RootBundleDisputed(
      disputer?: string | null,
      requestTime?: null,
      disputedAncillaryData?: null
    ): TypedEventFilter<
      [string, BigNumber, string],
      {
        disputer: string;
        requestTime: BigNumber;
        disputedAncillaryData: string;
      }
    >;

    "RootBundleExecuted(uint256,uint256,address[],uint256[],int256[],int256[],address)"(
      leafId?: BigNumberish | null,
      chainId?: BigNumberish | null,
      l1Token?: null,
      bundleLpFees?: null,
      netSendAmount?: null,
      runningBalance?: null,
      caller?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string[], BigNumber[], BigNumber[], BigNumber[], string],
      {
        leafId: BigNumber;
        chainId: BigNumber;
        l1Token: string[];
        bundleLpFees: BigNumber[];
        netSendAmount: BigNumber[];
        runningBalance: BigNumber[];
        caller: string;
      }
    >;

    RootBundleExecuted(
      leafId?: BigNumberish | null,
      chainId?: BigNumberish | null,
      l1Token?: null,
      bundleLpFees?: null,
      netSendAmount?: null,
      runningBalance?: null,
      caller?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string[], BigNumber[], BigNumber[], BigNumber[], string],
      {
        leafId: BigNumber;
        chainId: BigNumber;
        l1Token: string[];
        bundleLpFees: BigNumber[];
        netSendAmount: BigNumber[];
        runningBalance: BigNumber[];
        caller: string;
      }
    >;

    "SpokePoolAdminFunctionTriggered(uint256,bytes)"(
      chainId?: BigNumberish | null,
      message?: null
    ): TypedEventFilter<[BigNumber, string], { chainId: BigNumber; message: string }>;

    SpokePoolAdminFunctionTriggered(
      chainId?: BigNumberish | null,
      message?: null
    ): TypedEventFilter<[BigNumber, string], { chainId: BigNumber; message: string }>;

    "WhitelistRoute(uint256,uint256,address,address)"(
      originChainId?: null,
      destinationChainId?: null,
      originToken?: null,
      destinationToken?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        originChainId: BigNumber;
        destinationChainId: BigNumber;
        originToken: string;
        destinationToken: string;
      }
    >;

    WhitelistRoute(
      originChainId?: null,
      destinationChainId?: null,
      originToken?: null,
      destinationToken?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, string, string],
      {
        originChainId: BigNumber;
        destinationChainId: BigNumber;
        originToken: string;
        destinationToken: string;
      }
    >;
  };

  estimateGas: {
    addLiquidity(
      l1Token: string,
      l1TokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bondAmount(overrides?: CallOverrides): Promise<BigNumber>;

    bondToken(overrides?: CallOverrides): Promise<BigNumber>;

    claimProtocolFeesCaptured(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    crossChainContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    disableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    enableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRateCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    finder(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<BigNumber>;

    identifier(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUtilizationCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityUtilizationPostRelay(
      l1Token: string,
      relayedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liveness(overrides?: CallOverrides): Promise<BigNumber>;

    loadEthForL2Calls(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    lpFeeRatePerSecond(overrides?: CallOverrides): Promise<BigNumber>;

    lpTokenFactory(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pooledTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    protocolFeeCaptureAddress(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFeeCapturePct(overrides?: CallOverrides): Promise<BigNumber>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    rootBundleProposal(overrides?: CallOverrides): Promise<BigNumber>;

    setBond(
      newBondToken: string,
      newBondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(time: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setIdentifier(
      newIdentifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiveness(
      newLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unclaimedAccumulatedProtocolFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      l1Token: string,
      l1TokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bondAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bondToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    claimProtocolFeesCaptured(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    crossChainContracts(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    enableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRateCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    finder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    identifier(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityUtilizationCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityUtilizationPostRelay(
      l1Token: string,
      relayedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liveness(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    loadEthForL2Calls(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lpFeeRatePerSecond(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lpTokenFactory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pooledTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    protocolFeeCaptureAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFeeCapturePct(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    rootBundleProposal(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBond(
      newBondToken: string,
      newBondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIdentifier(
      newIdentifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiveness(
      newLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unclaimedAccumulatedProtocolFees(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
