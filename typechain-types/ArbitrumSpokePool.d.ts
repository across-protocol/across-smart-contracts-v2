/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ArbitrumSpokePoolInterface extends ethers.utils.Interface {
  functions: {
    "chainId()": FunctionFragment;
    "crossDomainAdmin()": FunctionFragment;
    "deploymentTime()": FunctionFragment;
    "deposit(address,address,uint256,uint256,uint64,uint32)": FunctionFragment;
    "depositQuoteTimeBuffer()": FunctionFragment;
    "enabledDepositRoutes(address,uint256)": FunctionFragment;
    "executeRelayerRefundRoot(uint32,(uint256,uint256,uint256[],uint32,address,address[]),bytes32[])": FunctionFragment;
    "executeSlowRelayRoot(address,address,address,uint256,uint256,uint64,uint64,uint32,uint32,bytes32[])": FunctionFragment;
    "fillRelay(address,address,address,uint256,uint256,uint256,uint256,uint64,uint64,uint32)": FunctionFragment;
    "fillRelayWithUpdatedFee(address,address,address,uint256,uint256,uint256,uint256,uint64,uint64,uint64,uint32,bytes)": FunctionFragment;
    "getCurrentTime()": FunctionFragment;
    "hubPool()": FunctionFragment;
    "l2GatewayRouter()": FunctionFragment;
    "multicall(bytes[])": FunctionFragment;
    "numberOfDeposits()": FunctionFragment;
    "relayFills(bytes32)": FunctionFragment;
    "relayRootBundle(bytes32,bytes32)": FunctionFragment;
    "rootBundles(uint256)": FunctionFragment;
    "setCrossDomainAdmin(address)": FunctionFragment;
    "setCurrentTime(uint256)": FunctionFragment;
    "setDepositQuoteTimeBuffer(uint32)": FunctionFragment;
    "setEnableRoute(address,uint256,bool)": FunctionFragment;
    "setHubPool(address)": FunctionFragment;
    "setL2GatewayRouter(address)": FunctionFragment;
    "speedUpDeposit(address,uint64,uint32,bytes)": FunctionFragment;
    "timerAddress()": FunctionFragment;
    "weth()": FunctionFragment;
    "whitelistToken(address,address)": FunctionFragment;
    "whitelistedTokens(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "chainId", values?: undefined): string;
  encodeFunctionData(functionFragment: "crossDomainAdmin", values?: undefined): string;
  encodeFunctionData(functionFragment: "deploymentTime", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "depositQuoteTimeBuffer", values?: undefined): string;
  encodeFunctionData(functionFragment: "enabledDepositRoutes", values: [string, BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "executeRelayerRefundRoot",
    values: [
      BigNumberish,
      {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeSlowRelayRoot",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelay",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "fillRelayWithUpdatedFee",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(functionFragment: "getCurrentTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "hubPool", values?: undefined): string;
  encodeFunctionData(functionFragment: "l2GatewayRouter", values?: undefined): string;
  encodeFunctionData(functionFragment: "multicall", values: [BytesLike[]]): string;
  encodeFunctionData(functionFragment: "numberOfDeposits", values?: undefined): string;
  encodeFunctionData(functionFragment: "relayFills", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "relayRootBundle", values: [BytesLike, BytesLike]): string;
  encodeFunctionData(functionFragment: "rootBundles", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setCrossDomainAdmin", values: [string]): string;
  encodeFunctionData(functionFragment: "setCurrentTime", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setDepositQuoteTimeBuffer", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setEnableRoute", values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: "setHubPool", values: [string]): string;
  encodeFunctionData(functionFragment: "setL2GatewayRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "speedUpDeposit",
    values: [string, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "timerAddress", values?: undefined): string;
  encodeFunctionData(functionFragment: "weth", values?: undefined): string;
  encodeFunctionData(functionFragment: "whitelistToken", values: [string, string]): string;
  encodeFunctionData(functionFragment: "whitelistedTokens", values: [string]): string;

  decodeFunctionResult(functionFragment: "chainId", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "crossDomainAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploymentTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositQuoteTimeBuffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enabledDepositRoutes", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeRelayerRefundRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeSlowRelayRoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillRelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "fillRelayWithUpdatedFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getCurrentTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hubPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l2GatewayRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "multicall", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "numberOfDeposits", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayFills", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relayRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rootBundles", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCrossDomainAdmin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCurrentTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setDepositQuoteTimeBuffer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEnableRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setHubPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setL2GatewayRouter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "speedUpDeposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "timerAddress", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "weth", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistToken", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedTokens", data: BytesLike): Result;

  events: {
    "ArbitrumTokensBridged(address,address,uint256)": EventFragment;
    "EnabledDepositRoute(address,uint256,bool)": EventFragment;
    "ExecutedRelayerRefundRoot(uint256,uint256,uint256[],uint32,uint32,address,address[],address)": EventFragment;
    "ExecutedSlowRelayRoot(bytes32,uint256,uint256,uint256,uint256,uint64,uint64,uint32,address,address,address,address)": EventFragment;
    "FilledRelay(bytes32,uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint32,address,address,address,address)": EventFragment;
    "FundsDeposited(uint256,uint256,uint64,uint32,uint32,address,address,address)": EventFragment;
    "RelayedRootBundle(uint32,bytes32,bytes32)": EventFragment;
    "RequestedSpeedUpDeposit(uint64,uint32,address,bytes)": EventFragment;
    "SetDepositQuoteTimeBuffer(uint32)": EventFragment;
    "SetHubPool(address)": EventFragment;
    "SetL2GatewayRouter(address)": EventFragment;
    "SetXDomainAdmin(address)": EventFragment;
    "TokensBridged(uint256,uint256,uint32,address,address)": EventFragment;
    "WhitelistedTokens(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ArbitrumTokensBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EnabledDepositRoute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedRelayerRefundRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ExecutedSlowRelayRoot"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FilledRelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FundsDeposited"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RelayedRootBundle"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestedSpeedUpDeposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetDepositQuoteTimeBuffer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetHubPool"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetL2GatewayRouter"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetXDomainAdmin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokensBridged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WhitelistedTokens"): EventFragment;
}

export type ArbitrumTokensBridgedEvent = TypedEvent<
  [string, string, BigNumber] & {
    l1Token: string;
    target: string;
    numberOfTokensBridged: BigNumber;
  }
>;

export type EnabledDepositRouteEvent = TypedEvent<
  [string, BigNumber, boolean] & {
    originToken: string;
    destinationChainId: BigNumber;
    enabled: boolean;
  }
>;

export type ExecutedRelayerRefundRootEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber[], number, number, string, string[], string] & {
    amountToReturn: BigNumber;
    chainId: BigNumber;
    refundAmounts: BigNumber[];
    rootBundleId: number;
    leafId: number;
    l2TokenAddress: string;
    refundAddresses: string[];
    caller: string;
  }
>;

export type ExecutedSlowRelayRootEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number, string, string, string, string] & {
    relayHash: string;
    amount: BigNumber;
    totalFilledAmount: BigNumber;
    fillAmount: BigNumber;
    originChainId: BigNumber;
    relayerFeePct: BigNumber;
    realizedLpFeePct: BigNumber;
    depositId: number;
    destinationToken: string;
    caller: string;
    depositor: string;
    recipient: string;
  }
>;

export type FilledRelayEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    string,
    string,
    string,
    string
  ] & {
    relayHash: string;
    amount: BigNumber;
    totalFilledAmount: BigNumber;
    fillAmount: BigNumber;
    repaymentChainId: BigNumber;
    originChainId: BigNumber;
    relayerFeePct: BigNumber;
    realizedLpFeePct: BigNumber;
    depositId: number;
    destinationToken: string;
    relayer: string;
    depositor: string;
    recipient: string;
  }
>;

export type FundsDepositedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, number, number, string, string, string] & {
    amount: BigNumber;
    destinationChainId: BigNumber;
    relayerFeePct: BigNumber;
    depositId: number;
    quoteTimestamp: number;
    originToken: string;
    recipient: string;
    depositor: string;
  }
>;

export type RelayedRootBundleEvent = TypedEvent<
  [number, string, string] & {
    rootBundleId: number;
    relayerRefundRoot: string;
    slowRelayRoot: string;
  }
>;

export type RequestedSpeedUpDepositEvent = TypedEvent<
  [BigNumber, number, string, string] & {
    newRelayerFeePct: BigNumber;
    depositId: number;
    depositor: string;
    depositorSignature: string;
  }
>;

export type SetDepositQuoteTimeBufferEvent = TypedEvent<[number] & { newBuffer: number }>;

export type SetHubPoolEvent = TypedEvent<[string] & { newHubPool: string }>;

export type SetL2GatewayRouterEvent = TypedEvent<[string] & { newL2GatewayRouter: string }>;

export type SetXDomainAdminEvent = TypedEvent<[string] & { newAdmin: string }>;

export type TokensBridgedEvent = TypedEvent<
  [BigNumber, BigNumber, number, string, string] & {
    amountToReturn: BigNumber;
    chainId: BigNumber;
    leafId: number;
    l2TokenAddress: string;
    caller: string;
  }
>;

export type WhitelistedTokensEvent = TypedEvent<[string, string] & { l2Token: string; l1Token: string }>;

export class ArbitrumSpokePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ArbitrumSpokePoolInterface;

  functions: {
    chainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<[string]>;

    deploymentTime(overrides?: CallOverrides): Promise<[number]>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<[number]>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<[boolean]>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    hubPool(overrides?: CallOverrides): Promise<[string]>;

    l2GatewayRouter(overrides?: CallOverrides): Promise<[string]>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    numberOfDeposits(overrides?: CallOverrides): Promise<[number]>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rootBundles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDepositQuoteTimeBuffer(
      newDepositQuoteTimeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setHubPool(
      newHubPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setL2GatewayRouter(
      newL2GatewayRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<[string]>;

    weth(overrides?: CallOverrides): Promise<[string]>;

    whitelistToken(
      l2Token: string,
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedTokens(arg0: string, overrides?: CallOverrides): Promise<[string]>;
  };

  chainId(overrides?: CallOverrides): Promise<BigNumber>;

  crossDomainAdmin(overrides?: CallOverrides): Promise<string>;

  deploymentTime(overrides?: CallOverrides): Promise<number>;

  deposit(
    recipient: string,
    originToken: string,
    amount: BigNumberish,
    destinationChainId: BigNumberish,
    relayerFeePct: BigNumberish,
    quoteTimestamp: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<number>;

  enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

  executeRelayerRefundRoot(
    rootBundleId: BigNumberish,
    relayerRefundLeaf: {
      amountToReturn: BigNumberish;
      chainId: BigNumberish;
      refundAmounts: BigNumberish[];
      leafId: BigNumberish;
      l2TokenAddress: string;
      refundAddresses: string[];
    },
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeSlowRelayRoot(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    depositId: BigNumberish,
    rootBundleId: BigNumberish,
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillRelay(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    maxTokensToSend: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    depositId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fillRelayWithUpdatedFee(
    depositor: string,
    recipient: string,
    destinationToken: string,
    amount: BigNumberish,
    maxTokensToSend: BigNumberish,
    repaymentChainId: BigNumberish,
    originChainId: BigNumberish,
    realizedLpFeePct: BigNumberish,
    relayerFeePct: BigNumberish,
    newRelayerFeePct: BigNumberish,
    depositId: BigNumberish,
    depositorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

  hubPool(overrides?: CallOverrides): Promise<string>;

  l2GatewayRouter(overrides?: CallOverrides): Promise<string>;

  multicall(
    data: BytesLike[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  numberOfDeposits(overrides?: CallOverrides): Promise<number>;

  relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  relayRootBundle(
    relayerRefundRoot: BytesLike,
    slowRelayRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rootBundles(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }>;

  setCrossDomainAdmin(
    newCrossDomainAdmin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCurrentTime(
    time: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDepositQuoteTimeBuffer(
    newDepositQuoteTimeBuffer: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setEnableRoute(
    originToken: string,
    destinationChainId: BigNumberish,
    enabled: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setHubPool(
    newHubPool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setL2GatewayRouter(
    newL2GatewayRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  speedUpDeposit(
    depositor: string,
    newRelayerFeePct: BigNumberish,
    depositId: BigNumberish,
    depositorSignature: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  timerAddress(overrides?: CallOverrides): Promise<string>;

  weth(overrides?: CallOverrides): Promise<string>;

  whitelistToken(
    l2Token: string,
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedTokens(arg0: string, overrides?: CallOverrides): Promise<string>;

  callStatic: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<string>;

    deploymentTime(overrides?: CallOverrides): Promise<number>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<number>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    hubPool(overrides?: CallOverrides): Promise<string>;

    l2GatewayRouter(overrides?: CallOverrides): Promise<string>;

    multicall(data: BytesLike[], overrides?: CallOverrides): Promise<string[]>;

    numberOfDeposits(overrides?: CallOverrides): Promise<number>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    relayRootBundle(relayerRefundRoot: BytesLike, slowRelayRoot: BytesLike, overrides?: CallOverrides): Promise<void>;

    rootBundles(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { slowRelayRoot: string; relayerRefundRoot: string }>;

    setCrossDomainAdmin(newCrossDomainAdmin: string, overrides?: CallOverrides): Promise<void>;

    setCurrentTime(time: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setDepositQuoteTimeBuffer(newDepositQuoteTimeBuffer: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setHubPool(newHubPool: string, overrides?: CallOverrides): Promise<void>;

    setL2GatewayRouter(newL2GatewayRouter: string, overrides?: CallOverrides): Promise<void>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    timerAddress(overrides?: CallOverrides): Promise<string>;

    weth(overrides?: CallOverrides): Promise<string>;

    whitelistToken(l2Token: string, l1Token: string, overrides?: CallOverrides): Promise<void>;

    whitelistedTokens(arg0: string, overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "ArbitrumTokensBridged(address,address,uint256)"(
      l1Token?: string | null,
      target?: null,
      numberOfTokensBridged?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { l1Token: string; target: string; numberOfTokensBridged: BigNumber }
    >;

    ArbitrumTokensBridged(
      l1Token?: string | null,
      target?: null,
      numberOfTokensBridged?: null
    ): TypedEventFilter<
      [string, string, BigNumber],
      { l1Token: string; target: string; numberOfTokensBridged: BigNumber }
    >;

    "EnabledDepositRoute(address,uint256,bool)"(
      originToken?: string | null,
      destinationChainId?: BigNumberish | null,
      enabled?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { originToken: string; destinationChainId: BigNumber; enabled: boolean }
    >;

    EnabledDepositRoute(
      originToken?: string | null,
      destinationChainId?: BigNumberish | null,
      enabled?: null
    ): TypedEventFilter<
      [string, BigNumber, boolean],
      { originToken: string; destinationChainId: BigNumber; enabled: boolean }
    >;

    "ExecutedRelayerRefundRoot(uint256,uint256,uint256[],uint32,uint32,address,address[],address)"(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      refundAmounts?: null,
      rootBundleId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: null,
      refundAddresses?: null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber[], number, number, string, string[], string],
      {
        amountToReturn: BigNumber;
        chainId: BigNumber;
        refundAmounts: BigNumber[];
        rootBundleId: number;
        leafId: number;
        l2TokenAddress: string;
        refundAddresses: string[];
        caller: string;
      }
    >;

    ExecutedRelayerRefundRoot(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      refundAmounts?: null,
      rootBundleId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: null,
      refundAddresses?: null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber[], number, number, string, string[], string],
      {
        amountToReturn: BigNumber;
        chainId: BigNumber;
        refundAmounts: BigNumber[];
        rootBundleId: number;
        leafId: number;
        l2TokenAddress: string;
        refundAddresses: string[];
        caller: string;
      }
    >;

    "ExecutedSlowRelayRoot(bytes32,uint256,uint256,uint256,uint256,uint64,uint64,uint32,address,address,address,address)"(
      relayHash?: BytesLike | null,
      amount?: null,
      totalFilledAmount?: null,
      fillAmount?: null,
      originChainId?: BigNumberish | null,
      relayerFeePct?: null,
      realizedLpFeePct?: null,
      depositId?: null,
      destinationToken?: null,
      caller?: null,
      depositor?: string | null,
      recipient?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ],
      {
        relayHash: string;
        amount: BigNumber;
        totalFilledAmount: BigNumber;
        fillAmount: BigNumber;
        originChainId: BigNumber;
        relayerFeePct: BigNumber;
        realizedLpFeePct: BigNumber;
        depositId: number;
        destinationToken: string;
        caller: string;
        depositor: string;
        recipient: string;
      }
    >;

    ExecutedSlowRelayRoot(
      relayHash?: BytesLike | null,
      amount?: null,
      totalFilledAmount?: null,
      fillAmount?: null,
      originChainId?: BigNumberish | null,
      relayerFeePct?: null,
      realizedLpFeePct?: null,
      depositId?: null,
      destinationToken?: null,
      caller?: null,
      depositor?: string | null,
      recipient?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ],
      {
        relayHash: string;
        amount: BigNumber;
        totalFilledAmount: BigNumber;
        fillAmount: BigNumber;
        originChainId: BigNumber;
        relayerFeePct: BigNumber;
        realizedLpFeePct: BigNumber;
        depositId: number;
        destinationToken: string;
        caller: string;
        depositor: string;
        recipient: string;
      }
    >;

    "FilledRelay(bytes32,uint256,uint256,uint256,uint256,uint256,uint64,uint64,uint32,address,address,address,address)"(
      relayHash?: BytesLike | null,
      amount?: null,
      totalFilledAmount?: null,
      fillAmount?: null,
      repaymentChainId?: null,
      originChainId?: null,
      relayerFeePct?: null,
      realizedLpFeePct?: null,
      depositId?: null,
      destinationToken?: null,
      relayer?: string | null,
      depositor?: string | null,
      recipient?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ],
      {
        relayHash: string;
        amount: BigNumber;
        totalFilledAmount: BigNumber;
        fillAmount: BigNumber;
        repaymentChainId: BigNumber;
        originChainId: BigNumber;
        relayerFeePct: BigNumber;
        realizedLpFeePct: BigNumber;
        depositId: number;
        destinationToken: string;
        relayer: string;
        depositor: string;
        recipient: string;
      }
    >;

    FilledRelay(
      relayHash?: BytesLike | null,
      amount?: null,
      totalFilledAmount?: null,
      fillAmount?: null,
      repaymentChainId?: null,
      originChainId?: null,
      relayerFeePct?: null,
      realizedLpFeePct?: null,
      depositId?: null,
      destinationToken?: null,
      relayer?: string | null,
      depositor?: string | null,
      recipient?: null
    ): TypedEventFilter<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        number,
        string,
        string,
        string,
        string
      ],
      {
        relayHash: string;
        amount: BigNumber;
        totalFilledAmount: BigNumber;
        fillAmount: BigNumber;
        repaymentChainId: BigNumber;
        originChainId: BigNumber;
        relayerFeePct: BigNumber;
        realizedLpFeePct: BigNumber;
        depositId: number;
        destinationToken: string;
        relayer: string;
        depositor: string;
        recipient: string;
      }
    >;

    "FundsDeposited(uint256,uint256,uint64,uint32,uint32,address,address,address)"(
      amount?: null,
      destinationChainId?: null,
      relayerFeePct?: null,
      depositId?: BigNumberish | null,
      quoteTimestamp?: null,
      originToken?: string | null,
      recipient?: null,
      depositor?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, number, number, string, string, string],
      {
        amount: BigNumber;
        destinationChainId: BigNumber;
        relayerFeePct: BigNumber;
        depositId: number;
        quoteTimestamp: number;
        originToken: string;
        recipient: string;
        depositor: string;
      }
    >;

    FundsDeposited(
      amount?: null,
      destinationChainId?: null,
      relayerFeePct?: null,
      depositId?: BigNumberish | null,
      quoteTimestamp?: null,
      originToken?: string | null,
      recipient?: null,
      depositor?: string | null
    ): TypedEventFilter<
      [BigNumber, BigNumber, BigNumber, number, number, string, string, string],
      {
        amount: BigNumber;
        destinationChainId: BigNumber;
        relayerFeePct: BigNumber;
        depositId: number;
        quoteTimestamp: number;
        originToken: string;
        recipient: string;
        depositor: string;
      }
    >;

    "RelayedRootBundle(uint32,bytes32,bytes32)"(
      rootBundleId?: BigNumberish | null,
      relayerRefundRoot?: null,
      slowRelayRoot?: null
    ): TypedEventFilter<
      [number, string, string],
      { rootBundleId: number; relayerRefundRoot: string; slowRelayRoot: string }
    >;

    RelayedRootBundle(
      rootBundleId?: BigNumberish | null,
      relayerRefundRoot?: null,
      slowRelayRoot?: null
    ): TypedEventFilter<
      [number, string, string],
      { rootBundleId: number; relayerRefundRoot: string; slowRelayRoot: string }
    >;

    "RequestedSpeedUpDeposit(uint64,uint32,address,bytes)"(
      newRelayerFeePct?: null,
      depositId?: BigNumberish | null,
      depositor?: string | null,
      depositorSignature?: null
    ): TypedEventFilter<
      [BigNumber, number, string, string],
      {
        newRelayerFeePct: BigNumber;
        depositId: number;
        depositor: string;
        depositorSignature: string;
      }
    >;

    RequestedSpeedUpDeposit(
      newRelayerFeePct?: null,
      depositId?: BigNumberish | null,
      depositor?: string | null,
      depositorSignature?: null
    ): TypedEventFilter<
      [BigNumber, number, string, string],
      {
        newRelayerFeePct: BigNumber;
        depositId: number;
        depositor: string;
        depositorSignature: string;
      }
    >;

    "SetDepositQuoteTimeBuffer(uint32)"(newBuffer?: null): TypedEventFilter<[number], { newBuffer: number }>;

    SetDepositQuoteTimeBuffer(newBuffer?: null): TypedEventFilter<[number], { newBuffer: number }>;

    "SetHubPool(address)"(newHubPool?: string | null): TypedEventFilter<[string], { newHubPool: string }>;

    SetHubPool(newHubPool?: string | null): TypedEventFilter<[string], { newHubPool: string }>;

    "SetL2GatewayRouter(address)"(
      newL2GatewayRouter?: string | null
    ): TypedEventFilter<[string], { newL2GatewayRouter: string }>;

    SetL2GatewayRouter(newL2GatewayRouter?: string | null): TypedEventFilter<[string], { newL2GatewayRouter: string }>;

    "SetXDomainAdmin(address)"(newAdmin?: string | null): TypedEventFilter<[string], { newAdmin: string }>;

    SetXDomainAdmin(newAdmin?: string | null): TypedEventFilter<[string], { newAdmin: string }>;

    "TokensBridged(uint256,uint256,uint32,address,address)"(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number, string, string],
      {
        amountToReturn: BigNumber;
        chainId: BigNumber;
        leafId: number;
        l2TokenAddress: string;
        caller: string;
      }
    >;

    TokensBridged(
      amountToReturn?: null,
      chainId?: BigNumberish | null,
      leafId?: BigNumberish | null,
      l2TokenAddress?: string | null,
      caller?: null
    ): TypedEventFilter<
      [BigNumber, BigNumber, number, string, string],
      {
        amountToReturn: BigNumber;
        chainId: BigNumber;
        leafId: number;
        l2TokenAddress: string;
        caller: string;
      }
    >;

    "WhitelistedTokens(address,address)"(
      l2Token?: string | null,
      l1Token?: string | null
    ): TypedEventFilter<[string, string], { l2Token: string; l1Token: string }>;

    WhitelistedTokens(
      l2Token?: string | null,
      l1Token?: string | null
    ): TypedEventFilter<[string, string], { l2Token: string; l1Token: string }>;
  };

  estimateGas: {
    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<BigNumber>;

    deploymentTime(overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<BigNumber>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getCurrentTime(overrides?: CallOverrides): Promise<BigNumber>;

    hubPool(overrides?: CallOverrides): Promise<BigNumber>;

    l2GatewayRouter(overrides?: CallOverrides): Promise<BigNumber>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    numberOfDeposits(overrides?: CallOverrides): Promise<BigNumber>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rootBundles(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCurrentTime(time: BigNumberish, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setDepositQuoteTimeBuffer(
      newDepositQuoteTimeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setHubPool(newHubPool: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setL2GatewayRouter(
      newL2GatewayRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    timerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    weth(overrides?: CallOverrides): Promise<BigNumber>;

    whitelistToken(
      l2Token: string,
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedTokens(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    crossDomainAdmin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deploymentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    deposit(
      recipient: string,
      originToken: string,
      amount: BigNumberish,
      destinationChainId: BigNumberish,
      relayerFeePct: BigNumberish,
      quoteTimestamp: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    depositQuoteTimeBuffer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    enabledDepositRoutes(arg0: string, arg1: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeRelayerRefundRoot(
      rootBundleId: BigNumberish,
      relayerRefundLeaf: {
        amountToReturn: BigNumberish;
        chainId: BigNumberish;
        refundAmounts: BigNumberish[];
        leafId: BigNumberish;
        l2TokenAddress: string;
        refundAddresses: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeSlowRelayRoot(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      rootBundleId: BigNumberish,
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillRelay(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      depositId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fillRelayWithUpdatedFee(
      depositor: string,
      recipient: string,
      destinationToken: string,
      amount: BigNumberish,
      maxTokensToSend: BigNumberish,
      repaymentChainId: BigNumberish,
      originChainId: BigNumberish,
      realizedLpFeePct: BigNumberish,
      relayerFeePct: BigNumberish,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getCurrentTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hubPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    l2GatewayRouter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    multicall(
      data: BytesLike[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    numberOfDeposits(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayFills(arg0: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    relayRootBundle(
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rootBundles(arg0: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setCrossDomainAdmin(
      newCrossDomainAdmin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCurrentTime(
      time: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDepositQuoteTimeBuffer(
      newDepositQuoteTimeBuffer: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setEnableRoute(
      originToken: string,
      destinationChainId: BigNumberish,
      enabled: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setHubPool(
      newHubPool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setL2GatewayRouter(
      newL2GatewayRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    speedUpDeposit(
      depositor: string,
      newRelayerFeePct: BigNumberish,
      depositId: BigNumberish,
      depositorSignature: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    timerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    whitelistToken(
      l2Token: string,
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedTokens(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
