/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface HubPoolInterfaceInterface extends ethers.utils.Interface {
  functions: {
    "addLiquidity(address,uint256)": FunctionFragment;
    "claimProtocolFeesCaptured(address)": FunctionFragment;
    "disableL1TokenForLiquidityProvision(address)": FunctionFragment;
    "disputeRootBundle()": FunctionFragment;
    "enableL1TokenForLiquidityProvision(address)": FunctionFragment;
    "exchangeRateCurrent(address)": FunctionFragment;
    "executeRootBundle((uint256,uint256[],int256[],int256[],uint8,address[]),bytes32[])": FunctionFragment;
    "getRootBundleProposalAncillaryData()": FunctionFragment;
    "liquidityUtilizationCurrent(address)": FunctionFragment;
    "liquidityUtilizationPostRelay(address,uint256)": FunctionFragment;
    "loadEthForL2Calls()": FunctionFragment;
    "proposeRootBundle(uint256[],uint8,bytes32,bytes32,bytes32)": FunctionFragment;
    "relaySpokePoolAdminFunction(uint256,bytes)": FunctionFragment;
    "removeLiquidity(address,uint256,bool)": FunctionFragment;
    "setBond(address,uint256)": FunctionFragment;
    "setCrossChainContracts(uint256,address,address)": FunctionFragment;
    "setIdentifier(bytes32)": FunctionFragment;
    "setLiveness(uint32)": FunctionFragment;
    "setProtocolFeeCapture(address,uint256)": FunctionFragment;
    "sync(address)": FunctionFragment;
    "whitelistRoute(uint256,uint256,address,address)": FunctionFragment;
    "whitelistedRoute(uint256,address,uint256)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addLiquidity", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "claimProtocolFeesCaptured", values: [string]): string;
  encodeFunctionData(functionFragment: "disableL1TokenForLiquidityProvision", values: [string]): string;
  encodeFunctionData(functionFragment: "disputeRootBundle", values?: undefined): string;
  encodeFunctionData(functionFragment: "enableL1TokenForLiquidityProvision", values: [string]): string;
  encodeFunctionData(functionFragment: "exchangeRateCurrent", values: [string]): string;
  encodeFunctionData(
    functionFragment: "executeRootBundle",
    values: [
      {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "getRootBundleProposalAncillaryData", values?: undefined): string;
  encodeFunctionData(functionFragment: "liquidityUtilizationCurrent", values: [string]): string;
  encodeFunctionData(functionFragment: "liquidityUtilizationPostRelay", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "loadEthForL2Calls", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeRootBundle",
    values: [BigNumberish[], BigNumberish, BytesLike, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "relaySpokePoolAdminFunction", values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: "removeLiquidity", values: [string, BigNumberish, boolean]): string;
  encodeFunctionData(functionFragment: "setBond", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "setCrossChainContracts", values: [BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: "setIdentifier", values: [BytesLike]): string;
  encodeFunctionData(functionFragment: "setLiveness", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "setProtocolFeeCapture", values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: "sync", values: [string]): string;
  encodeFunctionData(functionFragment: "whitelistRoute", values: [BigNumberish, BigNumberish, string, string]): string;
  encodeFunctionData(functionFragment: "whitelistedRoute", values: [BigNumberish, string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: "addLiquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "claimProtocolFeesCaptured", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disableL1TokenForLiquidityProvision", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "disputeRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "enableL1TokenForLiquidityProvision", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exchangeRateCurrent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "executeRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getRootBundleProposalAncillaryData", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityUtilizationCurrent", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidityUtilizationPostRelay", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "loadEthForL2Calls", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "proposeRootBundle", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "relaySpokePoolAdminFunction", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeLiquidity", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBond", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setCrossChainContracts", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setIdentifier", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setLiveness", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setProtocolFeeCapture", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sync", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistRoute", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "whitelistedRoute", data: BytesLike): Result;

  events: {};
}

export class HubPoolInterface extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: HubPoolInterfaceInterface;

  functions: {
    addLiquidity(
      l1Token: string,
      l1TokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    claimProtocolFeesCaptured(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    enableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    exchangeRateCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<[string] & { ancillaryData: string }>;

    liquidityUtilizationCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    liquidityUtilizationPostRelay(
      token: string,
      relayedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    loadEthForL2Calls(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setBond(
      newBondToken: string,
      newBondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setIdentifier(
      newIdentifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setLiveness(
      newLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;
  };

  addLiquidity(
    l1Token: string,
    l1TokenAmount: BigNumberish,
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  claimProtocolFeesCaptured(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disableL1TokenForLiquidityProvision(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  enableL1TokenForLiquidityProvision(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  exchangeRateCurrent(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  executeRootBundle(
    poolRebalanceLeaf: {
      chainId: BigNumberish;
      bundleLpFees: BigNumberish[];
      netSendAmounts: BigNumberish[];
      runningBalances: BigNumberish[];
      leafId: BigNumberish;
      l1Tokens: string[];
    },
    proof: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<string>;

  liquidityUtilizationCurrent(
    l1Token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  liquidityUtilizationPostRelay(
    token: string,
    relayedAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  loadEthForL2Calls(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  proposeRootBundle(
    bundleEvaluationBlockNumbers: BigNumberish[],
    poolRebalanceLeafCount: BigNumberish,
    poolRebalanceRoot: BytesLike,
    relayerRefundRoot: BytesLike,
    slowRelayRoot: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  relaySpokePoolAdminFunction(
    chainId: BigNumberish,
    functionData: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeLiquidity(
    l1Token: string,
    lpTokenAmount: BigNumberish,
    sendEth: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setBond(
    newBondToken: string,
    newBondAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setCrossChainContracts(
    l2ChainId: BigNumberish,
    adapter: string,
    spokePool: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setIdentifier(
    newIdentifier: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setLiveness(
    newLiveness: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setProtocolFeeCapture(
    newProtocolFeeCaptureAddress: string,
    newProtocolFeeCapturePct: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  whitelistRoute(
    originChainId: BigNumberish,
    destinationChainId: BigNumberish,
    originToken: string,
    destinationToken: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  whitelistedRoute(
    originChainId: BigNumberish,
    originToken: string,
    destinationChainId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  callStatic: {
    addLiquidity(l1Token: string, l1TokenAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    claimProtocolFeesCaptured(l1Token: string, overrides?: CallOverrides): Promise<void>;

    disableL1TokenForLiquidityProvision(l1Token: string, overrides?: CallOverrides): Promise<void>;

    disputeRootBundle(overrides?: CallOverrides): Promise<void>;

    enableL1TokenForLiquidityProvision(l1Token: string, overrides?: CallOverrides): Promise<void>;

    exchangeRateCurrent(l1Token: string, overrides?: CallOverrides): Promise<BigNumber>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<string>;

    liquidityUtilizationCurrent(l1Token: string, overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUtilizationPostRelay(
      token: string,
      relayedAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    loadEthForL2Calls(overrides?: CallOverrides): Promise<void>;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setBond(newBondToken: string, newBondAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setIdentifier(newIdentifier: BytesLike, overrides?: CallOverrides): Promise<void>;

    setLiveness(newLiveness: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sync(l1Token: string, overrides?: CallOverrides): Promise<void>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: CallOverrides
    ): Promise<void>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;
  };

  filters: {};

  estimateGas: {
    addLiquidity(
      l1Token: string,
      l1TokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    claimProtocolFeesCaptured(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    enableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    exchangeRateCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<BigNumber>;

    liquidityUtilizationCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    liquidityUtilizationPostRelay(
      token: string,
      relayedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    loadEthForL2Calls(overrides?: PayableOverrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setBond(
      newBondToken: string,
      newBondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setIdentifier(
      newIdentifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setLiveness(
      newLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addLiquidity(
      l1Token: string,
      l1TokenAmount: BigNumberish,
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    claimProtocolFeesCaptured(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeRootBundle(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    enableL1TokenForLiquidityProvision(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    exchangeRateCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    executeRootBundle(
      poolRebalanceLeaf: {
        chainId: BigNumberish;
        bundleLpFees: BigNumberish[];
        netSendAmounts: BigNumberish[];
        runningBalances: BigNumberish[];
        leafId: BigNumberish;
        l1Tokens: string[];
      },
      proof: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getRootBundleProposalAncillaryData(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    liquidityUtilizationCurrent(
      l1Token: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    liquidityUtilizationPostRelay(
      token: string,
      relayedAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    loadEthForL2Calls(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    proposeRootBundle(
      bundleEvaluationBlockNumbers: BigNumberish[],
      poolRebalanceLeafCount: BigNumberish,
      poolRebalanceRoot: BytesLike,
      relayerRefundRoot: BytesLike,
      slowRelayRoot: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    relaySpokePoolAdminFunction(
      chainId: BigNumberish,
      functionData: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeLiquidity(
      l1Token: string,
      lpTokenAmount: BigNumberish,
      sendEth: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setBond(
      newBondToken: string,
      newBondAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setCrossChainContracts(
      l2ChainId: BigNumberish,
      adapter: string,
      spokePool: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setIdentifier(
      newIdentifier: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setLiveness(
      newLiveness: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setProtocolFeeCapture(
      newProtocolFeeCaptureAddress: string,
      newProtocolFeeCapturePct: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sync(l1Token: string, overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    whitelistRoute(
      originChainId: BigNumberish,
      destinationChainId: BigNumberish,
      originToken: string,
      destinationToken: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    whitelistedRoute(
      originChainId: BigNumberish,
      originToken: string,
      destinationChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
