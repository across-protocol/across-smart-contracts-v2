{
  "address": "0x6899FED0f4A0Fc612BEbD9A4c0E820EC1c9865F0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        }
      ],
      "name": "createLpToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5d2ad64a335df5cb1b0124691ceb82e3830fe7fe401cbb83bd1359f8d30726f9",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x6899FED0f4A0Fc612BEbD9A4c0E820EC1c9865F0",
    "transactionIndex": 0,
    "gasUsed": "1936502",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x348154d9b7caf14d9c092903198420371a1e63602d4e971bfd9a3f79a6eb87f7",
    "transactionHash": "0x5d2ad64a335df5cb1b0124691ceb82e3830fe7fe401cbb83bd1359f8d30726f9",
    "logs": [],
    "blockNumber": 29910177,
    "cumulativeGasUsed": "1936502",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "dea5d5c1d6bae20cd2c78ebb14e3e818",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"}],\"name\":\"createLpToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LpTokenFactory.sol\":\"LpTokenFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@uma/core/contracts/common/implementation/ExpandedERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./MultiRole.sol\\\";\\nimport \\\"../interfaces/ExpandedIERC20.sol\\\";\\n\\n/**\\n * @title An ERC20 with permissioned burning and minting. The contract deployer will initially\\n * be the owner who is capable of adding new roles.\\n */\\ncontract ExpandedERC20 is ExpandedIERC20, ERC20, MultiRole {\\n    enum Roles {\\n        // Can set the minter and burner.\\n        Owner,\\n        // Addresses that can mint new tokens.\\n        Minter,\\n        // Addresses that can burn tokens that address owns.\\n        Burner\\n    }\\n\\n    uint8 _decimals;\\n\\n    /**\\n     * @notice Constructs the ExpandedERC20.\\n     * @param _tokenName The name which describes the new token.\\n     * @param _tokenSymbol The ticker abbreviation of the name. Ideally < 5 chars.\\n     * @param _tokenDecimals The number of decimals to define token precision.\\n     */\\n    constructor(\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        uint8 _tokenDecimals\\n    ) ERC20(_tokenName, _tokenSymbol) {\\n        _decimals = _tokenDecimals;\\n        _createExclusiveRole(uint256(Roles.Owner), uint256(Roles.Owner), msg.sender);\\n        _createSharedRole(uint256(Roles.Minter), uint256(Roles.Owner), new address[](0));\\n        _createSharedRole(uint256(Roles.Burner), uint256(Roles.Owner), new address[](0));\\n    }\\n\\n    function decimals() public view virtual override(ERC20) returns (uint8) {\\n        return _decimals;\\n    }\\n\\n    /**\\n     * @dev Mints `value` tokens to `recipient`, returning true on success.\\n     * @param recipient address to mint to.\\n     * @param value amount of tokens to mint.\\n     * @return True if the mint succeeded, or False.\\n     */\\n    function mint(address recipient, uint256 value)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.Minter))\\n        returns (bool)\\n    {\\n        _mint(recipient, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `msg.sender`.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burn(uint256 value) external override onlyRoleHolder(uint256(Roles.Burner)) {\\n        _burn(msg.sender, value);\\n    }\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     * @return True if the burn succeeded, or False.\\n     */\\n    function burnFrom(address recipient, uint256 value)\\n        external\\n        override\\n        onlyRoleHolder(uint256(Roles.Burner))\\n        returns (bool)\\n    {\\n        _burn(recipient, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Add Minter role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The address to which the Minter role is added.\\n     */\\n    function addMinter(address account) external virtual override {\\n        addMember(uint256(Roles.Minter), account);\\n    }\\n\\n    /**\\n     * @notice Add Burner role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The address to which the Burner role is added.\\n     */\\n    function addBurner(address account) external virtual override {\\n        addMember(uint256(Roles.Burner), account);\\n    }\\n\\n    /**\\n     * @notice Reset Owner role to account.\\n     * @dev The caller must have the Owner role.\\n     * @param account The new holder of the Owner role.\\n     */\\n    function resetOwner(address account) external virtual override {\\n        resetMember(uint256(Roles.Owner), account);\\n    }\\n}\\n\",\"keccak256\":\"0x8201459d3f78a1f97da7c421f2fbb859924d4facfc5fc235ba65d85bf12b2229\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/implementation/MultiRole.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nlibrary Exclusive {\\n    struct RoleMembership {\\n        address member;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.member == memberToCheck;\\n    }\\n\\n    function resetMember(RoleMembership storage roleMembership, address newMember) internal {\\n        require(newMember != address(0x0), \\\"Cannot set an exclusive role to 0x0\\\");\\n        roleMembership.member = newMember;\\n    }\\n\\n    function getMember(RoleMembership storage roleMembership) internal view returns (address) {\\n        return roleMembership.member;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address initialMember) internal {\\n        resetMember(roleMembership, initialMember);\\n    }\\n}\\n\\nlibrary Shared {\\n    struct RoleMembership {\\n        mapping(address => bool) members;\\n    }\\n\\n    function isMember(RoleMembership storage roleMembership, address memberToCheck) internal view returns (bool) {\\n        return roleMembership.members[memberToCheck];\\n    }\\n\\n    function addMember(RoleMembership storage roleMembership, address memberToAdd) internal {\\n        require(memberToAdd != address(0x0), \\\"Cannot add 0x0 to a shared role\\\");\\n        roleMembership.members[memberToAdd] = true;\\n    }\\n\\n    function removeMember(RoleMembership storage roleMembership, address memberToRemove) internal {\\n        roleMembership.members[memberToRemove] = false;\\n    }\\n\\n    function init(RoleMembership storage roleMembership, address[] memory initialMembers) internal {\\n        for (uint256 i = 0; i < initialMembers.length; i++) {\\n            addMember(roleMembership, initialMembers[i]);\\n        }\\n    }\\n}\\n\\n/**\\n * @title Base class to manage permissions for the derived class.\\n */\\nabstract contract MultiRole {\\n    using Exclusive for Exclusive.RoleMembership;\\n    using Shared for Shared.RoleMembership;\\n\\n    enum RoleType { Invalid, Exclusive, Shared }\\n\\n    struct Role {\\n        uint256 managingRole;\\n        RoleType roleType;\\n        Exclusive.RoleMembership exclusiveRoleMembership;\\n        Shared.RoleMembership sharedRoleMembership;\\n    }\\n\\n    mapping(uint256 => Role) private roles;\\n\\n    event ResetExclusiveMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event AddedSharedMember(uint256 indexed roleId, address indexed newMember, address indexed manager);\\n    event RemovedSharedMember(uint256 indexed roleId, address indexed oldMember, address indexed manager);\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the specified roleId.\\n     */\\n    modifier onlyRoleHolder(uint256 roleId) {\\n        require(holdsRole(roleId, msg.sender), \\\"Sender does not hold required role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the caller is a member of the manager role for the specified roleId.\\n     */\\n    modifier onlyRoleManager(uint256 roleId) {\\n        require(holdsRole(roles[roleId].managingRole, msg.sender), \\\"Can only be called by a role manager\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, exclusive roleId.\\n     */\\n    modifier onlyExclusive(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Exclusive, \\\"Must be called on an initialized Exclusive role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts unless the roleId represents an initialized, shared roleId.\\n     */\\n    modifier onlyShared(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Shared, \\\"Must be called on an initialized Shared role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Whether `memberToCheck` is a member of roleId.\\n     * @dev Reverts if roleId does not correspond to an initialized role.\\n     * @param roleId the Role to check.\\n     * @param memberToCheck the address to check.\\n     * @return True if `memberToCheck` is a member of `roleId`.\\n     */\\n    function holdsRole(uint256 roleId, address memberToCheck) public view returns (bool) {\\n        Role storage role = roles[roleId];\\n        if (role.roleType == RoleType.Exclusive) {\\n            return role.exclusiveRoleMembership.isMember(memberToCheck);\\n        } else if (role.roleType == RoleType.Shared) {\\n            return role.sharedRoleMembership.isMember(memberToCheck);\\n        }\\n        revert(\\\"Invalid roleId\\\");\\n    }\\n\\n    /**\\n     * @notice Changes the exclusive role holder of `roleId` to `newMember`.\\n     * @dev Reverts if the caller is not a member of the managing role for `roleId` or if `roleId` is not an\\n     * initialized, ExclusiveRole.\\n     * @param roleId the ExclusiveRole membership to modify.\\n     * @param newMember the new ExclusiveRole member.\\n     */\\n    function resetMember(uint256 roleId, address newMember) public onlyExclusive(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].exclusiveRoleMembership.resetMember(newMember);\\n        emit ResetExclusiveMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Gets the current holder of the exclusive role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, exclusive role.\\n     * @param roleId the ExclusiveRole membership to check.\\n     * @return the address of the current ExclusiveRole member.\\n     */\\n    function getMember(uint256 roleId) public view onlyExclusive(roleId) returns (address) {\\n        return roles[roleId].exclusiveRoleMembership.getMember();\\n    }\\n\\n    /**\\n     * @notice Adds `newMember` to the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param newMember the new SharedRole member.\\n     */\\n    function addMember(uint256 roleId, address newMember) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.addMember(newMember);\\n        emit AddedSharedMember(roleId, newMember, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes `memberToRemove` from the shared role, `roleId`.\\n     * @dev Reverts if `roleId` does not represent an initialized, SharedRole or if the caller is not a member of the\\n     * managing role for `roleId`.\\n     * @param roleId the SharedRole membership to modify.\\n     * @param memberToRemove the current SharedRole member to remove.\\n     */\\n    function removeMember(uint256 roleId, address memberToRemove) public onlyShared(roleId) onlyRoleManager(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(memberToRemove);\\n        emit RemovedSharedMember(roleId, memberToRemove, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Removes caller from the role, `roleId`.\\n     * @dev Reverts if the caller is not a member of the role for `roleId` or if `roleId` is not an\\n     * initialized, SharedRole.\\n     * @param roleId the SharedRole membership to modify.\\n     */\\n    function renounceMembership(uint256 roleId) public onlyShared(roleId) onlyRoleHolder(roleId) {\\n        roles[roleId].sharedRoleMembership.removeMember(msg.sender);\\n        emit RemovedSharedMember(roleId, msg.sender, msg.sender);\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is not initialized.\\n     */\\n    modifier onlyValidRole(uint256 roleId) {\\n        require(roles[roleId].roleType != RoleType.Invalid, \\\"Attempted to use an invalid roleId\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Reverts if `roleId` is initialized.\\n     */\\n    modifier onlyInvalidRole(uint256 roleId) {\\n        require(roles[roleId].roleType == RoleType.Invalid, \\\"Cannot use a pre-existing role\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize a shared role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMembers` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createSharedRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address[] memory initialMembers\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Shared;\\n        role.managingRole = managingRoleId;\\n        role.sharedRoleMembership.init(initialMembers);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage a shared role\\\"\\n        );\\n    }\\n\\n    /**\\n     * @notice Internal method to initialize an exclusive role, `roleId`, which will be managed by `managingRoleId`.\\n     * `initialMember` will be immediately added to the role.\\n     * @dev Should be called by derived contracts, usually at construction time. Will revert if the role is already\\n     * initialized.\\n     */\\n    function _createExclusiveRole(\\n        uint256 roleId,\\n        uint256 managingRoleId,\\n        address initialMember\\n    ) internal onlyInvalidRole(roleId) {\\n        Role storage role = roles[roleId];\\n        role.roleType = RoleType.Exclusive;\\n        role.managingRole = managingRoleId;\\n        role.exclusiveRoleMembership.init(initialMember);\\n        require(\\n            roles[managingRoleId].roleType != RoleType.Invalid,\\n            \\\"Attempted to use an invalid role to manage an exclusive role\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x134c5a2f847832705be631f2b4eb2a3e23a91a2f0e63560abb481e85eeebfae6\",\"license\":\"AGPL-3.0-only\"},\"@uma/core/contracts/common/interfaces/ExpandedIERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\n/**\\n * @title ERC20 interface that includes burn and mint methods.\\n */\\nabstract contract ExpandedIERC20 is IERC20 {\\n    /**\\n     * @notice Burns a specific amount of the caller's tokens.\\n     * @dev Only burns the caller's tokens, so it is safe to leave this method permissionless.\\n     */\\n    function burn(uint256 value) external virtual;\\n\\n    /**\\n     * @dev Burns `value` tokens owned by `recipient`.\\n     * @param recipient address to burn tokens from.\\n     * @param value amount of tokens to burn.\\n     */\\n    function burnFrom(address recipient, uint256 value) external virtual returns (bool);\\n\\n    /**\\n     * @notice Mints tokens and adds them to the balance of the `to` address.\\n     * @dev This method should be permissioned to only allow designated parties to mint tokens.\\n     */\\n    function mint(address to, uint256 value) external virtual returns (bool);\\n\\n    function addMinter(address account) external virtual;\\n\\n    function addBurner(address account) external virtual;\\n\\n    function resetOwner(address account) external virtual;\\n}\\n\",\"keccak256\":\"0xb8252039cba45f1c19cd677f150a9823a5d6e1845cad90e3041d97c96f273c26\",\"license\":\"AGPL-3.0-only\"},\"contracts/LpTokenFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/LpTokenFactoryInterface.sol\\\";\\n\\nimport \\\"@uma/core/contracts/common/implementation/ExpandedERC20.sol\\\";\\n\\ncontract LpTokenFactory is LpTokenFactoryInterface {\\n    function createLpToken(address l1Token) public returns (address) {\\n        ExpandedERC20 lpToken = new ExpandedERC20(\\n            _append(\\\"Across \\\", IERC20Metadata(l1Token).name(), \\\" LP Token\\\"), // LP Token Name\\n            _append(\\\"Av2-\\\", IERC20Metadata(l1Token).symbol(), \\\"-LP\\\"), // LP Token Symbol\\n            IERC20Metadata(l1Token).decimals() // LP Token Decimals\\n        );\\n        lpToken.addMember(1, msg.sender); // Set this contract as the LP Token's minter.\\n        lpToken.addMember(2, msg.sender); // Set this contract as the LP Token's burner.\\n\\n        return address(lpToken);\\n    }\\n\\n    function _append(\\n        string memory a,\\n        string memory b,\\n        string memory c\\n    ) internal pure returns (string memory) {\\n        return string(abi.encodePacked(a, b, c));\\n    }\\n}\\n\",\"keccak256\":\"0x51b55f2c875ae6e1c8e2dd867201c962a4f8c4a74a63a83f4ab94ed00cf6c954\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/LpTokenFactoryInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface LpTokenFactoryInterface {\\n    function createLpToken(address l1Token) external returns (address);\\n}\\n\",\"keccak256\":\"0xbff9f636f087e2c5acc05be2da6fe26d3558f0ff6d270f8738bd8027b4ac8eff\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b50600436106200002e5760003560e01c8063fc2f1b6e1462000033575b600080fd5b6200004a6200004436600462000376565b62000066565b6040516001600160a01b03909116815260200160405180910390f35b6000806200011e60405180604001604052806007815260200166020b1b937b9b9960cd1b815250846001600160a01b03166306fdde036040518163ffffffff1660e01b8152600401600060405180830381865afa158015620000cc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620000f69190810190620003f1565b60405180604001604052806009815260200168102628102a37b5b2b760b91b81525062000337565b620001ca604051806040016040528060048152602001634176322d60e01b815250856001600160a01b03166395d89b416040518163ffffffff1660e01b8152600401600060405180830381865afa1580156200017e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052620001a89190810190620003f1565b6040518060400160405280600381526020016202d4c560ec1b81525062000337565b846001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000209573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200022f9190620004aa565b6040516200023d9062000368565b6200024b93929190620004fd565b604051809103906000f08015801562000268573d6000803e3d6000fd5b50604051633a68533b60e11b8152600160048201523360248201529091506001600160a01b038216906374d0a67690604401600060405180830381600087803b158015620002b557600080fd5b505af1158015620002ca573d6000803e3d6000fd5b5050604051633a68533b60e11b8152600260048201523360248201526001600160a01b03841692506374d0a6769150604401600060405180830381600087803b1580156200031757600080fd5b505af11580156200032c573d6000803e3d6000fd5b509295945050505050565b606083838360405160200162000350939291906200053a565b60405160208183030381529060405290509392505050565b611c61806200058483390190565b6000602082840312156200038957600080fd5b81356001600160a01b0381168114620003a157600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60005b83811015620003db578181015183820152602001620003c1565b83811115620003eb576000848401525b50505050565b6000602082840312156200040457600080fd5b815167ffffffffffffffff808211156200041d57600080fd5b818401915084601f8301126200043257600080fd5b815181811115620004475762000447620003a8565b604051601f8201601f19908116603f01168101908382118183101715620004725762000472620003a8565b816040528281528760208487010111156200048c57600080fd5b6200049f836020830160208801620003be565b979650505050505050565b600060208284031215620004bd57600080fd5b815160ff81168114620003a157600080fd5b60008151808452620004e9816020860160208601620003be565b601f01601f19169290920160200192915050565b606081526000620005126060830186620004cf565b8281036020840152620005268186620004cf565b91505060ff83166040830152949350505050565b600084516200054e818460208901620003be565b84519083019062000564818360208901620003be565b845191019062000579818360208801620003be565b019594505050505056fe60806040523480156200001157600080fd5b5060405162001c6138038062001c61833981016040819052620000349162000623565b8251839083906200004d906003906020850190620004b0565b50805162000063906004906020840190620004b0565b50506006805460ff191660ff8416179055506200008360008033620000b5565b620000a060015b6040805160008082526020820190925262000206565b620000ac60026200008a565b5050506200073b565b826000808281526005602052604090206001015460ff166002811115620000e057620000e0620006a8565b14620001335760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c65000060448201526064015b60405180910390fd5b60008481526005602052604090206001808201805460ff1916828002179055508381556200017160028201846200034d602090811b62000aea17901c565b60008481526005602052604081206001015460ff1660028111156200019a576200019a620006a8565b1415620001ff5760405162461bcd60e51b815260206004820152603c602482015260008051602062001c4183398151915260448201527f20746f206d616e61676520616e206578636c757369766520726f6c650000000060648201526084016200012a565b5050505050565b826000808281526005602052604090206001015460ff166002811115620002315762000231620006a8565b14620002805760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f74207573652061207072652d6578697374696e6720726f6c65000060448201526064016200012a565b600084815260056020908152604090912060018101805460ff1916600217905584815590620002bf906003830190859062000af46200035d821b17901c565b60008481526005602052604081206001015460ff166002811115620002e857620002e8620006a8565b1415620001ff5760405162461bcd60e51b8152602060048201526038602482015260008051602062001c4183398151915260448201527f20746f206d616e61676520612073686172656420726f6c65000000000000000060648201526084016200012a565b620003598282620003b2565b5050565b60005b8151811015620003ad576200039883838381518110620003845762000384620006be565b60200260200101516200043360201b60201c565b80620003a481620006d4565b91505062000360565b505050565b6001600160a01b038116620004165760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b60648201526084016200012a565b81546001600160a01b0319166001600160a01b0391909116179055565b6001600160a01b0381166200048b5760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c650060448201526064016200012a565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b828054620004be90620006fe565b90600052602060002090601f016020900481019282620004e257600085556200052d565b82601f10620004fd57805160ff19168380011785556200052d565b828001600101855582156200052d579182015b828111156200052d57825182559160200191906001019062000510565b506200053b9291506200053f565b5090565b5b808211156200053b576000815560010162000540565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200057e57600080fd5b81516001600160401b03808211156200059b576200059b62000556565b604051601f8301601f19908116603f01168101908282118183101715620005c657620005c662000556565b81604052838152602092508683858801011115620005e357600080fd5b600091505b83821015620006075785820183015181830184015290820190620005e8565b83821115620006195760008385830101525b9695505050505050565b6000806000606084860312156200063957600080fd5b83516001600160401b03808211156200065157600080fd5b6200065f878388016200056c565b945060208601519150808211156200067657600080fd5b5062000685868287016200056c565b925050604084015160ff811681146200069d57600080fd5b809150509250925092565b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415620006f757634e487b7160e01b600052601160045260246000fd5b5060010190565b600181811c908216806200071357607f821691505b602082108114156200073557634e487b7160e01b600052602260045260246000fd5b50919050565b6114f6806200074b6000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c806374d0a676116100c3578063a9059cbb1161007c578063a9059cbb146102be578063aaa14ca3146102d1578063ab3545e5146102e4578063d97c05be1461030f578063dd62ed3e14610322578063f44637ba1461035b57600080fd5b806374d0a6761461025757806379cc67901461026a5780637cdc1cb91461027d57806395d89b4114610290578063983b2d5614610298578063a457c2d7146102ab57600080fd5b8063395093511161011557806339509351146101cd57806340c10f19146101e057806342966c68146101f35780636be7658b1461020857806370a082311461021b57806373cc802a1461024457600080fd5b806306fdde0314610152578063095ea7b31461017057806318160ddd1461019357806323b872dd146101a5578063313ce567146101b8575b600080fd5b61015a61036e565b6040516101679190611176565b60405180910390f35b61018361017e3660046111e7565b610400565b6040519015158152602001610167565b6002545b604051908152602001610167565b6101836101b3366004611211565b610417565b60065460405160ff9091168152602001610167565b6101836101db3660046111e7565b6104c6565b6101836101ee3660046111e7565b610502565b61020661020136600461124d565b610540565b005b610206610216366004611266565b610576565b610197610229366004611292565b6001600160a01b031660009081526020819052604090205490565b610206610252366004611292565b61064c565b610206610265366004611266565b61065a565b6101836102783660046111e7565b610730565b61018361028b366004611266565b610764565b61015a61082b565b6102066102a6366004611292565b61083a565b6101836102b93660046111e7565b610846565b6101836102cc3660046111e7565b6108d5565b6102066102df36600461124d565b6108e2565b6102f76102f236600461124d565b61099e565b6040516001600160a01b039091168152602001610167565b61020661031d366004611266565b610a0a565b6101976103303660046112b4565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b610206610369366004611292565b610ae0565b60606003805461037d906112de565b80601f01602080910402602001604051908101604052809291908181526020018280546103a9906112de565b80156103f65780601f106103cb576101008083540402835291602001916103f6565b820191906000526020600020905b8154815290600101906020018083116103d957829003601f168201915b5050505050905090565b600061040d338484610b3a565b5060015b92915050565b6000610424848484610c5e565b6001600160a01b0384166000908152600160209081526040808320338452909152902054828110156104ae5760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e74206578636565647320616044820152676c6c6f77616e636560c01b60648201526084015b60405180910390fd5b6104bb8533858403610b3a565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161040d9185906104fd908690611329565b610b3a565b600060016105108133610764565b61052c5760405162461bcd60e51b81526004016104a590611357565b6105368484610e2d565b5060019392505050565b600261054c8133610764565b6105685760405162461bcd60e51b81526004016104a590611357565b6105723383610f0c565b5050565b81600260008281526005602052604090206001015460ff16600281111561059f5761059f611341565b146105bc5760405162461bcd60e51b81526004016104a590611399565b60008381526005602052604090205483906105d79033610764565b6105f35760405162461bcd60e51b81526004016104a5906113e5565b600084815260056020526040902061060e906003018461105a565b60405133906001600160a01b0385169086907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af90600090a450505050565b610657600082610a0a565b50565b81600260008281526005602052604090206001015460ff16600281111561068357610683611341565b146106a05760405162461bcd60e51b81526004016104a590611399565b60008381526005602052604090205483906106bb9033610764565b6106d75760405162461bcd60e51b81526004016104a5906113e5565b60008481526005602052604090206106f2906003018461107c565b60405133906001600160a01b0385169086907f63502af7324ff6db91ab38f8236a648727d9385ea6c782073dd4882d8a61a48f90600090a450505050565b6000600261073e8133610764565b61075a5760405162461bcd60e51b81526004016104a590611357565b6105368484610f0c565b600082815260056020526040812060018082015460ff16600281111561078c5761078c611341565b14156107ae5760028101546001600160a01b038481169116145b915050610411565b6002600182015460ff1660028111156107c9576107c9611341565b14156107f2576001600160a01b038316600090815260038201602052604090205460ff166107a6565b60405162461bcd60e51b815260206004820152600e60248201526d125b9d985b1a59081c9bdb19525960921b60448201526064016104a5565b60606004805461037d906112de565b61065760015b8261065a565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156108c85760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016104a5565b6105363385858403610b3a565b600061040d338484610c5e565b80600260008281526005602052604090206001015460ff16600281111561090b5761090b611341565b146109285760405162461bcd60e51b81526004016104a590611399565b816109338133610764565b61094f5760405162461bcd60e51b81526004016104a590611357565b600083815260056020526040902061096a906003013361105a565b6040513390819085907feb3e33034c392e69263b04ec0fa376dc12784a41b6676c7f31b936cbc0fbb5af90600090a4505050565b600081600160008281526005602052604090206001015460ff1660028111156109c9576109c9611341565b146109e65760405162461bcd60e51b81526004016104a590611429565b6000838152600560205260409020600201546001600160a01b031691505b50919050565b81600160008281526005602052604090206001015460ff166002811115610a3357610a33611341565b14610a505760405162461bcd60e51b81526004016104a590611429565b6000838152600560205260409020548390610a6b9033610764565b610a875760405162461bcd60e51b81526004016104a5906113e5565b6000848152600560205260409020610aa290600201846110f7565b60405133906001600160a01b0385169086907f3b855c56b409b671c7112789d022675eb639d0bcb8896f1b6197c132f799e74690600090a450505050565b6106576002610840565b61057282826110f7565b60005b8151811015610b3557610b2383838381518110610b1657610b16611478565b602002602001015161107c565b80610b2d8161148e565b915050610af7565b505050565b6001600160a01b038316610b9c5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016104a5565b6001600160a01b038216610bfd5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016104a5565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038316610cc25760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016104a5565b6001600160a01b038216610d245760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016104a5565b6001600160a01b03831660009081526020819052604090205481811015610d9c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016104a5565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610dd3908490611329565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610e1f91815260200190565b60405180910390a350505050565b6001600160a01b038216610e835760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016104a5565b8060026000828254610e959190611329565b90915550506001600160a01b03821660009081526020819052604081208054839290610ec2908490611329565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b6001600160a01b038216610f6c5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016104a5565b6001600160a01b03821660009081526020819052604090205481811015610fe05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016104a5565b6001600160a01b038316600090815260208190526040812083830390556002805484929061100f9084906114a9565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b0316600090815260209190915260409020805460ff19169055565b6001600160a01b0381166110d25760405162461bcd60e51b815260206004820152601f60248201527f43616e6e6f74206164642030783020746f20612073686172656420726f6c650060448201526064016104a5565b6001600160a01b0316600090815260209190915260409020805460ff19166001179055565b6001600160a01b0381166111595760405162461bcd60e51b815260206004820152602360248201527f43616e6e6f742073657420616e206578636c757369766520726f6c6520746f2060448201526203078360ec1b60648201526084016104a5565b81546001600160a01b0319166001600160a01b0391909116179055565b600060208083528351808285015260005b818110156111a357858101830151858201604001528201611187565b818111156111b5576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b03811681146111e257600080fd5b919050565b600080604083850312156111fa57600080fd5b611203836111cb565b946020939093013593505050565b60008060006060848603121561122657600080fd5b61122f846111cb565b925061123d602085016111cb565b9150604084013590509250925092565b60006020828403121561125f57600080fd5b5035919050565b6000806040838503121561127957600080fd5b82359150611289602084016111cb565b90509250929050565b6000602082840312156112a457600080fd5b6112ad826111cb565b9392505050565b600080604083850312156112c757600080fd5b6112d0836111cb565b9150611289602084016111cb565b600181811c908216806112f257607f821691505b60208210811415610a0457634e487b7160e01b600052602260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000821982111561133c5761133c611313565b500190565b634e487b7160e01b600052602160045260246000fd5b60208082526022908201527f53656e64657220646f6573206e6f7420686f6c6420726571756972656420726f6040820152616c6560f01b606082015260800190565b6020808252602c908201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460408201526b2053686172656420726f6c6560a01b606082015260800190565b60208082526024908201527f43616e206f6e6c792062652063616c6c6564206279206120726f6c65206d616e60408201526330b3b2b960e11b606082015260800190565b6020808252602f908201527f4d7573742062652063616c6c6564206f6e20616e20696e697469616c697a656460408201526e204578636c757369766520726f6c6560881b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60006000198214156114a2576114a2611313565b5060010190565b6000828210156114bb576114bb611313565b50039056fea2646970667358221220bd639d6d103712afabb2efd52a3eb76217bf39631b55ddc55e5497b12e96dfde64736f6c634300080b0033417474656d7074656420746f2075736520616e20696e76616c696420726f6c65a264697066735822122035f8d7e71a864b15fa5337fbd452f0270b6907025f2a5aaa4ccd4916dd8d7e8d64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
