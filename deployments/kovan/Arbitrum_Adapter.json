{
  "address": "0xD007aB76E36B03853C1F2fE5980069E7ACd38FF8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ArbitrumL1InboxLike",
          "name": "_l1ArbitrumInbox",
          "type": "address"
        },
        {
          "internalType": "contract ArbitrumL1ERC20GatewayLike",
          "name": "_l1ERC20Gateway",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "getL1CallValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1ERC20Gateway",
      "outputs": [
        {
          "internalType": "contract ArbitrumL1ERC20GatewayLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Inbox",
      "outputs": [
        {
          "internalType": "contract ArbitrumL1InboxLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2GasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2GasPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2MaxSubmissionCost",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2RefundL2Address",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc4e7e5661563508104de7b6f7f3ad7d83dc3505cf50c16951ab698493c42c9f3",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0xD007aB76E36B03853C1F2fE5980069E7ACd38FF8",
    "transactionIndex": 0,
    "gasUsed": "644324",
    "logsBloom": "0x
    "blockHash": "0xc187f686bd66164e7be933327fea392466365912e0a20653e9d1e72808a4aab2",
    "transactionHash": "0xc4e7e5661563508104de7b6f7f3ad7d83dc3505cf50c16951ab698493c42c9f3",
    "logs": [],
    "blockNumber": 30475933,
    "cumulativeGasUsed": "644324",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x578BAde599406A8fE3d24Fd7f7211c0911F5B29e", "0x91169Dbb45e6804743F94609De50D511C437572E"],
  "numDeployments": 1,
  "solcInputHash": "c8b9349311d8b5049b613ac98eb998d0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ArbitrumL1InboxLike\",\"name\":\"_l1ArbitrumInbox\",\"type\":\"address\"},{\"internalType\":\"contract ArbitrumL1ERC20GatewayLike\",\"name\":\"_l1ERC20Gateway\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"getL1CallValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ERC20Gateway\",\"outputs\":[{\"internalType\":\"contract ArbitrumL1ERC20GatewayLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Inbox\",\"outputs\":[{\"internalType\":\"contract ArbitrumL1InboxLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2GasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2GasPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2MaxSubmissionCost\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2RefundL2Address\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l1ArbitrumInbox\":\"Inbox helper contract to send messages to Arbitrum.\",\"_l1ERC20Gateway\":\"ERC20 gateway contract to send tokens to Arbitrum.\"}},\"getL1CallValue()\":{\"returns\":{\"_0\":\"amount of ETH that this contract needs to hold in order for relayMessage to succeed.\"}},\"relayMessage(address,bytes)\":{\"params\":{\"message\":\"Data to send to target.\",\"target\":\"Contract on Arbitrum that will receive message.\"}},\"relayTokens(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of L1 tokens to deposit and L2 tokens to receive.\",\"l1Token\":\"L1 token to deposit.\",\"l2Token\":\"L2 token to receive.\",\"to\":\"Bridge recipient.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"getL1CallValue()\":{\"notice\":\"Returns required amount of ETH to send a message via the Inbox.\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send cross-chain message to target on Arbitrum.This contract must hold at least getL1CallValue() amount of ETH to send a message via the Inbox successfully, or the message will get stuck.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Bridge tokens to Arbitrum.\"}},\"notice\":\"Contract containing logic to send messages from L1 to Arbitrum.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Arbitrum_Adapter.sol\":\"Arbitrum_Adapter\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"contracts/chain-adapters/Arbitrum_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/AdapterInterface.sol\\\";\\n\\ninterface ArbitrumL1InboxLike {\\n    function createRetryableTicket(\\n        address destAddr,\\n        uint256 arbTxCallValue,\\n        uint256 maxSubmissionCost,\\n        address submissionRefundAddress,\\n        address valueRefundAddress,\\n        uint256 maxGas,\\n        uint256 gasPriceBid,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n}\\n\\ninterface ArbitrumL1ERC20GatewayLike {\\n    function outboundTransfer(\\n        address _token,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n}\\n\\n/**\\n * @notice Contract containing logic to send messages from L1 to Arbitrum.\\n * @dev Public functions calling external contracts do not guard against reentrancy because they are expected to be\\n * called via delegatecall, which will execute this contract's logic within the context of the originating contract.\\n * For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods\\n * that call this contract's logic guard against reentrancy.\\n */\\ncontract Arbitrum_Adapter is AdapterInterface {\\n    // Gas limit for immediate L2 execution attempt (can be estimated via NodeInterface.estimateRetryableTicket).\\n    // NodeInterface precompile interface exists at L2 address 0x00000000000000000000000000000000000000C8\\n    uint32 public immutable l2GasLimit = 5_000_000;\\n\\n    // Amount of ETH allocated to pay for the base submission fee. The base submission fee is a parameter unique to\\n    // retryable transactions; the user is charged the base submission fee to cover the storage costs of keeping their\\n    // ticket\\u2019s calldata in the retry buffer. (current base submission fee is queryable via\\n    // ArbRetryableTx.getSubmissionPrice). ArbRetryableTicket precompile interface exists at L2 address\\n    // 0x000000000000000000000000000000000000006E.\\n    uint256 public immutable l2MaxSubmissionCost = 0.1e18;\\n\\n    // L2 Gas price bid for immediate L2 execution attempt (queryable via standard eth*gasPrice RPC)\\n    uint256 public immutable l2GasPrice = 10e9; // 10 gWei\\n\\n    // This address on L2 receives extra ETH that is left over after relaying a message via the inbox.\\n    address public immutable l2RefundL2Address;\\n\\n    ArbitrumL1InboxLike public immutable l1Inbox;\\n\\n    ArbitrumL1ERC20GatewayLike public immutable l1ERC20Gateway;\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1ArbitrumInbox Inbox helper contract to send messages to Arbitrum.\\n     * @param _l1ERC20Gateway ERC20 gateway contract to send tokens to Arbitrum.\\n     */\\n    constructor(ArbitrumL1InboxLike _l1ArbitrumInbox, ArbitrumL1ERC20GatewayLike _l1ERC20Gateway) {\\n        l1Inbox = _l1ArbitrumInbox;\\n        l1ERC20Gateway = _l1ERC20Gateway;\\n\\n        l2RefundL2Address = msg.sender;\\n    }\\n\\n    /**\\n     * @notice Send cross-chain message to target on Arbitrum.\\n     * @notice This contract must hold at least getL1CallValue() amount of ETH to send a message via the Inbox\\n     * successfully, or the message will get stuck.\\n     * @param target Contract on Arbitrum that will receive message.\\n     * @param message Data to send to target.\\n     */\\n    function relayMessage(address target, bytes memory message) external payable override {\\n        uint256 requiredL1CallValue = getL1CallValue();\\n        require(address(this).balance >= requiredL1CallValue, \\\"Insufficient ETH balance\\\");\\n\\n        l1Inbox.createRetryableTicket{ value: requiredL1CallValue }(\\n            target, // destAddr destination L2 contract address\\n            0, // l2CallValue call value for retryable L2 message\\n            l2MaxSubmissionCost, // maxSubmissionCost Max gas deducted from user's L2 balance to cover base fee\\n            l2RefundL2Address, // excessFeeRefundAddress maxgas * gasprice - execution cost gets credited here on L2\\n            l2RefundL2Address, // callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n            l2GasLimit, // maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n            l2GasPrice, // gasPriceBid price bid for L2 execution\\n            message // data ABI encoded data of L2 message\\n        );\\n\\n        emit MessageRelayed(target, message);\\n    }\\n\\n    /**\\n     * @notice Bridge tokens to Arbitrum.\\n     * @param l1Token L1 token to deposit.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token, // l2Token is unused for Arbitrum.\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        l1ERC20Gateway.outboundTransfer(l1Token, to, amount, l2GasLimit, l2GasPrice, \\\"\\\");\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Returns required amount of ETH to send a message via the Inbox.\\n     * @return amount of ETH that this contract needs to hold in order for relayMessage to succeed.\\n     */\\n    function getL1CallValue() public pure returns (uint256) {\\n        return l2MaxSubmissionCost + l2GasPrice * l2GasLimit;\\n    }\\n}\\n\",\"keccak256\":\"0xd81b9aa219cd11f97cae6bc1ab5ca6b013a7021be5baac97cd25be637bda69bb\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    function relayMessage(address target, bytes memory message) external payable;\\n\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0xbd7091006acbdfe72b21ce985f964f0682a2316d9d3b38967beeb55f4ae5118c\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x610140604052624c4b4060805267016345785d8a000060a0526402540be40060c05234801561002d57600080fd5b50604051610c11380380610c1183398101604081905261004c91610081565b6001600160a01b039182166101005216610120523360e0526100bb565b6001600160a01b038116811461007e57600080fd5b50565b6000806040838503121561009457600080fd5b825161009f81610069565b60208401519092506100b081610069565b809150509250929050565b60805160a05160c05160e0516101005161012051610abb6101566000396000818160d50152610392015260008181610143015261053e0152600081816101ab01526105940152600081816101770152818161028b0152818161035e01526105da015260008181610228015281816102b501526105720152600081816101df015281816102690152818161033701526105b80152610abb6000f3fe6080604052600436106100965760003560e01c80639ae3668511610069578063cf6e65b71161004e578063cf6e65b7146101cd578063e599477e14610216578063e6eb8ade1461024a57600080fd5b80639ae36685146101655780639c3ba2001461019957600080fd5b806308f1ed151461009b5780630e283a6a146100c357806352c8c75c1461011c5780638134f38514610131575b600080fd5b3480156100a757600080fd5b506100b061025d565b6040519081526020015b60405180910390f35b3480156100cf57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ba565b61012f61012a3660046106af565b6102de565b005b34801561013d57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b34801561017157600080fd5b506100b07f000000000000000000000000000000000000000000000000000000000000000081565b3480156101a557600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101d957600080fd5b506102017f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100ba565b34801561022257600080fd5b506100b07f000000000000000000000000000000000000000000000000000000000000000081565b61012f6102583660046107c0565b610487565b60006102af63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000610880565b6102d9907f00000000000000000000000000000000000000000000000000000000000000006108bd565b905090565b6040517fd2ce7d6500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282811660248301526044820184905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648301527f0000000000000000000000000000000000000000000000000000000000000000608483015260c060a4830152600060c48301527f0000000000000000000000000000000000000000000000000000000000000000169063d2ce7d659060e4016000604051808303816000875af11580156103db573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104219190810190610905565b506040805173ffffffffffffffffffffffffffffffffffffffff868116825285811660208301528183018590528316606082015290517fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9181900360800190a150505050565b600061049161025d565b905080471015610501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e63650000000000000000604482015260640160405180910390fd5b6040517f679b6ded00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063679b6ded9083906106049087906000907f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009081907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000908d906004016109c6565b60206040518083038185885af1158015610622573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106479190610a35565b507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac48383604051610679929190610a4e565b60405180910390a1505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146106aa57600080fd5b919050565b600080600080608085870312156106c557600080fd5b6106ce85610686565b93506106dc60208601610686565b9250604085013591506106f160608601610686565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610772576107726106fc565b604052919050565b600067ffffffffffffffff821115610794576107946106fc565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600080604083850312156107d357600080fd5b6107dc83610686565b9150602083013567ffffffffffffffff8111156107f857600080fd5b8301601f8101851361080957600080fd5b803561081c6108178261077a565b61072b565b81815286602083850101111561083157600080fd5b816020840160208301376000602083830101528093505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156108b8576108b8610851565b500290565b600082198211156108d0576108d0610851565b500190565b60005b838110156108f05781810151838201526020016108d8565b838111156108ff576000848401525b50505050565b60006020828403121561091757600080fd5b815167ffffffffffffffff81111561092e57600080fd5b8201601f8101841361093f57600080fd5b805161094d6108178261077a565b81815285602083850101111561096257600080fd5b6109738260208301602086016108d5565b95945050505050565b600081518084526109948160208601602086016108d5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a6020850152896040850152808916606085015280881660808501525063ffffffff861660a08401528460c08401528060e0840152610a268184018561097c565b9b9a5050505050505050505050565b600060208284031215610a4757600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610a7d604083018461097c565b94935050505056fea26469706673582212201138a6fca9cde9a32c1accbbb9cfaeced745b08b0ff836da36e0cc9731508d6364736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c80639ae3668511610069578063cf6e65b71161004e578063cf6e65b7146101cd578063e599477e14610216578063e6eb8ade1461024a57600080fd5b80639ae36685146101655780639c3ba2001461019957600080fd5b806308f1ed151461009b5780630e283a6a146100c357806352c8c75c1461011c5780638134f38514610131575b600080fd5b3480156100a757600080fd5b506100b061025d565b6040519081526020015b60405180910390f35b3480156100cf57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ba565b61012f61012a3660046106af565b6102de565b005b34801561013d57600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b34801561017157600080fd5b506100b07f000000000000000000000000000000000000000000000000000000000000000081565b3480156101a557600080fd5b506100f77f000000000000000000000000000000000000000000000000000000000000000081565b3480156101d957600080fd5b506102017f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff90911681526020016100ba565b34801561022257600080fd5b506100b07f000000000000000000000000000000000000000000000000000000000000000081565b61012f6102583660046107c0565b610487565b60006102af63ffffffff7f0000000000000000000000000000000000000000000000000000000000000000167f0000000000000000000000000000000000000000000000000000000000000000610880565b6102d9907f00000000000000000000000000000000000000000000000000000000000000006108bd565b905090565b6040517fd2ce7d6500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff858116600483015282811660248301526044820184905263ffffffff7f00000000000000000000000000000000000000000000000000000000000000001660648301527f0000000000000000000000000000000000000000000000000000000000000000608483015260c060a4830152600060c48301527f0000000000000000000000000000000000000000000000000000000000000000169063d2ce7d659060e4016000604051808303816000875af11580156103db573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104219190810190610905565b506040805173ffffffffffffffffffffffffffffffffffffffff868116825285811660208301528183018590528316606082015290517fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9181900360800190a150505050565b600061049161025d565b905080471015610501576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f496e73756666696369656e74204554482062616c616e63650000000000000000604482015260640160405180910390fd5b6040517f679b6ded00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063679b6ded9083906106049087906000907f0000000000000000000000000000000000000000000000000000000000000000907f00000000000000000000000000000000000000000000000000000000000000009081907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000908d906004016109c6565b60206040518083038185885af1158015610622573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106479190610a35565b507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac48383604051610679929190610a4e565b60405180910390a1505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146106aa57600080fd5b919050565b600080600080608085870312156106c557600080fd5b6106ce85610686565b93506106dc60208601610686565b9250604085013591506106f160608601610686565b905092959194509250565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610772576107726106fc565b604052919050565b600067ffffffffffffffff821115610794576107946106fc565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b600080604083850312156107d357600080fd5b6107dc83610686565b9150602083013567ffffffffffffffff8111156107f857600080fd5b8301601f8101851361080957600080fd5b803561081c6108178261077a565b61072b565b81815286602083850101111561083157600080fd5b816020840160208301376000602083830101528093505050509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156108b8576108b8610851565b500290565b600082198211156108d0576108d0610851565b500190565b60005b838110156108f05781810151838201526020016108d8565b838111156108ff576000848401525b50505050565b60006020828403121561091757600080fd5b815167ffffffffffffffff81111561092e57600080fd5b8201601f8101841361093f57600080fd5b805161094d6108178261077a565b81815285602083850101111561096257600080fd5b6109738260208301602086016108d5565b95945050505050565b600081518084526109948160208601602086016108d5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b600061010073ffffffffffffffffffffffffffffffffffffffff808c1684528a6020850152896040850152808916606085015280881660808501525063ffffffff861660a08401528460c08401528060e0840152610a268184018561097c565b9b9a5050505050505050505050565b600060208284031215610a4757600080fd5b5051919050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610a7d604083018461097c565b94935050505056fea26469706673582212201138a6fca9cde9a32c1accbbb9cfaeced745b08b0ff836da36e0cc9731508d6364736f6c634300080d0033",
  "devdoc": {
    "details": "Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_l1ArbitrumInbox": "Inbox helper contract to send messages to Arbitrum.",
          "_l1ERC20Gateway": "ERC20 gateway contract to send tokens to Arbitrum."
        }
      },
      "getL1CallValue()": {
        "returns": {
          "_0": "amount of ETH that this contract needs to hold in order for relayMessage to succeed."
        }
      },
      "relayMessage(address,bytes)": {
        "params": {
          "message": "Data to send to target.",
          "target": "Contract on Arbitrum that will receive message."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of L1 tokens to deposit and L2 tokens to receive.",
          "l1Token": "L1 token to deposit.",
          "l2Token": "L2 token to receive.",
          "to": "Bridge recipient."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "getL1CallValue()": {
        "notice": "Returns required amount of ETH to send a message via the Inbox."
      },
      "relayMessage(address,bytes)": {
        "notice": "Send cross-chain message to target on Arbitrum.This contract must hold at least getL1CallValue() amount of ETH to send a message via the Inbox successfully, or the message will get stuck."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Bridge tokens to Arbitrum."
      }
    },
    "notice": "Contract containing logic to send messages from L1 to Arbitrum.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
