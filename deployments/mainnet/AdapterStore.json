{
  "address": "0x88C4109a9391C35F28e523cc45754D1a5342364d",
  "abi": [
    {
      "inputs": [],
      "name": "ArrayLengthMismatch",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "messengerType",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "l2ChainId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "messenger",
          "type": "address"
        }
      ],
      "name": "MessengerSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messengerType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[]",
          "name": "l2ChainIds",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "l1Tokens",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "messengers",
          "type": "address[]"
        }
      ],
      "name": "batchSetMessengers",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "crossChainMessengers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "messengerType",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "l2ChainId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "messenger",
          "type": "address"
        }
      ],
      "name": "setMessenger",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x845b8e831709d8968317f9eeb92a4e35585275244731c02a46a058ccd3da85cd",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x88C4109a9391C35F28e523cc45754D1a5342364d",
    "transactionIndex": 148,
    "gasUsed": "387926",
    "logsBloom": "0x
    "blockHash": "0xea9fee53e9fbeaf702c385a890bed9cf82757d47f255ae25081015b4838dccb1",
    "transactionHash": "0x845b8e831709d8968317f9eeb92a4e35585275244731c02a46a058ccd3da85cd",
    "logs": [
      {
        "transactionIndex": 148,
        "blockNumber": 22083779,
        "transactionHash": "0x845b8e831709d8968317f9eeb92a4e35585275244731c02a46a058ccd3da85cd",
        "address": "0x88C4109a9391C35F28e523cc45754D1a5342364d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009a8f92a830a5cb89a3816e3d267cb7791c16b04d"
        ],
        "data": "0x",
        "logIndex": 412,
        "blockHash": "0xea9fee53e9fbeaf702c385a890bed9cf82757d47f255ae25081015b4838dccb1"
      }
    ],
    "blockNumber": 22083779,
    "cumulativeGasUsed": "16954085",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c7649517923dc4f44307584fc9a076ab",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ArrayLengthMismatch\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"messengerType\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"l2ChainId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"}],\"name\":\"MessengerSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messengerType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"l2ChainIds\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"l1Tokens\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"messengers\",\"type\":\"address[]\"}],\"name\":\"batchSetMessengers\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"crossChainMessengers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"messengerType\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"l2ChainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"messenger\",\"type\":\"address\"}],\"name\":\"setMessenger\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"A helper contract for chain adapters that support OFT or XERC20 messaging(via Hyperlane) on L1Handles token => messenger/router mapping storage, as adapters are called via delegatecall and don't have relevant storage space\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AdapterStore.sol\":\"AdapterStore\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa92e4fa126feb6907daa0513ddd816b2eb91f30a808de54f63c17d0e162c3439\",\"license\":\"MIT\"},\"contracts/AdapterStore.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nlibrary MessengerTypes {\\n    bytes32 public constant OFT_MESSENGER = bytes32(\\\"OFT_MESSENGER\\\");\\n    bytes32 public constant HYP_XERC20_ROUTER = bytes32(\\\"HYP_XERC20_ROUTER\\\");\\n}\\n\\n/**\\n * @dev A helper contract for chain adapters that support OFT or XERC20 messaging(via Hyperlane) on L1\\n * @dev Handles token => messenger/router mapping storage, as adapters are called via delegatecall and don't have relevant storage space\\n */\\ncontract AdapterStore is Ownable {\\n    // (messengerType, l2ChainId, l1Token) => messenger address\\n    mapping(bytes32 => mapping(uint256 => mapping(address => address))) public crossChainMessengers;\\n\\n    event MessengerSet(\\n        bytes32 indexed messengerType,\\n        uint256 indexed l2ChainId,\\n        address indexed l1Token,\\n        address messenger\\n    );\\n\\n    error ArrayLengthMismatch();\\n\\n    function setMessenger(\\n        bytes32 messengerType,\\n        uint256 l2ChainId,\\n        address l1Token,\\n        address messenger\\n    ) external onlyOwner {\\n        _setMessenger(messengerType, l2ChainId, l1Token, messenger);\\n    }\\n\\n    function batchSetMessengers(\\n        bytes32 messengerType,\\n        uint256[] calldata l2ChainIds,\\n        address[] calldata l1Tokens,\\n        address[] calldata messengers\\n    ) external onlyOwner {\\n        if (l2ChainIds.length != l1Tokens.length || l2ChainIds.length != messengers.length) {\\n            revert ArrayLengthMismatch();\\n        }\\n\\n        for (uint256 i = 0; i < l2ChainIds.length; i++) {\\n            _setMessenger(messengerType, l2ChainIds[i], l1Tokens[i], messengers[i]);\\n        }\\n    }\\n\\n    function _setMessenger(\\n        bytes32 _messengerType,\\n        uint256 _l2ChainId,\\n        address _l1Token,\\n        address _messenger\\n    ) internal {\\n        crossChainMessengers[_messengerType][_l2ChainId][_l1Token] = _messenger;\\n        emit MessengerSet(_messengerType, _l2ChainId, _l1Token, _messenger);\\n    }\\n}\\n\",\"keccak256\":\"0x8f913c4cd7e59efc7fa0ce82386a87ecc48941ee75db009b3f353df94134b743\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6080806040523461005a575f8054336001600160a01b0319821681178355916001600160a01b03909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09080a361059f908161005f8239f35b5f80fdfe608060409080825260049182361015610016575f80fd5b5f3560e01c918263715018a61461036b57826386011ebb1461024e575081638da5cb5b146101fe5781638f7d9bec1461018557508063d08a2d8f146101145763f2fde38b14610063575f80fd5b346101105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110573573ffffffffffffffffffffffffffffffffffffffff808216809203610110576100ba6104b7565b8115610110575f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b5f80fd5b50346101105760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105761014c610436565b6064359073ffffffffffffffffffffffffffffffffffffffff8216820361011057610183926101796104b7565b60243590356104d7565b005b9050346101105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020916101c1610436565b90355f5260018352815f206024355f528352815f2073ffffffffffffffffffffffffffffffffffffffff8092165f528352815f2054169051908152f35b34610110575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209073ffffffffffffffffffffffffffffffffffffffff5f54169051908152f35b8390346101105760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105767ffffffffffffffff918035602435848111610110576102a29036908401610405565b939094604435818111610110576102bc9036908601610405565b9091606435908111610110576102d59036908701610405565b9590936102e06104b7565b828814801590610361575b61033c5750505f5b8681106102fc57005b8061033661030d6001938a8c610459565b3561032161031c848789610459565b610496565b61032f61031c858c8b610459565b91896104d7565b016102f3565b7fa24a13a6000000000000000000000000000000000000000000000000000000008152fd5b50868814156102eb565b34610110575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576103a16104b7565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b9181601f840112156101105782359167ffffffffffffffff8311610110576020808501948460051b01011161011057565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361011057565b91908110156104695760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036101105790565b73ffffffffffffffffffffffffffffffffffffffff5f5416330361011057565b90919260207f444623aa961faed91435ed1429e49548d6cf597edc4121dacef3734bebd5984f91835f526001825260405f20855f52825260405f209573ffffffffffffffffffffffffffffffffffffffff80911696875f52835260405f20911690817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055604051908152a456fea26469706673582212206df310cc21df56f4b15853652c01780f14c295f36dd5571c1524c9f240684ef864736f6c63430008170033",
  "deployedBytecode": "0x608060409080825260049182361015610016575f80fd5b5f3560e01c918263715018a61461036b57826386011ebb1461024e575081638da5cb5b146101fe5781638f7d9bec1461018557508063d08a2d8f146101145763f2fde38b14610063575f80fd5b346101105760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110573573ffffffffffffffffffffffffffffffffffffffff808216809203610110576100ba6104b7565b8115610110575f54827fffffffffffffffffffffffff00000000000000000000000000000000000000008216175f55167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e05f80a3005b5f80fd5b50346101105760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105761014c610436565b6064359073ffffffffffffffffffffffffffffffffffffffff8216820361011057610183926101796104b7565b60243590356104d7565b005b9050346101105760607ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576020916101c1610436565b90355f5260018352815f206024355f528352815f2073ffffffffffffffffffffffffffffffffffffffff8092165f528352815f2054169051908152f35b34610110575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105760209073ffffffffffffffffffffffffffffffffffffffff5f54169051908152f35b8390346101105760807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101105767ffffffffffffffff918035602435848111610110576102a29036908401610405565b939094604435818111610110576102bc9036908601610405565b9091606435908111610110576102d59036908701610405565b9590936102e06104b7565b828814801590610361575b61033c5750505f5b8681106102fc57005b8061033661030d6001938a8c610459565b3561032161031c848789610459565b610496565b61032f61031c858c8b610459565b91896104d7565b016102f3565b7fa24a13a6000000000000000000000000000000000000000000000000000000008152fd5b50868814156102eb565b34610110575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610110576103a16104b7565b5f73ffffffffffffffffffffffffffffffffffffffff81547fffffffffffffffffffffffff000000000000000000000000000000000000000081168355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a3005b9181601f840112156101105782359167ffffffffffffffff8311610110576020808501948460051b01011161011057565b6044359073ffffffffffffffffffffffffffffffffffffffff8216820361011057565b91908110156104695760051b0190565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b3573ffffffffffffffffffffffffffffffffffffffff811681036101105790565b73ffffffffffffffffffffffffffffffffffffffff5f5416330361011057565b90919260207f444623aa961faed91435ed1429e49548d6cf597edc4121dacef3734bebd5984f91835f526001825260405f20855f52825260405f209573ffffffffffffffffffffffffffffffffffffffff80911696875f52835260405f20911690817fffffffffffffffffffffffff0000000000000000000000000000000000000000825416179055604051908152a456fea26469706673582212206df310cc21df56f4b15853652c01780f14c295f36dd5571c1524c9f240684ef864736f6c63430008170033",
  "devdoc": {
    "details": "A helper contract for chain adapters that support OFT or XERC20 messaging(via Hyperlane) on L1Handles token => messenger/router mapping storage, as adapters are called via delegatecall and don't have relevant storage space",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4146,
        "contract": "contracts/AdapterStore.sol:AdapterStore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17961,
        "contract": "contracts/AdapterStore.sol:AdapterStore",
        "label": "crossChainMessengers",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_address,t_address)))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_mapping(t_uint256,t_mapping(t_address,t_address)))": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => mapping(uint256 => mapping(address => address)))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_mapping(t_address,t_address))"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
