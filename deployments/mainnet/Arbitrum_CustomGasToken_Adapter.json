{
  "address": "0x9F340e51f283A9320aE0CdF65fadDd0208CB89a7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ArbitrumCustomGasTokenInbox",
          "name": "_l1ArbitrumInbox",
          "type": "address"
        },
        {
          "internalType": "contract ArbitrumL1ERC20GatewayLike",
          "name": "_l1ERC20GatewayRouter",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2RefundL2Address",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_l1Usdc",
          "type": "address"
        },
        {
          "internalType": "contract ITokenMessenger",
          "name": "_cctpTokenMessenger",
          "type": "address"
        },
        {
          "internalType": "contract FunderInterface",
          "name": "_customGasTokenFunder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l2MaxSubmissionCost",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_l2GasPrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InsufficientCustomGasToken",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidCustomGasToken",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CUSTOM_GAS_TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CUSTOM_GAS_TOKEN_FUNDER",
      "outputs": [
        {
          "internalType": "contract FunderInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L1_ERC20_GATEWAY_ROUTER",
      "outputs": [
        {
          "internalType": "contract ArbitrumL1ERC20GatewayLike",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L1_INBOX",
      "outputs": [
        {
          "internalType": "contract ArbitrumCustomGasTokenInbox",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L2_CALL_VALUE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L2_GAS_PRICE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L2_MAX_SUBMISSION_COST",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "L2_REFUND_L2_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_MESSAGE_L2_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "RELAY_TOKENS_L2_GAS_LIMIT",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cctpTokenMessenger",
      "outputs": [
        {
          "internalType": "contract ITokenMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "l2GasLimit",
          "type": "uint32"
        }
      ],
      "name": "getL1CallValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "recipientCircleDomainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe65e374662f64516dbaae8400d2e3709ec3d5a81d615f5a1985f104a3e5f6b87",
  "receipt": {
    "to": null,
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": "0x9F340e51f283A9320aE0CdF65fadDd0208CB89a7",
    "transactionIndex": 37,
    "gasUsed": "1434910",
    "logsBloom": "0x
    "blockHash": "0x500b54e08891dff47bf5cccfe89aaa8ec3229fdc386e27155eb7afa2062dbd9b",
    "transactionHash": "0xe65e374662f64516dbaae8400d2e3709ec3d5a81d615f5a1985f104a3e5f6b87",
    "logs": [],
    "blockNumber": 21036567,
    "cumulativeGasUsed": "8231751",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x56D8EC76a421063e1907503aDd3794c395256AEb",
    "0xeBb17f398ed30d02F2e8733e7c1e5cf566e17812",
    "0x07aE8551Be970cB1cCa11Dd7a11F47Ae82e70E67",
    "0x0000000000000000000000000000000000000000",
    "0x0000000000000000000000000000000000000000",
    "0x9ac1d182c42E27dde39aC354C61dD54a3F034e17",
    "10000000000000000",
    "240000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "7d0f26f6cf14a3bba6687f1aed12b0df",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ArbitrumCustomGasTokenInbox\",\"name\":\"_l1ArbitrumInbox\",\"type\":\"address\"},{\"internalType\":\"contract ArbitrumL1ERC20GatewayLike\",\"name\":\"_l1ERC20GatewayRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2RefundL2Address\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_l1Usdc\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMessenger\",\"name\":\"_cctpTokenMessenger\",\"type\":\"address\"},{\"internalType\":\"contract FunderInterface\",\"name\":\"_customGasTokenFunder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l2MaxSubmissionCost\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2GasPrice\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InsufficientCustomGasToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidCustomGasToken\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CUSTOM_GAS_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CUSTOM_GAS_TOKEN_FUNDER\",\"outputs\":[{\"internalType\":\"contract FunderInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_ERC20_GATEWAY_ROUTER\",\"outputs\":[{\"internalType\":\"contract ArbitrumL1ERC20GatewayLike\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L1_INBOX\",\"outputs\":[{\"internalType\":\"contract ArbitrumCustomGasTokenInbox\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_CALL_VALUE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_GAS_PRICE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_MAX_SUBMISSION_COST\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"L2_REFUND_L2_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_MESSAGE_L2_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"RELAY_TOKENS_L2_GAS_LIMIT\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cctpTokenMessenger\",\"outputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"l2GasLimit\",\"type\":\"uint32\"}],\"name\":\"getL1CallValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"recipientCircleDomainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.This contract is very similar to Arbitrum_Adapter but it allows the caller to pay for submission fees using a custom gas token. This is required to support certain Arbitrum orbit L2s and L3s.https://docs.arbitrum.io/launch-orbit-chain/how-tos/use-a-custom-gas-token\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_cctpTokenMessenger\":\"TokenMessenger contract to bridge via CCTP.\",\"_customGasTokenFunder\":\"Contract that funds the custom gas token.\",\"_l1ArbitrumInbox\":\"Inbox helper contract to send messages to Arbitrum.\",\"_l1ERC20GatewayRouter\":\"ERC20 gateway router contract to send tokens to Arbitrum.\",\"_l1Usdc\":\"USDC address on L1.\",\"_l2GasPrice\":\"Gas price bid for L2 execution. Should be set conservatively high to avoid stuck messages.\",\"_l2MaxSubmissionCost\":\"Amount of gas token allocated to pay for the base submission fee. The base submission fee is a parameter unique to Arbitrum retryable transactions. This value is hardcoded and used for all messages sent by this adapter.\",\"_l2RefundL2Address\":\"L2 address to receive gas refunds on after a message is relayed.\"}},\"getL1CallValue(uint32)\":{\"details\":\"Should return a value in the same precision as the gas token's precision.\",\"params\":{\"l2GasLimit\":\"L2 gas limit for the message.\"},\"returns\":{\"_0\":\"amount of gas token that this contract needs to hold in order for relayMessage to succeed.\"}},\"relayMessage(address,bytes)\":{\"params\":{\"message\":\"Data to send to target.\",\"target\":\"Contract on Arbitrum that will receive message.\"}},\"relayTokens(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of L1 tokens to deposit and L2 tokens to receive.\",\"l1Token\":\"L1 token to deposit.\",\"l2Token\":\"L2 token to receive.\",\"to\":\"Bridge recipient.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"getL1CallValue(uint32)\":{\"notice\":\"Returns required amount of gas token to send a message via the Inbox.\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send cross-chain message to target on Arbitrum.This contract must hold at least getL1CallValue() amount of the custom gas token to send a message via the Inbox successfully, or the message will get stuck.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Bridge tokens to Arbitrum.This contract must hold at least getL1CallValue() amount of ETH or custom gas token to send a message via the Inbox successfully, or the message will get stuck.\"}},\"notice\":\"Contract containing logic to send messages from L1 to Arbitrum.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Arbitrum_CustomGasToken_Adapter.sol\":\"Arbitrum_CustomGasToken_Adapter\"},\"debug\":{\"revertStrings\":\"strip\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb264c03a3442eb37a68ad620cefd1182766b58bee6cec40343480392d6b14d69\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/chain-adapters/Arbitrum_CustomGasToken_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport { AdapterInterface } from \\\"./interfaces/AdapterInterface.sol\\\";\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ITokenMessenger as ICCTPTokenMessenger } from \\\"../external/interfaces/CCTPInterfaces.sol\\\";\\nimport { CircleCCTPAdapter, CircleDomainIds } from \\\"../libraries/CircleCCTPAdapter.sol\\\";\\nimport { ArbitrumERC20Bridge as ArbitrumL1ERC20Bridge, ArbitrumCustomGasTokenInbox as ArbitrumL1InboxLike, ArbitrumL1ERC20GatewayLike } from \\\"../interfaces/ArbitrumBridge.sol\\\";\\n\\n/**\\n * @notice Interface for funder contract that this contract pulls from to pay for relayMessage()/relayTokens()\\n * fees using a custom gas token.\\n */\\ninterface FunderInterface {\\n    /**\\n     * @notice Withdraws amount of token from funder contract to the caller.\\n     * @dev Can only be called by owner of Funder contract, which therefore must be\\n     * this contract.\\n     * @param token Token to withdraw.\\n     * @param amount Amount to withdraw.\\n     */\\n    function withdraw(IERC20 token, uint256 amount) external;\\n}\\n\\n/**\\n * @notice Contract containing logic to send messages from L1 to Arbitrum.\\n * @dev Public functions calling external contracts do not guard against reentrancy because they are expected to be\\n * called via delegatecall, which will execute this contract's logic within the context of the originating contract.\\n * For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods\\n * that call this contract's logic guard against reentrancy.\\n * @dev This contract is very similar to Arbitrum_Adapter but it allows the caller to pay for submission\\n * fees using a custom gas token. This is required to support certain Arbitrum orbit L2s and L3s.\\n * @dev https://docs.arbitrum.io/launch-orbit-chain/how-tos/use-a-custom-gas-token\\n */\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract Arbitrum_CustomGasToken_Adapter is AdapterInterface, CircleCCTPAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    // Amount of gas token allocated to pay for the base submission fee. The base submission fee is a parameter unique to\\n    // retryable transactions; the user is charged the base submission fee to cover the storage costs of keeping their\\n    // ticket\\u2019s calldata in the retry buffer. (current base submission fee is queryable via\\n    // ArbRetryableTx.getSubmissionPrice). ArbRetryableTicket precompile interface exists at L2 address\\n    // 0x000000000000000000000000000000000000006E.\\n    // The Arbitrum Inbox requires that this uses 18 decimal precision.\\n    uint256 public immutable L2_MAX_SUBMISSION_COST;\\n\\n    // L2 Gas price bid for immediate L2 execution attempt (queryable via standard eth*gasPrice RPC)\\n    // The Arbitrum Inbox requires that this is specified in gWei (e.g. 1e9 = 1 gWei)\\n    uint256 public immutable L2_GAS_PRICE;\\n\\n    // Native token expected to be sent in L2 message. Should be 0 for all use cases of this constant, which\\n    // includes sending messages from L1 to L2 and sending Custom gas token ERC20's, which won't be the native token\\n    // on the L2 by definition.\\n    uint256 public constant L2_CALL_VALUE = 0;\\n\\n    // Gas limit for L2 execution of a cross chain token transfer sent via the inbox.\\n    uint32 public constant RELAY_TOKENS_L2_GAS_LIMIT = 300_000;\\n    // Gas limit for L2 execution of a message sent via the inbox.\\n    uint32 public constant RELAY_MESSAGE_L2_GAS_LIMIT = 2_000_000;\\n\\n    // This address on L2 receives extra gas token that is left over after relaying a message via the inbox.\\n    address public immutable L2_REFUND_L2_ADDRESS;\\n\\n    // Inbox system contract to send messages to Arbitrum. Token bridges use this to send tokens to L2.\\n    // https://github.com/OffchainLabs/nitro-contracts/blob/f7894d3a6d4035ba60f51a7f1334f0f2d4f02dce/src/bridge/Inbox.sol\\n    ArbitrumL1InboxLike public immutable L1_INBOX;\\n\\n    // Router contract to send tokens to Arbitrum. Routes to correct gateway to bridge tokens. Internally this\\n    // contract calls the Inbox.\\n    // Generic gateway: https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1ArbitrumGateway.sol\\n    // Gateway used for communicating with chains that use custom gas tokens:\\n    // https://github.com/OffchainLabs/token-bridge-contracts/blob/main/contracts/tokenbridge/ethereum/gateway/L1ERC20Gateway.sol\\n    ArbitrumL1ERC20GatewayLike public immutable L1_ERC20_GATEWAY_ROUTER;\\n\\n    // This token is used to pay for l1 to l2 messages if its configured by an Arbitrum orbit chain.\\n    IERC20 public immutable CUSTOM_GAS_TOKEN;\\n\\n    // Contract that funds Inbox cross chain messages with the custom gas token.\\n    FunderInterface public immutable CUSTOM_GAS_TOKEN_FUNDER;\\n\\n    error InvalidCustomGasToken();\\n    error InsufficientCustomGasToken();\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1ArbitrumInbox Inbox helper contract to send messages to Arbitrum.\\n     * @param _l1ERC20GatewayRouter ERC20 gateway router contract to send tokens to Arbitrum.\\n     * @param _l2RefundL2Address L2 address to receive gas refunds on after a message is relayed.\\n     * @param _l1Usdc USDC address on L1.\\n     * @param _l2MaxSubmissionCost Max gas deducted from user's L2 balance to cover base fee.\\n     * @param _l2GasPrice Gas price bid for L2 execution. Should be set conservatively high to avoid stuck messages.\\n     * @param _cctpTokenMessenger TokenMessenger contract to bridge via CCTP.\\n     * @param _customGasTokenFunder Contract that funds the custom gas token.\\n     * @param _l2MaxSubmissionCost Amount of gas token allocated to pay for the base submission fee. The base\\n     * submission fee is a parameter unique to Arbitrum retryable transactions. This value is hardcoded\\n     * and used for all messages sent by this adapter.\\n     */\\n    constructor(\\n        ArbitrumL1InboxLike _l1ArbitrumInbox,\\n        ArbitrumL1ERC20GatewayLike _l1ERC20GatewayRouter,\\n        address _l2RefundL2Address,\\n        IERC20 _l1Usdc,\\n        ICCTPTokenMessenger _cctpTokenMessenger,\\n        FunderInterface _customGasTokenFunder,\\n        uint256 _l2MaxSubmissionCost,\\n        uint256 _l2GasPrice\\n    ) CircleCCTPAdapter(_l1Usdc, _cctpTokenMessenger, CircleDomainIds.Arbitrum) {\\n        L1_INBOX = _l1ArbitrumInbox;\\n        L1_ERC20_GATEWAY_ROUTER = _l1ERC20GatewayRouter;\\n        L2_REFUND_L2_ADDRESS = _l2RefundL2Address;\\n        CUSTOM_GAS_TOKEN = IERC20(L1_INBOX.bridge().nativeToken());\\n        if (address(CUSTOM_GAS_TOKEN) == address(0)) revert InvalidCustomGasToken();\\n        L2_MAX_SUBMISSION_COST = _l2MaxSubmissionCost;\\n        L2_GAS_PRICE = _l2GasPrice;\\n        CUSTOM_GAS_TOKEN_FUNDER = _customGasTokenFunder;\\n    }\\n\\n    /**\\n     * @notice Send cross-chain message to target on Arbitrum.\\n     * @notice This contract must hold at least getL1CallValue() amount of the custom gas token\\n     * to send a message via the Inbox successfully, or the message will get stuck.\\n     * @param target Contract on Arbitrum that will receive message.\\n     * @param message Data to send to target.\\n     */\\n    function relayMessage(address target, bytes memory message) external payable override {\\n        uint256 requiredL1TokenTotalFeeAmount = _pullCustomGas(RELAY_MESSAGE_L2_GAS_LIMIT);\\n        CUSTOM_GAS_TOKEN.safeIncreaseAllowance(address(L1_INBOX), requiredL1TokenTotalFeeAmount);\\n        L1_INBOX.createRetryableTicket(\\n            target, // destAddr destination L2 contract address\\n            L2_CALL_VALUE, // l2CallValue call value for retryable L2 message\\n            L2_MAX_SUBMISSION_COST, // maxSubmissionCost Max gas deducted from user's L2 balance to cover base fee\\n            L2_REFUND_L2_ADDRESS, // excessFeeRefundAddress maxgas * gasprice - execution cost gets credited here on L2\\n            L2_REFUND_L2_ADDRESS, // callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n            RELAY_MESSAGE_L2_GAS_LIMIT, // maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n            L2_GAS_PRICE, // gasPriceBid price bid for L2 execution\\n            requiredL1TokenTotalFeeAmount, // tokenTotalFeeAmount amount of fees to be deposited in native token.\\n            // This should be in the precision of the custom gas token.\\n            message // data ABI encoded data of L2 message\\n        );\\n        emit MessageRelayed(target, message);\\n    }\\n\\n    /**\\n     * @notice Bridge tokens to Arbitrum.\\n     * @notice This contract must hold at least getL1CallValue() amount of ETH or custom gas token\\n     * to send a message via the Inbox successfully, or the message will get stuck.\\n     * @param l1Token L1 token to deposit.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token, // l2Token is unused for Arbitrum.\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        // Check if this token is USDC, which requires a custom bridge via CCTP.\\n        if (_isCCTPEnabled() && l1Token == address(usdcToken)) {\\n            _transferUsdc(to, amount);\\n        }\\n        // If not, we can use the Arbitrum gateway\\n        else {\\n            address erc20Gateway = L1_ERC20_GATEWAY_ROUTER.getGateway(l1Token);\\n\\n            // If custom gas token, call special functions that handle paying with custom gas tokens.\\n            uint256 requiredL1TokenTotalFeeAmount = _pullCustomGas(RELAY_MESSAGE_L2_GAS_LIMIT);\\n\\n            // Must use Inbox to bridge custom gas token.\\n            // Source: https://github.com/OffchainLabs/token-bridge-contracts/blob/5bdf33259d2d9ae52ddc69bc5a9cbc558c4c40c7/contracts/tokenbridge/ethereum/gateway/L1OrbitERC20Gateway.sol#L33\\n            if (l1Token == address(CUSTOM_GAS_TOKEN)) {\\n                // amount and requiredL1TokenTotalFeeAmount are in the precision of the custom gas token.\\n                uint256 amountToBridge = amount + requiredL1TokenTotalFeeAmount;\\n                CUSTOM_GAS_TOKEN.safeIncreaseAllowance(address(L1_INBOX), amountToBridge);\\n                L1_INBOX.createRetryableTicket(\\n                    to, // destAddr destination L2 contract address\\n                    L2_CALL_VALUE, // l2CallValue call value for retryable L2 message\\n                    L2_MAX_SUBMISSION_COST, // maxSubmissionCost Max gas deducted from user's L2 balance to cover base fee\\n                    L2_REFUND_L2_ADDRESS, // excessFeeRefundAddress maxgas * gasprice - execution cost gets credited here on L2\\n                    L2_REFUND_L2_ADDRESS, // callValueRefundAddress l2Callvalue gets credited here on L2 if retryable txn times out or gets cancelled\\n                    RELAY_MESSAGE_L2_GAS_LIMIT, // maxGas Max gas deducted from user's L2 balance to cover L2 execution\\n                    L2_GAS_PRICE, // gasPriceBid price bid for L2 execution\\n                    amountToBridge, // tokenTotalFeeAmount amount of fees to be deposited in native token.\\n                    \\\"0x\\\" // data ABI encoded data of L2 message\\n                );\\n            } else {\\n                IERC20(l1Token).safeIncreaseAllowance(erc20Gateway, amount);\\n                CUSTOM_GAS_TOKEN.safeIncreaseAllowance(erc20Gateway, requiredL1TokenTotalFeeAmount);\\n\\n                // To pay for gateway outbound transfer with custom gas token, encode the tokenTotalFeeAmount in the data field:\\n                // The data format should be (uint256 maxSubmissionCost, bytes extraData, uint256 tokenTotalFeeAmount).\\n                // Source: https://github.com/OffchainLabs/token-bridge-contracts/blob/5bdf33259d2d9ae52ddc69bc5a9cbc558c4c40c7/contracts/tokenbridge/ethereum/gateway/L1OrbitERC20Gateway.sol#L57\\n                bytes memory data = abi.encode(L2_MAX_SUBMISSION_COST, \\\"\\\", requiredL1TokenTotalFeeAmount);\\n                L1_ERC20_GATEWAY_ROUTER.outboundTransferCustomRefund(\\n                    l1Token,\\n                    L2_REFUND_L2_ADDRESS,\\n                    to,\\n                    amount,\\n                    RELAY_TOKENS_L2_GAS_LIMIT,\\n                    L2_GAS_PRICE,\\n                    data\\n                );\\n            }\\n        }\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n\\n    /**\\n     * @notice Returns required amount of gas token to send a message via the Inbox.\\n     * @dev Should return a value in the same precision as the gas token's precision.\\n     * @param l2GasLimit L2 gas limit for the message.\\n     * @return amount of gas token that this contract needs to hold in order for relayMessage to succeed.\\n     */\\n    function getL1CallValue(uint32 l2GasLimit) public view returns (uint256) {\\n        return _from18ToNativeDecimals(L2_MAX_SUBMISSION_COST + L2_GAS_PRICE * l2GasLimit);\\n    }\\n\\n    function _pullCustomGas(uint32 l2GasLimit) internal returns (uint256) {\\n        uint256 requiredL1CallValue = getL1CallValue(l2GasLimit);\\n        CUSTOM_GAS_TOKEN_FUNDER.withdraw(CUSTOM_GAS_TOKEN, requiredL1CallValue);\\n        if (CUSTOM_GAS_TOKEN.balanceOf(address(this)) < requiredL1CallValue) revert InsufficientCustomGasToken();\\n        return requiredL1CallValue;\\n    }\\n\\n    function _from18ToNativeDecimals(uint256 amount) internal view returns (uint256) {\\n        uint8 nativeTokenDecimals = L1_INBOX.bridge().nativeTokenDecimals();\\n        if (nativeTokenDecimals == 18) {\\n            return amount;\\n        } else if (nativeTokenDecimals < 18) {\\n            // Round up the division result so that the L1 call value is always sufficient to cover the submission fee.\\n            uint256 reductionFactor = 10**(18 - nativeTokenDecimals);\\n            uint256 divFloor = amount / reductionFactor;\\n            uint256 mod = amount % reductionFactor;\\n            if (mod != 0) {\\n                return divFloor + 1;\\n            } else {\\n                return divFloor;\\n            }\\n        } else {\\n            return amount * 10**(nativeTokenDecimals - 18);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa9f575169e212fad4e66c4a2e78c6b0c46cb32bcc482260e495333894fef2646\",\"license\":\"BUSL-1.1\"},\"contracts/chain-adapters/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n * This interface is implemented by an adapter contract that is deployed on L1.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    /**\\n     * @notice Send message to `target` on L2.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param target L2 address to send message to.\\n     * @param message Message to send to `target`.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    /**\\n     * @notice Send `amount` of `l1Token` to `to` on L2. `l2Token` is the L2 address equivalent of `l1Token`.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param l1Token L1 token to bridge.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of `l1Token` to bridge.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x1d52fcb8b10dc7f260345918c1a90d496a4c9f774402cbd5ebde881b8fed6d50\",\"license\":\"BUSL-1.1\"},\"contracts/external/interfaces/CCTPInterfaces.sol\":{\"content\":\"/**\\n * Copyright (C) 2015, 2016, 2017 Dapphub\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n/**\\n * Imported as-is from commit 139d8d0ce3b5531d3c7ec284f89d946dfb720016 of:\\n *   * https://github.com/walkerq/evm-cctp-contracts/blob/139d8d0ce3b5531d3c7ec284f89d946dfb720016/src/TokenMessenger.sol\\n * Changes applied post-import:\\n *   * Removed a majority of code from this contract and converted the needed function signatures in this interface.\\n */\\ninterface ITokenMessenger {\\n    /**\\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\\n     * Emits a `DepositForBurn` event.\\n     * @dev reverts if:\\n     * - given burnToken is not supported\\n     * - given destinationDomain has no TokenMessenger registered\\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\\n     * to this contract is less than `amount`.\\n     * - burn() reverts. For example, if `amount` is 0.\\n     * - MessageTransmitter returns false or reverts.\\n     * @param amount amount of tokens to burn\\n     * @param destinationDomain destination domain\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @return _nonce unique nonce reserved by message\\n     */\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 _nonce);\\n\\n    /**\\n     * @notice Minter responsible for minting and burning tokens on the local domain\\n     * @dev A TokenMessenger stores a TokenMinter contract which extends the TokenController contract.\\n     * https://github.com/circlefin/evm-cctp-contracts/blob/817397db0a12963accc08ff86065491577bbc0e5/src/TokenMessenger.sol#L110\\n     * @return minter Token Minter contract.\\n     */\\n    function localMinter() external view returns (ITokenMinter minter);\\n}\\n\\n/**\\n * A TokenMessenger stores a TokenMinter contract which extends the TokenController contract. The TokenController\\n * contract has a burnLimitsPerMessage public mapping which can be queried to find the per-message burn limit\\n * for a given token:\\n * https://github.com/circlefin/evm-cctp-contracts/blob/817397db0a12963accc08ff86065491577bbc0e5/src/TokenMinter.sol#L33\\n * https://github.com/circlefin/evm-cctp-contracts/blob/817397db0a12963accc08ff86065491577bbc0e5/src/roles/TokenController.sol#L69C40-L69C60\\n *\\n */\\ninterface ITokenMinter {\\n    /**\\n     * @notice Supported burnable tokens on the local domain\\n     * local token (address) => maximum burn amounts per message\\n     * @param token address of token contract\\n     * @return burnLimit maximum burn amount per message for token\\n     */\\n    function burnLimitsPerMessage(address token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x9d6606bb3b0c52bcdbe834d4bc2cb97db6bfd2a906178598f5891d662d0450bd\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/ArbitrumBridge.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Staging ground for incoming and outgoing messages\\n * @notice Unlike the standard Eth bridge, native token bridge escrows the custom ERC20 token which is\\n * used as native currency on upper layer.\\n * @dev Fees are paid in this token. There are certain restrictions on the native token:\\n *       - The token can't be rebasing or have a transfer fee\\n *       - The token must only be transferrable via a call to the token address itself\\n *       - The token must only be able to set allowance via a call to the token address itself\\n *       - The token must not have a callback on transfer, and more generally a user must not be able to make a transfer to themselves revert\\n *       - The token must have a max of 2^256 - 1 wei total supply unscaled\\n *       - The token must have a max of 2^256 - 1 wei total supply when scaled to 18 decimals\\n */\\ninterface ArbitrumERC20Bridge {\\n    /**\\n     * @notice Returns token that is escrowed in bridge on the lower layer and minted on the upper layer as native currency.\\n     * @dev This function doesn't exist on the generic Bridge interface.\\n     * @return address of the native token.\\n     */\\n    function nativeToken() external view returns (address);\\n\\n    /**\\n     * @dev number of decimals used by the native token\\n     *      This is set on bridge initialization using nativeToken.decimals()\\n     *      If the token does not have decimals() method, we assume it have 0 decimals\\n     */\\n    function nativeTokenDecimals() external view returns (uint8);\\n}\\n\\n/**\\n * @title Inbox for user and contract originated messages\\n * @notice Messages created via this inbox are enqueued in the delayed accumulator\\n * to await inclusion in the SequencerInbox\\n */\\ninterface ArbitrumInboxLike {\\n    /**\\n     * @dev we only use this function to check the native token used by the bridge, so we hardcode the interface\\n     * to return an ArbitrumERC20Bridge instead of a more generic Bridge interface.\\n     * @return address of the bridge.\\n     */\\n    function bridge() external view returns (ArbitrumERC20Bridge);\\n\\n    /**\\n     * @notice Put a message in the inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n     * @dev Caller must set msg.value equal to at least `maxSubmissionCost + maxGas * gasPriceBid`.\\n     *      all msg.value will deposited to callValueRefundAddress on the upper layer\\n     * @dev More details can be found here: https://developer.arbitrum.io/arbos/l1-to-l2-messaging\\n     * @param to destination contract address\\n     * @param callValue call value for retryable message\\n     * @param maxSubmissionCost Max gas deducted from user's (upper layer) balance to cover base submission fee\\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on (upper layer) balance\\n     * @param callValueRefundAddress callvalue gets credited here on upper layer if retryable txn times out or gets cancelled\\n     * @param gasLimit Max gas deducted from user's upper layer balance to cover upper layer execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param maxFeePerGas price bid for upper layer execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param data ABI encoded data of message\\n     * @return unique message number of the retryable transaction\\n     */\\n    function createRetryableTicket(\\n        address to,\\n        uint256 callValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n\\n    /**\\n     * @notice Put a message in the source chain inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @dev Same as createRetryableTicket, but does not guarantee that submission will succeed by requiring the needed\\n     * funds come from the deposit alone, rather than falling back on the user's balance\\n     * @dev Advanced usage only (does not rewrite aliases for excessFeeRefundAddress and callValueRefundAddress).\\n     * createRetryableTicket method is the recommended standard.\\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n     * @param to destination contract address\\n     * @param callValue call value for retryable message\\n     * @param maxSubmissionCost Max gas deducted from user's source chain balance to cover base submission fee\\n     * @param excessFeeRefundAddress gasLimit x maxFeePerGas - execution cost gets credited here on source chain balance\\n     * @param callValueRefundAddress callvalue gets credited here on source chain if retryable txn times out or gets cancelled\\n     * @param gasLimit Max gas deducted from user's balance to cover execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param maxFeePerGas price bid for execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param data ABI encoded data of the message\\n     * @return unique message number of the retryable transaction\\n     */\\n    function unsafeCreateRetryableTicket(\\n        address to,\\n        uint256 callValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        bytes calldata data\\n    ) external payable returns (uint256);\\n}\\n\\n/**\\n * @notice Interface which extends ArbitrumInboxLike with functions used to interact with bridges that use a custom gas token.\\n */\\ninterface ArbitrumCustomGasTokenInbox is ArbitrumInboxLike {\\n    /**\\n     * @notice Put a message in the inbox that can be reexecuted for some fixed amount of time if it reverts\\n     * @notice Overloads the `createRetryableTicket` function but is not payable, and should only be called when paying\\n     * for message using a custom gas token.\\n     * @dev all tokenTotalFeeAmount will be deposited to callValueRefundAddress on upper layer\\n     * @dev Gas limit and maxFeePerGas should not be set to 1 as that is used to trigger the RetryableData error\\n     * @dev In case of native token having non-18 decimals: tokenTotalFeeAmount is denominated in native token's decimals. All other value params - callValue, maxSubmissionCost and maxFeePerGas are denominated in child chain's native 18 decimals.\\n     * @param to destination contract address\\n     * @param callValue call value for retryable message\\n     * @param maxSubmissionCost Max gas deducted from user's upper layer balance to cover base submission fee\\n     * @param excessFeeRefundAddress the address which receives the difference between execution fee paid and the actual execution cost. In case this address is a contract, funds will be received in its alias on upper layer.\\n     * @param callValueRefundAddress callvalue gets credited here on upper layer if retryable txn times out or gets cancelled. In case this address is a contract, funds will be received in its alias on upper layer.\\n     * @param gasLimit Max gas deducted from user's balance to cover execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param maxFeePerGas price bid for execution. Should not be set to 1 (magic value used to trigger the RetryableData error)\\n     * @param tokenTotalFeeAmount amount of fees to be deposited in native token to cover for retryable ticket cost\\n     * @param data ABI encoded data of message\\n     * @return unique message number of the retryable transaction\\n     */\\n    function createRetryableTicket(\\n        address to,\\n        uint256 callValue,\\n        uint256 maxSubmissionCost,\\n        address excessFeeRefundAddress,\\n        address callValueRefundAddress,\\n        uint256 gasLimit,\\n        uint256 maxFeePerGas,\\n        uint256 tokenTotalFeeAmount,\\n        bytes calldata data\\n    ) external returns (uint256);\\n}\\n\\n/**\\n * @notice Generic gateway contract for bridging standard ERC20s to/from Arbitrum-like networks.\\n * @notice These function signatures are shared between the L1 and L2 gateway router contracts.\\n */\\ninterface ArbitrumL1ERC20GatewayLike {\\n    /**\\n     * @notice Deprecated in favor of outboundTransferCustomRefund but still used in custom bridges\\n     * like the DAI bridge.\\n     * @dev Refunded to aliased address of sender if sender has code on source chain, otherwise to to sender's EOA on destination chain.\\n     * @param _sourceToken address of ERC20\\n     * @param _to Account to be credited with the tokens at the destination (can be the user's account or a contract),\\n     * not subject to aliasing. This account, or its alias if it has code in the source chain, will also be able to\\n     * cancel the retryable ticket and receive callvalue refund\\n     * @param _amount Token Amount\\n     * @param _maxGas Max gas deducted from user's balance to cover execution\\n     * @param _gasPriceBid Gas price for execution\\n     * @param _data encoded data from router and user\\n     * @return res abi encoded inbox sequence number\\n     */\\n    function outboundTransfer(\\n        address _sourceToken,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n\\n    /**\\n     * @notice get ERC20 gateway for token.\\n     * @param _token ERC20 address.\\n     * @return address of ERC20 gateway.\\n     */\\n    function getGateway(address _token) external view returns (address);\\n\\n    /**\\n     * @notice Deposit ERC20 token from Ethereum into Arbitrum-like networks.\\n     * @dev Upper layer address alias will not be applied to the following types of addresses on lower layer:\\n     *      - an externally-owned account\\n     *      - a contract in construction\\n     *      - an address where a contract will be created\\n     *      - an address where a contract lived, but was destroyed\\n     * @param _sourceToken address of ERC20 on source chain.\\n     * @param _refundTo Account, or its alias if it has code on the source chain, to be credited with excess gas refund at destination\\n     * @param _to Account to be credited with the tokens in the L3 (can be the user's L3 account or a contract),\\n     * not subject to aliasing. This account, or its alias if it has code on the source chain, will also be able to\\n     * cancel the retryable ticket and receive callvalue refund\\n     * @param _amount Token Amount\\n     * @param _maxGas Max gas deducted from user's balance to cover execution\\n     * @param _gasPriceBid Gas price for execution\\n     * @param _data encoded data from router and user\\n     * @return res abi encoded inbox sequence number\\n     */\\n    function outboundTransferCustomRefund(\\n        address _sourceToken,\\n        address _refundTo,\\n        address _to,\\n        uint256 _amount,\\n        uint256 _maxGas,\\n        uint256 _gasPriceBid,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n}\\n\\ninterface ArbitrumL2ERC20GatewayLike {\\n    /**\\n     * @notice Fetches the l2 token address from the gateway router for the input l1 token address\\n     * @param _l1Erc20 address of the l1 token.\\n     */\\n    function calculateL2TokenAddress(address _l1Erc20) external view returns (address);\\n\\n    /**\\n     * @notice Withdraws a specified amount of an l2 token to an l1 token.\\n     * @param _l1Token address of the token to withdraw on L1.\\n     * @param _to address on L1 which will receive the tokens upon withdrawal.\\n     * @param _amount amount of the token to withdraw.\\n     * @param _data encoded data to send to the gateway router.\\n     */\\n    function outboundTransfer(\\n        address _l1Token,\\n        address _to,\\n        uint256 _amount,\\n        bytes calldata _data\\n    ) external payable returns (bytes memory);\\n}\\n\",\"keccak256\":\"0x9ef6db1c1bee70688b3b9756855b1fa14b0bb45b0a53a43992ffb0272153a927\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/CircleCCTPAdapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../external/interfaces/CCTPInterfaces.sol\\\";\\n\\nlibrary CircleDomainIds {\\n    uint32 public constant Ethereum = 0;\\n    uint32 public constant Optimism = 2;\\n    uint32 public constant Arbitrum = 3;\\n    uint32 public constant Base = 6;\\n    uint32 public constant Polygon = 7;\\n    // Use this value for placeholder purposes only for adapters that extend this adapter but haven't yet been\\n    // assigned a domain ID by Circle.\\n    uint32 public constant UNINITIALIZED = type(uint32).max;\\n}\\n\\n/**\\n * @notice Facilitate bridging USDC via Circle's CCTP.\\n * @dev This contract is intended to be inherited by other chain-specific adapters and spoke pools.\\n * @custom:security-contact bugs@across.to\\n */\\nabstract contract CircleCCTPAdapter {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice The domain ID that CCTP will transfer funds to.\\n     * @dev This identifier is assigned by Circle and is not related to a chain ID.\\n     * @dev Official domain list can be found here: https://developers.circle.com/stablecoins/docs/supported-domains\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    uint32 public immutable recipientCircleDomainId;\\n\\n    /**\\n     * @notice The official USDC contract address on this chain.\\n     * @dev Posted officially here: https://developers.circle.com/stablecoins/docs/usdc-on-main-networks\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    IERC20 public immutable usdcToken;\\n\\n    /**\\n     * @notice The official Circle CCTP token bridge contract endpoint.\\n     * @dev Posted officially here: https://developers.circle.com/stablecoins/docs/evm-smart-contracts\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n    ITokenMessenger public immutable cctpTokenMessenger;\\n\\n    /**\\n     * @notice intiailizes the CircleCCTPAdapter contract.\\n     * @param _usdcToken USDC address on the current chain.\\n     * @param _cctpTokenMessenger TokenMessenger contract to bridge via CCTP. If the zero address is passed, CCTP bridging will be disabled.\\n     * @param _recipientCircleDomainId The domain ID that CCTP will transfer funds to.\\n     */\\n    /// @custom:oz-upgrades-unsafe-allow constructor\\n    constructor(\\n        IERC20 _usdcToken,\\n        ITokenMessenger _cctpTokenMessenger,\\n        uint32 _recipientCircleDomainId\\n    ) {\\n        usdcToken = _usdcToken;\\n        cctpTokenMessenger = _cctpTokenMessenger;\\n        recipientCircleDomainId = _recipientCircleDomainId;\\n    }\\n\\n    /**\\n     * @notice converts address to bytes32 (alignment preserving cast.)\\n     * @param addr the address to convert to bytes32\\n     * @dev Sourced from the official CCTP repo: https://github.com/walkerq/evm-cctp-contracts/blob/139d8d0ce3b5531d3c7ec284f89d946dfb720016/src/messages/Message.sol#L142C1-L148C6\\n     */\\n    function _addressToBytes32(address addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)));\\n    }\\n\\n    /**\\n     * @notice Returns whether or not the CCTP bridge is enabled.\\n     * @dev If the CCTPTokenMessenger is the zero address, CCTP bridging is disabled.\\n     */\\n    function _isCCTPEnabled() internal view returns (bool) {\\n        return address(cctpTokenMessenger) != address(0);\\n    }\\n\\n    /**\\n     * @notice Transfers USDC from the current domain to the given address on the new domain.\\n     * @dev This function will revert if the CCTP bridge is disabled. I.e. if the zero address is passed to the constructor for the cctpTokenMessenger.\\n     * @param to Address to receive USDC on the new domain.\\n     * @param amount Amount of USDC to transfer.\\n     */\\n    function _transferUsdc(address to, uint256 amount) internal {\\n        // Only approve the exact amount to be transferred\\n        usdcToken.safeIncreaseAllowance(address(cctpTokenMessenger), amount);\\n        // Submit the amount to be transferred to bridged via the TokenMessenger.\\n        // If the amount to send exceeds the burn limit per message, then split the message into smaller parts.\\n        ITokenMinter cctpMinter = cctpTokenMessenger.localMinter();\\n        uint256 burnLimit = cctpMinter.burnLimitsPerMessage(address(usdcToken));\\n        uint256 remainingAmount = amount;\\n        bytes32 recipient = _addressToBytes32(to);\\n        while (remainingAmount > 0) {\\n            uint256 partAmount = remainingAmount > burnLimit ? burnLimit : remainingAmount;\\n            cctpTokenMessenger.depositForBurn(partAmount, recipientCircleDomainId, recipient, address(usdcToken));\\n            remainingAmount -= partAmount;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb1ae05e3f2b8ac69ed6b9fd756bca11e082643232c1ab464bf935315f7826d9b\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101c060408181523462000284578162001bc08038038091620000238285620002da565b833961010093849181010312620002845780516001600160a01b0392838216929183810362000284576020918284015192868416840362000284576200006b82860162000312565b96606086015191818316830362000284576080870151978289168903620002845760a088015198838a168a036200028457600491839160e060c08c01519b01519660a05260c05260036080526101409788526101609889526101209b8c528651928380926373c6754960e11b82525afa9081156200029057839183915f916200029a575b506004875180948193631c2eb17b60e31b8352165afa91821562000290575f926200024e575b5050169461018095808752156200023d5760e05287526101a094855251946118989687620003288839608051878181610652015261083c015260a05187818161078501528181610f09015261105c015260c0518781816105f40152610755015260e0518781816102020152818161058701528181610b2901528181610c8401528181610fe201526114ec01525186818161025e01528181610b8601528181610d4801528181610fbc015281816110b301526114b40152518581816102280152818161044d01528181610b500152610d0a01525184818161017f015281816103df01528181610acf01526112ab0152518381816104f60152610a460152518281816101a7015281816106c001528181610a88015261158201525181818161037101526115280152f35b825163a44d432f60e01b8152600490fd5b90809250813d831162000288575b620002688183620002da565b8101031262000284576200027c9062000312565b5f8062000115565b5f80fd5b503d6200025c565b85513d5f823e3d90fd5b92505081813d8311620002d2575b620002b48183620002da565b81010312620002845751828116810362000284578183915f620000ef565b503d620002a8565b601f909101601f19168101906001600160401b03821190821017620002fe57604052565b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b0382168203620002845756fe6080604081815260049182361015610015575f80fd5b5f3560e01c90816306dd5248146110805750806311eac855146110125780631fc1ba7614610f6d57806328f2716e14610f3257806352c8c75c146106e457806358f76b65146106765780636e400983146106185780639748cf7c146105aa578063a253166914610552578063a567bbf01461051a578063b077d399146104ac578063c735281e14610471578063cc7a329014610403578063e585cc4714610395578063e58921a2146103275763e6eb8ade146100cf575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576101006110d6565b916024359167ffffffffffffffff8311610312573660238401121561031257828201359361012d85611167565b9461013a835196876110f9565b808652602094366024838301011161031257815f926024889301838a013787010152836101656114ae565b9173ffffffffffffffffffffffffffffffffffffffff92837f000000000000000000000000000000000000000000000000000000000000000016906101cb81837f0000000000000000000000000000000000000000000000000000000000000000611692565b8486519586947f549e84260000000000000000000000000000000000000000000000000000000086521680988501525f60248501527f000000000000000000000000000000000000000000000000000000000000000060448501527f0000000000000000000000000000000000000000000000000000000000000000168060648501526084840152621e848060a48401527f000000000000000000000000000000000000000000000000000000000000000060c484015260e4830152610120610104830152815f816102a161012482018c61120f565b03925af1801561031d576102ef575b507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac49381806102ea9351958695865285015283019061120f565b0390a1005b8390813d8311610316575b61030481836110f9565b81010312610312575f6102b0565b5f80fd5b503d6102fa565b82513d5f823e3d90fd5b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103125760209051621e84808152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031257602090515f8152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031257602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576107186110d6565b91602490813573ffffffffffffffffffffffffffffffffffffffff80821680920361031257606480358281169660448035979289900361031257847f00000000000000000000000000000000000000000000000000000000000000001680151580610f05575b15610a0a577f0000000000000000000000000000000000000000000000000000000000000000906107b08a8284611692565b88517fcb75c11c00000000000000000000000000000000000000000000000000000000815260209283828781865afa9182156109c3578993929185915f936109cd575b50841691888d51809681937fa56ec632000000000000000000000000000000000000000000000000000000008352868c840152165afa9283156109c3575f93610994575b5091967f000000000000000000000000000000000000000000000000000000000000000063ffffffff1692908c805b6108b45750505050505050505050917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b959391608095935b82519516855260208501528301526060820152a1005b8c8f8b83111561098d578b915b51907f6fd3504e000000000000000000000000000000000000000000000000000000008252828b830152878c83015289820152848482015287816084815f8a5af1801561098357610948575b50810390811161091d5780610866565b886011897f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8781813d831161097c575b61095d81836110f9565b81010312610312575167ffffffffffffffff811603610312575f61090d565b503d610953565b8f513d5f823e3d90fd5b82916108c1565b9092508381813d83116109bc575b6109ac81836110f9565b810103126103125751915f610837565b503d6109a2565b8b513d5f823e3d90fd5b9250935081813d8311610a03575b6109e581836110f9565b810103126103125751918883168303610312578389809492906107f3565b503d6109db565b505085517fbda009fe000000000000000000000000000000000000000000000000000000008152898516818301819052959998979695602094507f0000000000000000000000000000000000000000000000000000000000000000861685838681845afa928315610efb575f93610ec3575b50610a856114ae565b917f00000000000000000000000000000000000000000000000000000000000000009388851682145f14610c615750505084925f8a93610ac8610164948c6111e1565b610af6818b7f0000000000000000000000000000000000000000000000000000000000000000168094611692565b828b5198899788967f549e84260000000000000000000000000000000000000000000000000000000088528701528501527f00000000000000000000000000000000000000000000000000000000000000006044850152897f0000000000000000000000000000000000000000000000000000000000000000168060648601526084850152621e848060a48501527f000000000000000000000000000000000000000000000000000000000000000060c485015260e484015261012061010484015260026101248401527f30780000000000000000000000000000000000000000000000000000000000006101448401525af18015610c5757610c24575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9560809594939261089e565b819695949392963d8311610c50575b610c3d81836110f9565b8101031261031257909192935f80610bf4565b503d610c33565b84513d5f823e3d90fd5b928381958c9d9f9b9c610c7a90859697610c7f96611692565b611692565b8851927f00000000000000000000000000000000000000000000000000000000000000008785015260608a8501525f608085015260608401526080835260a083019467ffffffffffffffff9484871086881117610e995750505f918591828b527f4fb1a07b00000000000000000000000000000000000000000000000000000000835260a4850152877f00000000000000000000000000000000000000000000000000000000000000001660c48501528c60e48501528a610104850152620493e06101248501527f000000000000000000000000000000000000000000000000000000000000000061014485015260e061016485015281837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6086610da761018482018261120f565b0301925af18015610e8f57610de9575b505050509160809493917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b969361089e565b9895939197969492983d805f8b3e610e01818b6110f9565b8101988a8260a08c019b031261031257519182116103125701978760bf8a0112156103125760a0890151610e3481611167565b98610e4186519a8b6110f9565b818a5260c0828c010111610312577fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9960c0610e829360809b0191016111ee565b919396819395965f610db7565b87513d5f823e3d90fd5b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b9092508581813d8311610ef4575b610edb81836110f9565b810103126103125751868116810361031257915f610a7c565b503d610ed1565b88513d5f823e3d90fd5b50857f000000000000000000000000000000000000000000000000000000000000000016868c161461077e565b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103125760209051620493e08152f35b5090346103125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031257359063ffffffff82168092036103125761100b611006610fe06020947f00000000000000000000000000000000000000000000000000000000000000006111a1565b7f00000000000000000000000000000000000000000000000000000000000000006111e1565b611263565b9051908152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361031257565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761113a57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161113a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b818102929181159184041417156111b457565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b919082018092116111b457565b5f5b8381106111ff5750505f910152565b81810151838201526020016111f0565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361124b815180928187528780880191016111ee565b0116010190565b60ff16604d81116111b457600a0a90565b73ffffffffffffffffffffffffffffffffffffffff604051907fe78cea92000000000000000000000000000000000000000000000000000000008252602060049281818581867f0000000000000000000000000000000000000000000000000000000000000000165afa801561146b5782915f91611476575b5084604051809581937fad48cb5e000000000000000000000000000000000000000000000000000000008352165afa90811561146b575f91611432575b5060ff1690506012810361132c57505090565b60128110156113f05760120360ff81116113c45761134990611252565b8015611398578083049206156113945760018201809211611368575090565b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5090565b6012827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b6011827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee019060ff821161136857509061142961142f92611252565b906111a1565b90565b905081813d8311611464575b61144881836110f9565b81010312610312575160ff811681036103125760ff905f611319565b503d61143e565b6040513d5f823e3d90fd5b82819392503d83116114a7575b61148d81836110f9565b81010312610312575182811681036103125781905f6112dc565b503d611483565b621e84807f00000000000000000000000000000000000000000000000000000000000000008181029181159183041417156111b457611006611510917f00000000000000000000000000000000000000000000000000000000000000006111e1565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690813b156103125760409182517ff3fef3a30000000000000000000000000000000000000000000000000000000081525f816044818380977f000000000000000000000000000000000000000000000000000000000000000016968760048401528a60248401525af18015610c5757611675575b5060206024918451928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa91821561166a57908492611635575b501061160c575090565b600490517ff2a7d102000000000000000000000000000000000000000000000000000000008152fd5b9150506020813d602011611662575b81611651602093836110f9565b81010312610312578290515f611602565b3d9150611644565b8351903d90823e3d90fd5b90915067ffffffffffffffff811161113a5782525f9060206115bc565b73ffffffffffffffffffffffffffffffffffffffff80911690604051927fdd62ed3e00000000000000000000000000000000000000000000000000000000845230600485015216918260248201526020938482604481865afa801561146b575f9061180a575b61170292506111e1565b9160405192848401917f095ea7b300000000000000000000000000000000000000000000000000000000835260248501526044840152604483526080830167ffffffffffffffff918482108383111761113a5760c085019283118284101761113a576117ca94865f94938594604052527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af13d15611802573d916117af83611167565b926117bd60405194856110f9565b83523d5f8685013e611839565b80519182159182156117e2575b505090501561031257565b809250819381010312610312570151801515810361031257805f806117d7565b606091611839565b508482813d8311611832575b61182081836110f9565b810103126103125761170291516116f8565b503d611816565b90156118535781511561184a575090565b3b156103125790565b50805190811561031257602001fdfea264697066735822122073812d9b7aa907802fd7fa530a3e0ac98e7dd6434828904899f6bb9ef45ccd5d64736f6c63430008170033",
  "deployedBytecode": "0x6080604081815260049182361015610015575f80fd5b5f3560e01c90816306dd5248146110805750806311eac855146110125780631fc1ba7614610f6d57806328f2716e14610f3257806352c8c75c146106e457806358f76b65146106765780636e400983146106185780639748cf7c146105aa578063a253166914610552578063a567bbf01461051a578063b077d399146104ac578063c735281e14610471578063cc7a329014610403578063e585cc4714610395578063e58921a2146103275763e6eb8ade146100cf575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576101006110d6565b916024359167ffffffffffffffff8311610312573660238401121561031257828201359361012d85611167565b9461013a835196876110f9565b808652602094366024838301011161031257815f926024889301838a013787010152836101656114ae565b9173ffffffffffffffffffffffffffffffffffffffff92837f000000000000000000000000000000000000000000000000000000000000000016906101cb81837f0000000000000000000000000000000000000000000000000000000000000000611692565b8486519586947f549e84260000000000000000000000000000000000000000000000000000000086521680988501525f60248501527f000000000000000000000000000000000000000000000000000000000000000060448501527f0000000000000000000000000000000000000000000000000000000000000000168060648501526084840152621e848060a48401527f000000000000000000000000000000000000000000000000000000000000000060c484015260e4830152610120610104830152815f816102a161012482018c61120f565b03925af1801561031d576102ef575b507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac49381806102ea9351958695865285015283019061120f565b0390a1005b8390813d8311610316575b61030481836110f9565b81010312610312575f6102b0565b5f80fd5b503d6102fa565b82513d5f823e3d90fd5b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103125760209051621e84808152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031257602090515f8152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031257602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905163ffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576107186110d6565b91602490813573ffffffffffffffffffffffffffffffffffffffff80821680920361031257606480358281169660448035979289900361031257847f00000000000000000000000000000000000000000000000000000000000000001680151580610f05575b15610a0a577f0000000000000000000000000000000000000000000000000000000000000000906107b08a8284611692565b88517fcb75c11c00000000000000000000000000000000000000000000000000000000815260209283828781865afa9182156109c3578993929185915f936109cd575b50841691888d51809681937fa56ec632000000000000000000000000000000000000000000000000000000008352868c840152165afa9283156109c3575f93610994575b5091967f000000000000000000000000000000000000000000000000000000000000000063ffffffff1692908c805b6108b45750505050505050505050917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b959391608095935b82519516855260208501528301526060820152a1005b8c8f8b83111561098d578b915b51907f6fd3504e000000000000000000000000000000000000000000000000000000008252828b830152878c83015289820152848482015287816084815f8a5af1801561098357610948575b50810390811161091d5780610866565b886011897f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8781813d831161097c575b61095d81836110f9565b81010312610312575167ffffffffffffffff811603610312575f61090d565b503d610953565b8f513d5f823e3d90fd5b82916108c1565b9092508381813d83116109bc575b6109ac81836110f9565b810103126103125751915f610837565b503d6109a2565b8b513d5f823e3d90fd5b9250935081813d8311610a03575b6109e581836110f9565b810103126103125751918883168303610312578389809492906107f3565b503d6109db565b505085517fbda009fe000000000000000000000000000000000000000000000000000000008152898516818301819052959998979695602094507f0000000000000000000000000000000000000000000000000000000000000000861685838681845afa928315610efb575f93610ec3575b50610a856114ae565b917f00000000000000000000000000000000000000000000000000000000000000009388851682145f14610c615750505084925f8a93610ac8610164948c6111e1565b610af6818b7f0000000000000000000000000000000000000000000000000000000000000000168094611692565b828b5198899788967f549e84260000000000000000000000000000000000000000000000000000000088528701528501527f00000000000000000000000000000000000000000000000000000000000000006044850152897f0000000000000000000000000000000000000000000000000000000000000000168060648601526084850152621e848060a48501527f000000000000000000000000000000000000000000000000000000000000000060c485015260e484015261012061010484015260026101248401527f30780000000000000000000000000000000000000000000000000000000000006101448401525af18015610c5757610c24575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9560809594939261089e565b819695949392963d8311610c50575b610c3d81836110f9565b8101031261031257909192935f80610bf4565b503d610c33565b84513d5f823e3d90fd5b928381958c9d9f9b9c610c7a90859697610c7f96611692565b611692565b8851927f00000000000000000000000000000000000000000000000000000000000000008785015260608a8501525f608085015260608401526080835260a083019467ffffffffffffffff9484871086881117610e995750505f918591828b527f4fb1a07b00000000000000000000000000000000000000000000000000000000835260a4850152877f00000000000000000000000000000000000000000000000000000000000000001660c48501528c60e48501528a610104850152620493e06101248501527f000000000000000000000000000000000000000000000000000000000000000061014485015260e061016485015281837fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6086610da761018482018261120f565b0301925af18015610e8f57610de9575b505050509160809493917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b969361089e565b9895939197969492983d805f8b3e610e01818b6110f9565b8101988a8260a08c019b031261031257519182116103125701978760bf8a0112156103125760a0890151610e3481611167565b98610e4186519a8b6110f9565b818a5260c0828c010111610312577fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9960c0610e829360809b0191016111ee565b919396819395965f610db7565b87513d5f823e3d90fd5b6041907f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b9092508581813d8311610ef4575b610edb81836110f9565b810103126103125751868116810361031257915f610a7c565b503d610ed1565b88513d5f823e3d90fd5b50857f000000000000000000000000000000000000000000000000000000000000000016868c161461077e565b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126103125760209051620493e08152f35b5090346103125760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011261031257359063ffffffff82168092036103125761100b611006610fe06020947f00000000000000000000000000000000000000000000000000000000000000006111a1565b7f00000000000000000000000000000000000000000000000000000000000000006111e1565b611263565b9051908152f35b5034610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610312575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610312576020907f00000000000000000000000000000000000000000000000000000000000000008152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361031257565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761113a57604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b67ffffffffffffffff811161113a57601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b818102929181159184041417156111b457565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b919082018092116111b457565b5f5b8381106111ff5750505f910152565b81810151838201526020016111f0565b907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209361124b815180928187528780880191016111ee565b0116010190565b60ff16604d81116111b457600a0a90565b73ffffffffffffffffffffffffffffffffffffffff604051907fe78cea92000000000000000000000000000000000000000000000000000000008252602060049281818581867f0000000000000000000000000000000000000000000000000000000000000000165afa801561146b5782915f91611476575b5084604051809581937fad48cb5e000000000000000000000000000000000000000000000000000000008352165afa90811561146b575f91611432575b5060ff1690506012810361132c57505090565b60128110156113f05760120360ff81116113c45761134990611252565b8015611398578083049206156113945760018201809211611368575090565b6011907f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b5090565b6012827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b6011827f4e487b71000000000000000000000000000000000000000000000000000000005f525260245ffd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffee019060ff821161136857509061142961142f92611252565b906111a1565b90565b905081813d8311611464575b61144881836110f9565b81010312610312575160ff811681036103125760ff905f611319565b503d61143e565b6040513d5f823e3d90fd5b82819392503d83116114a7575b61148d81836110f9565b81010312610312575182811681036103125781905f6112dc565b503d611483565b621e84807f00000000000000000000000000000000000000000000000000000000000000008181029181159183041417156111b457611006611510917f00000000000000000000000000000000000000000000000000000000000000006111e1565b73ffffffffffffffffffffffffffffffffffffffff807f00000000000000000000000000000000000000000000000000000000000000001690813b156103125760409182517ff3fef3a30000000000000000000000000000000000000000000000000000000081525f816044818380977f000000000000000000000000000000000000000000000000000000000000000016968760048401528a60248401525af18015610c5757611675575b5060206024918451928380927f70a082310000000000000000000000000000000000000000000000000000000082523060048301525afa91821561166a57908492611635575b501061160c575090565b600490517ff2a7d102000000000000000000000000000000000000000000000000000000008152fd5b9150506020813d602011611662575b81611651602093836110f9565b81010312610312578290515f611602565b3d9150611644565b8351903d90823e3d90fd5b90915067ffffffffffffffff811161113a5782525f9060206115bc565b73ffffffffffffffffffffffffffffffffffffffff80911690604051927fdd62ed3e00000000000000000000000000000000000000000000000000000000845230600485015216918260248201526020938482604481865afa801561146b575f9061180a575b61170292506111e1565b9160405192848401917f095ea7b300000000000000000000000000000000000000000000000000000000835260248501526044840152604483526080830167ffffffffffffffff918482108383111761113a5760c085019283118284101761113a576117ca94865f94938594604052527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af13d15611802573d916117af83611167565b926117bd60405194856110f9565b83523d5f8685013e611839565b80519182159182156117e2575b505090501561031257565b809250819381010312610312570151801515810361031257805f806117d7565b606091611839565b508482813d8311611832575b61182081836110f9565b810103126103125761170291516116f8565b503d611816565b90156118535781511561184a575090565b3b156103125790565b50805190811561031257602001fdfea264697066735822122073812d9b7aa907802fd7fa530a3e0ac98e7dd6434828904899f6bb9ef45ccd5d64736f6c63430008170033",
  "devdoc": {
    "details": "Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.This contract is very similar to Arbitrum_Adapter but it allows the caller to pay for submission fees using a custom gas token. This is required to support certain Arbitrum orbit L2s and L3s.https://docs.arbitrum.io/launch-orbit-chain/how-tos/use-a-custom-gas-token",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_cctpTokenMessenger": "TokenMessenger contract to bridge via CCTP.",
          "_customGasTokenFunder": "Contract that funds the custom gas token.",
          "_l1ArbitrumInbox": "Inbox helper contract to send messages to Arbitrum.",
          "_l1ERC20GatewayRouter": "ERC20 gateway router contract to send tokens to Arbitrum.",
          "_l1Usdc": "USDC address on L1.",
          "_l2GasPrice": "Gas price bid for L2 execution. Should be set conservatively high to avoid stuck messages.",
          "_l2MaxSubmissionCost": "Amount of gas token allocated to pay for the base submission fee. The base submission fee is a parameter unique to Arbitrum retryable transactions. This value is hardcoded and used for all messages sent by this adapter.",
          "_l2RefundL2Address": "L2 address to receive gas refunds on after a message is relayed."
        }
      },
      "getL1CallValue(uint32)": {
        "details": "Should return a value in the same precision as the gas token's precision.",
        "params": {
          "l2GasLimit": "L2 gas limit for the message."
        },
        "returns": {
          "_0": "amount of gas token that this contract needs to hold in order for relayMessage to succeed."
        }
      },
      "relayMessage(address,bytes)": {
        "params": {
          "message": "Data to send to target.",
          "target": "Contract on Arbitrum that will receive message."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of L1 tokens to deposit and L2 tokens to receive.",
          "l1Token": "L1 token to deposit.",
          "l2Token": "L2 token to receive.",
          "to": "Bridge recipient."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "getL1CallValue(uint32)": {
        "notice": "Returns required amount of gas token to send a message via the Inbox."
      },
      "relayMessage(address,bytes)": {
        "notice": "Send cross-chain message to target on Arbitrum.This contract must hold at least getL1CallValue() amount of the custom gas token to send a message via the Inbox successfully, or the message will get stuck."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Bridge tokens to Arbitrum.This contract must hold at least getL1CallValue() amount of ETH or custom gas token to send a message via the Inbox successfully, or the message will get stuck."
      }
    },
    "notice": "Contract containing logic to send messages from L1 to Arbitrum.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
