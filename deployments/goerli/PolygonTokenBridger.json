{
  "address": "0xe7FA30526896E41A66E31A7B409ebCc1Af934ddB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_destination",
          "type": "address"
        },
        {
          "internalType": "contract WETH9",
          "name": "_l1Weth",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_l1ChainId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_l2ChainId",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "destination",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Weth",
      "outputs": [
        {
          "internalType": "contract WETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l2ChainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maticToken",
      "outputs": [
        {
          "internalType": "contract MaticToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "retrieve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract PolygonIERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isWrappedMatic",
          "type": "bool"
        }
      ],
      "name": "send",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3cfd3541221286a65990a61818d1af664d15ba1341f31875c551dc893744f564",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x9A8f92a830A5cB89a3816e3D267CB7791c16b04D",
    "contractAddress": null,
    "transactionIndex": 3,
    "gasUsed": "764873",
    "logsBloom": "0x
    "blockHash": "0xa86db22024502f8e89ae4e449d07b65ad765dce7ed638d7376b8a5f9c86818f2",
    "transactionHash": "0x3cfd3541221286a65990a61818d1af664d15ba1341f31875c551dc893744f564",
    "logs": [],
    "blockNumber": 6586190,
    "cumulativeGasUsed": "1037320",
    "status": 1,
    "byzantium": true
  },
  "args": ["0x69CA24D3084a2eea77E061E2D7aF9b76D107b4f6", "0x60D4dB9b534EF9260a88b0BED6c486fe13E604Fc", 5, 80001],
  "numDeployments": 1,
  "solcInputHash": "c24ed998c83bc53744361729afa7f030",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_destination\",\"type\":\"address\"},{\"internalType\":\"contract WETH9\",\"name\":\"_l1Weth\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_l1ChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_l2ChainId\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"destination\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Weth\",\"outputs\":[{\"internalType\":\"contract WETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l2ChainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maticToken\",\"outputs\":[{\"internalType\":\"contract MaticToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"retrieve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract PolygonIERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isWrappedMatic\",\"type\":\"bool\"}],\"name\":\"send\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Because Polygon only allows withdrawals from a particular address to go to that same address on mainnet, we need to have some sort of contract that can guarantee identical addresses on Polygon and Ethereum. This contract is intended to be completely immutable, so it's guaranteed that the contract on each side is  configured identically as long as it is created via create2. create2 is an alternative creation method that uses a different address determination mechanism from normal create. Normal create: address = hash(deployer_address, deployer_nonce) create2:       address = hash(0xFF, sender, salt, bytecode)  This ultimately allows create2 to generate deterministic addresses that don't depend on the transaction count of the sender.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_destination\":\"Where to send tokens to for this network.\",\"_l1Weth\":\"Ethereum WETH address.\"}},\"retrieve(address)\":{\"params\":{\"token\":\"Token to send to destination.\"}},\"send(address,uint256,bool)\":{\"params\":{\"amount\":\"Amount to bridge.\",\"isWrappedMatic\":\"True if token is WMATIC.\",\"token\":\"Token to bridge.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs Token Bridger contract.\"},\"retrieve(address)\":{\"notice\":\"Called by someone to send tokens to the destination, which should be set to the HubPool.\"},\"send(address,uint256,bool)\":{\"notice\":\"Called by Polygon SpokePool to send tokens over bridge to contract with the same address as this.The caller of this function must approve this contract to spend amount of token.\"}},\"notice\":\"Contract deployed on Ethereum and Polygon to facilitate token transfers from Polygon to the HubPool and back.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PolygonTokenBridger.sol\":\"PolygonTokenBridger\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xbbc8ac883ac3c0078ce5ad3e288fbb3ffcc8a30c3a98c0fda0114d64fc44fca2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2ccf9d2313a313d41a791505f2b5abfdc62191b5d4334f7f7a82691c088a1c87\",\"license\":\"MIT\"},\"contracts/Lockable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title A contract that provides modifiers to prevent reentrancy to state-changing and view-only methods. This contract\\n * is inspired by https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/utils/ReentrancyGuard.sol\\n * and https://github.com/balancer-labs/balancer-core/blob/master/contracts/BPool.sol.\\n * @dev The reason why we use this local contract instead of importing from uma/contracts is because of the addition\\n * of the internal method `functionCallStackOriginatesFromOutsideThisContract` which doesn't exist in the one exported\\n * by uma/contracts.\\n */\\ncontract Lockable {\\n    bool internal _notEntered;\\n\\n    constructor() {\\n        // Storing an initial non-zero value makes deployment a bit more expensive, but in exchange the refund on every\\n        // call to nonReentrant will be lower in amount. Since refunds are capped to a percentage of the total\\n        // transaction's gas, it is best to keep them low in cases like this one, to increase the likelihood of the full\\n        // refund coming into effect.\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a nonReentrant function from another nonReentrant function is not supported. It is possible to\\n     * prevent this from happening by making the nonReentrant function external, and making it call a private\\n     * function that does the actual state modification.\\n     */\\n    modifier nonReentrant() {\\n        _preEntranceCheck();\\n        _preEntranceSet();\\n        _;\\n        _postEntranceReset();\\n    }\\n\\n    /**\\n     * @dev Designed to prevent a view-only method from being re-entered during a call to a nonReentrant() state-changing method.\\n     */\\n    modifier nonReentrantView() {\\n        _preEntranceCheck();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is currently in a non-entered state, meaning that the origination of the call\\n     * came from outside the contract. This is relevant with fallback/receive methods to see if the call came from ETH\\n     * being dropped onto the contract externally or due to ETH dropped on the the contract from within a method in this\\n     * contract, such as unwrapping WETH to ETH within the contract.\\n     */\\n    function functionCallStackOriginatesFromOutsideThisContract() internal view returns (bool) {\\n        return _notEntered;\\n    }\\n\\n    // Internal methods are used to avoid copying the require statement's bytecode to every nonReentrant() method.\\n    // On entry into a function, _preEntranceCheck() should always be called to check if the function is being\\n    // re-entered. Then, if the function modifies state, it should call _postEntranceSet(), perform its logic, and\\n    // then call _postEntranceReset().\\n    // View-only methods can simply call _preEntranceCheck() to make sure that it is not being re-entered.\\n    function _preEntranceCheck() internal view {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_notEntered, \\\"ReentrancyGuard: reentrant call\\\");\\n    }\\n\\n    function _preEntranceSet() internal {\\n        // Any calls to nonReentrant after this point will fail\\n        _notEntered = false;\\n    }\\n\\n    function _postEntranceReset() internal {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _notEntered = true;\\n    }\\n}\\n\",\"keccak256\":\"0xef490be5cb859c97c6f600f3b0db0d50c6e18f334d3c74c6d9e693a260eaec3e\",\"license\":\"AGPL-3.0-only\"},\"contracts/PolygonTokenBridger.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Lockable.sol\\\";\\nimport \\\"./interfaces/WETH9.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n// ERC20s (on polygon) compatible with polygon's bridge have a withdraw method.\\ninterface PolygonIERC20 is IERC20 {\\n    function withdraw(uint256 amount) external;\\n}\\n\\ninterface MaticToken {\\n    function withdraw(uint256 amount) external payable;\\n}\\n\\n/**\\n * @notice Contract deployed on Ethereum and Polygon to facilitate token transfers from Polygon to the HubPool and back.\\n * @dev Because Polygon only allows withdrawals from a particular address to go to that same address on mainnet, we need to\\n * have some sort of contract that can guarantee identical addresses on Polygon and Ethereum. This contract is intended\\n * to be completely immutable, so it's guaranteed that the contract on each side is  configured identically as long as\\n * it is created via create2. create2 is an alternative creation method that uses a different address determination\\n * mechanism from normal create.\\n * Normal create: address = hash(deployer_address, deployer_nonce)\\n * create2:       address = hash(0xFF, sender, salt, bytecode)\\n *  This ultimately allows create2 to generate deterministic addresses that don't depend on the transaction count of the\\n * sender.\\n */\\ncontract PolygonTokenBridger is Lockable {\\n    using SafeERC20 for PolygonIERC20;\\n    using SafeERC20 for IERC20;\\n\\n    // Gas token for Polygon.\\n    MaticToken public constant maticToken = MaticToken(0x0000000000000000000000000000000000001010);\\n\\n    // Should be set to HubPool on Ethereum, or unused on Polygon.\\n    address public immutable destination;\\n\\n    // WETH contract on Ethereum.\\n    WETH9 public immutable l1Weth;\\n\\n    // Chain id for the L1 that this contract is deployed on or communicates with.\\n    // For example: if this contract were meant to facilitate transfers from polygon to mainnet, this value would be\\n    // the mainnet chainId 1.\\n    uint256 public immutable l1ChainId;\\n\\n    // Chain id for the L2 that this contract is deployed on or communicates with.\\n    // For example: if this contract were meant to facilitate transfers from polygon to mainnet, this value would be\\n    // the polygon chainId 137.\\n    uint256 public immutable l2ChainId;\\n\\n    modifier onlyChainId(uint256 chainId) {\\n        _requireChainId(chainId);\\n        _;\\n    }\\n\\n    /**\\n     * @notice Constructs Token Bridger contract.\\n     * @param _destination Where to send tokens to for this network.\\n     * @param _l1Weth Ethereum WETH address.\\n     */\\n    constructor(\\n        address _destination,\\n        WETH9 _l1Weth,\\n        uint256 _l1ChainId,\\n        uint256 _l2ChainId\\n    ) {\\n        destination = _destination;\\n        l1Weth = _l1Weth;\\n        l1ChainId = _l1ChainId;\\n        l2ChainId = _l2ChainId;\\n    }\\n\\n    /**\\n     * @notice Called by Polygon SpokePool to send tokens over bridge to contract with the same address as this.\\n     * @notice The caller of this function must approve this contract to spend amount of token.\\n     * @param token Token to bridge.\\n     * @param amount Amount to bridge.\\n     * @param isWrappedMatic True if token is WMATIC.\\n     */\\n    function send(\\n        PolygonIERC20 token,\\n        uint256 amount,\\n        bool isWrappedMatic\\n    ) public nonReentrant onlyChainId(l2ChainId) {\\n        token.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        // In the wMatic case, this unwraps. For other ERC20s, this is the burn/send action.\\n        token.withdraw(amount);\\n\\n        // This takes the token that was withdrawn and calls withdraw on the \\\"native\\\" ERC20.\\n        if (isWrappedMatic) maticToken.withdraw{ value: amount }(amount);\\n    }\\n\\n    /**\\n     * @notice Called by someone to send tokens to the destination, which should be set to the HubPool.\\n     * @param token Token to send to destination.\\n     */\\n    function retrieve(IERC20 token) public nonReentrant onlyChainId(l1ChainId) {\\n        token.safeTransfer(destination, token.balanceOf(address(this)));\\n    }\\n\\n    receive() external payable {\\n        if (functionCallStackOriginatesFromOutsideThisContract()) {\\n            // This should only happen on the mainnet side where ETH is sent to the contract directly by the bridge.\\n            _requireChainId(l1ChainId);\\n            l1Weth.deposit{ value: address(this).balance }();\\n        } else {\\n            // This should only happen on the l2 side where matic is unwrapped by this contract.\\n            _requireChainId(l2ChainId);\\n        }\\n    }\\n\\n    function _requireChainId(uint256 chainId) internal view {\\n        require(block.chainid == chainId, \\\"Cannot run method on this chain\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x8a61c3de15597d167a131e0eed568f82cfcbb3e95c9c5f4c1c6c38fa00b4e2ec\",\"license\":\"AGPL-3.0-only\"},\"contracts/interfaces/WETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\npragma solidity ^0.8.0;\\n\\ninterface WETH9 {\\n    function withdraw(uint256 wad) external;\\n\\n    function deposit() external payable;\\n\\n    function balanceOf(address guy) external view returns (uint256 wad);\\n\\n    function transfer(address guy, uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x7b444d0840b1f76eee9bf39d74830f70644395613b96cce2d80fc50785a82eaa\",\"license\":\"GPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x61010060405234801561001157600080fd5b50604051610d9f380380610d9f83398101604081905261003091610078565b6000805460ff191660011790556001600160a01b039384166080529190921660a05260c09190915260e0526100c0565b6001600160a01b038116811461007557600080fd5b50565b6000806000806080858703121561008e57600080fd5b845161009981610060565b60208601519094506100aa81610060565b6040860151606090960151949790965092505050565b60805160a05160c05160e051610c7e610121600039600081816101300152818161027f01526104c101526000818160890152818161018b015261035f01526000818160af01526101d201526000818161022b01526103b90152610c7e6000f3fe6080604052600436106100745760003560e01c8063b269681d1161004e578063b269681d14610219578063d124dc4f1461024d578063d6ae3cd51461026d578063dc354296146102a157600080fd5b80630a79309b1461015957806312622e5b14610179578063146bf4b1146101c057600080fd5b366101545760005460ff161561012b576100ad7f00000000000000000000000000000000000000000000000000000000000000006102b7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561011557600080fd5b505af1158015610129573d6000803e3d6000fd5b005b6101297f00000000000000000000000000000000000000000000000000000000000000006102b7565b600080fd5b34801561016557600080fd5b50610129610174366004610b0c565b610328565b34801561018557600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101cc57600080fd5b506101f47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b7565b34801561022557600080fd5b506101f47f000000000000000000000000000000000000000000000000000000000000000081565b34801561025957600080fd5b50610129610268366004610b37565b61048a565b34801561027957600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ad57600080fd5b506101f461101081565b804614610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f43616e6e6f742072756e206d6574686f64206f6e207468697320636861696e0060448201526064015b60405180910390fd5b50565b610330610636565b61035d600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f0000000000000000000000000000000000000000000000000000000000000000610387816102b7565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610459907f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610b79565b73ffffffffffffffffffffffffffffffffffffffff851691906106a4565b50610325600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b610492610636565b6104bf600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f00000000000000000000000000000000000000000000000000000000000000006104e9816102b7565b61050b73ffffffffffffffffffffffffffffffffffffffff8516333086610778565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90602401600060405180830381600087803b15801561057357600080fd5b505af1158015610587573d6000803e3d6000fd5b505050508115610600576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905261101090632e1a7d4d9085906024016000604051808303818588803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b50505050505b50610631600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b505050565b60005460ff166106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161031c565b565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106319084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526107dc565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107d69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016106f6565b50505050565b600061083e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108e89092919063ffffffff16565b805190915015610631578080602001905181019061085c9190610b92565b610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161031c565b60606108f78484600085610901565b90505b9392505050565b606082471015610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161031c565b73ffffffffffffffffffffffffffffffffffffffff85163b610a11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161031c565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a3a9190610bdb565b60006040518083038185875af1925050503d8060008114610a77576040519150601f19603f3d011682016040523d82523d6000602084013e610a7c565b606091505b5091509150610a8c828286610a97565b979650505050505050565b60608315610aa65750816108fa565b825115610ab65782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031c9190610bf7565b73ffffffffffffffffffffffffffffffffffffffff8116811461032557600080fd5b600060208284031215610b1e57600080fd5b81356108fa81610aea565b801515811461032557600080fd5b600080600060608486031215610b4c57600080fd5b8335610b5781610aea565b9250602084013591506040840135610b6e81610b29565b809150509250925092565b600060208284031215610b8b57600080fd5b5051919050565b600060208284031215610ba457600080fd5b81516108fa81610b29565b60005b83811015610bca578181015183820152602001610bb2565b838111156107d65750506000910152565b60008251610bed818460208701610baf565b9190910192915050565b6020815260008251806020840152610c16816040850160208701610baf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220678e869f028f2c43d117b4ad2ce12d1c40c4fbcadb0f9aec382923e08773dc0864736f6c634300080d0033",
  "deployedBytecode": "0x6080604052600436106100745760003560e01c8063b269681d1161004e578063b269681d14610219578063d124dc4f1461024d578063d6ae3cd51461026d578063dc354296146102a157600080fd5b80630a79309b1461015957806312622e5b14610179578063146bf4b1146101c057600080fd5b366101545760005460ff161561012b576100ad7f00000000000000000000000000000000000000000000000000000000000000006102b7565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0476040518263ffffffff1660e01b81526004016000604051808303818588803b15801561011557600080fd5b505af1158015610129573d6000803e3d6000fd5b005b6101297f00000000000000000000000000000000000000000000000000000000000000006102b7565b600080fd5b34801561016557600080fd5b50610129610174366004610b0c565b610328565b34801561018557600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b6040519081526020015b60405180910390f35b3480156101cc57600080fd5b506101f47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101b7565b34801561022557600080fd5b506101f47f000000000000000000000000000000000000000000000000000000000000000081565b34801561025957600080fd5b50610129610268366004610b37565b61048a565b34801561027957600080fd5b506101ad7f000000000000000000000000000000000000000000000000000000000000000081565b3480156102ad57600080fd5b506101f461101081565b804614610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f43616e6e6f742072756e206d6574686f64206f6e207468697320636861696e0060448201526064015b60405180910390fd5b50565b610330610636565b61035d600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f0000000000000000000000000000000000000000000000000000000000000000610387816102b7565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152610459907f00000000000000000000000000000000000000000000000000000000000000009073ffffffffffffffffffffffffffffffffffffffff8516906370a0823190602401602060405180830381865afa158015610417573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043b9190610b79565b73ffffffffffffffffffffffffffffffffffffffff851691906106a4565b50610325600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b610492610636565b6104bf600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b7f00000000000000000000000000000000000000000000000000000000000000006104e9816102b7565b61050b73ffffffffffffffffffffffffffffffffffffffff8516333086610778565b6040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905273ffffffffffffffffffffffffffffffffffffffff851690632e1a7d4d90602401600060405180830381600087803b15801561057357600080fd5b505af1158015610587573d6000803e3d6000fd5b505050508115610600576040517f2e1a7d4d0000000000000000000000000000000000000000000000000000000081526004810184905261101090632e1a7d4d9085906024016000604051808303818588803b1580156105e657600080fd5b505af11580156105fa573d6000803e3d6000fd5b50505050505b50610631600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b505050565b60005460ff166106a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604482015260640161031c565b565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526106319084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526107dc565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526107d69085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016106f6565b50505050565b600061083e826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166108e89092919063ffffffff16565b805190915015610631578080602001905181019061085c9190610b92565b610631576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161031c565b60606108f78484600085610901565b90505b9392505050565b606082471015610993576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161031c565b73ffffffffffffffffffffffffffffffffffffffff85163b610a11576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161031c565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610a3a9190610bdb565b60006040518083038185875af1925050503d8060008114610a77576040519150601f19603f3d011682016040523d82523d6000602084013e610a7c565b606091505b5091509150610a8c828286610a97565b979650505050505050565b60608315610aa65750816108fa565b825115610ab65782518084602001fd5b816040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031c9190610bf7565b73ffffffffffffffffffffffffffffffffffffffff8116811461032557600080fd5b600060208284031215610b1e57600080fd5b81356108fa81610aea565b801515811461032557600080fd5b600080600060608486031215610b4c57600080fd5b8335610b5781610aea565b9250602084013591506040840135610b6e81610b29565b809150509250925092565b600060208284031215610b8b57600080fd5b5051919050565b600060208284031215610ba457600080fd5b81516108fa81610b29565b60005b83811015610bca578181015183820152602001610bb2565b838111156107d65750506000910152565b60008251610bed818460208701610baf565b9190910192915050565b6020815260008251806020840152610c16816040850160208701610baf565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea2646970667358221220678e869f028f2c43d117b4ad2ce12d1c40c4fbcadb0f9aec382923e08773dc0864736f6c634300080d0033",
  "devdoc": {
    "details": "Because Polygon only allows withdrawals from a particular address to go to that same address on mainnet, we need to have some sort of contract that can guarantee identical addresses on Polygon and Ethereum. This contract is intended to be completely immutable, so it's guaranteed that the contract on each side is  configured identically as long as it is created via create2. create2 is an alternative creation method that uses a different address determination mechanism from normal create. Normal create: address = hash(deployer_address, deployer_nonce) create2:       address = hash(0xFF, sender, salt, bytecode)  This ultimately allows create2 to generate deterministic addresses that don't depend on the transaction count of the sender.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_destination": "Where to send tokens to for this network.",
          "_l1Weth": "Ethereum WETH address."
        }
      },
      "retrieve(address)": {
        "params": {
          "token": "Token to send to destination."
        }
      },
      "send(address,uint256,bool)": {
        "params": {
          "amount": "Amount to bridge.",
          "isWrappedMatic": "True if token is WMATIC.",
          "token": "Token to bridge."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs Token Bridger contract."
      },
      "retrieve(address)": {
        "notice": "Called by someone to send tokens to the destination, which should be set to the HubPool."
      },
      "send(address,uint256,bool)": {
        "notice": "Called by Polygon SpokePool to send tokens over bridge to contract with the same address as this.The caller of this function must approve this contract to spend amount of token."
      }
    },
    "notice": "Contract deployed on Ethereum and Polygon to facilitate token transfers from Polygon to the HubPool and back.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7084,
        "contract": "contracts/PolygonTokenBridger.sol:PolygonTokenBridger",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      }
    }
  }
}
