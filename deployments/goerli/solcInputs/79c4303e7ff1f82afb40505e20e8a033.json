{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "contracts/chain-adapters/interfaces/AdapterInterface.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/**\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\n * This interface is implemented by an adapter contract that is deployed on L1.\n */\n\ninterface AdapterInterface {\n    event MessageRelayed(address target, bytes message);\n\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\n\n    /**\n     * @notice Send message to `target` on L2.\n     * @dev This method is marked payable because relaying the message might require a fee\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\n     * to the target contract on L2.\n     * @param target L2 address to send message to.\n     * @param message Message to send to `target`.\n     */\n    function relayMessage(address target, bytes calldata message) external payable;\n\n    /**\n     * @notice Send `amount` of `l1Token` to `to` on L2. `l2Token` is the L2 address equivalent of `l1Token`.\n     * @dev This method is marked payable because relaying the message might require a fee\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\n     * to the target contract on L2.\n     * @param l1Token L1 token to bridge.\n     * @param l2Token L2 token to receive.\n     * @param amount Amount of `l1Token` to bridge.\n     * @param to Bridge recipient.\n     */\n    function relayTokens(\n        address l1Token,\n        address l2Token,\n        uint256 amount,\n        address to\n    ) external payable;\n}\n"
    },
    "contracts/chain-adapters/Linea_Adapter.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\nimport \"./interfaces/AdapterInterface.sol\";\nimport \"../external/interfaces/WETH9Interface.sol\";\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ninterface IMessageService {\n    /**\n     * @dev Emitted when a message is sent.\n     * @dev We include the message hash to save hashing costs on the rollup.\n     */\n    event MessageSent(\n        address indexed _from,\n        address indexed _to,\n        uint256 _fee,\n        uint256 _value,\n        uint256 _nonce,\n        bytes _calldata,\n        bytes32 indexed _messageHash\n    );\n\n    /**\n     * @dev Emitted when a message is claimed.\n     */\n    event MessageClaimed(bytes32 indexed _messageHash);\n\n    /**\n     * @dev Thrown when fees are lower than the minimum fee.\n     */\n    error FeeTooLow();\n\n    /**\n     * @dev Thrown when fees are lower than value.\n     */\n    error ValueShouldBeGreaterThanFee();\n\n    /**\n     * @dev Thrown when the value sent is less than the fee.\n     * @dev Value to forward on is msg.value - _fee.\n     */\n    error ValueSentTooLow();\n\n    /**\n     * @dev Thrown when the destination address reverts.\n     */\n    error MessageSendingFailed(address destination);\n\n    /**\n     * @dev Thrown when the destination address reverts.\n     */\n    error FeePaymentFailed(address recipient);\n\n    /**\n     * @notice Sends a message for transporting from the given chain.\n     * @dev This function should be called with a msg.value = _value + _fee. The fee will be paid on the destination chain.\n     * @param _to The destination address on the destination chain.\n     * @param _fee The message service fee on the origin chain.\n     * @param _calldata The calldata used by the destination message service to call the destination contract.\n     */\n    function sendMessage(\n        address _to,\n        uint256 _fee,\n        bytes calldata _calldata\n    ) external payable;\n\n    /**\n     * @notice Deliver a message to the destination chain.\n     * @notice Is called automatically by the Postman, dApp or end user.\n     * @param _from The msg.sender calling the origin message service.\n     * @param _to The destination address on the destination chain.\n     * @param _value The value to be transferred to the destination address.\n     * @param _fee The message service fee on the origin chain.\n     * @param _feeRecipient Address that will receive the fees.\n     * @param _calldata The calldata used by the destination message service to call/forward to the destination contract.\n     * @param _nonce Unique message number.\n     */\n    function claimMessage(\n        address _from,\n        address _to,\n        uint256 _fee,\n        uint256 _value,\n        address payable _feeRecipient,\n        bytes calldata _calldata,\n        uint256 _nonce\n    ) external;\n\n    /**\n     * @notice Returns the original sender of the message on the origin layer.\n     * @return The original sender of the message on the origin layer.\n     */\n    function sender() external view returns (address);\n}\n\ninterface ITokenBridge {\n    event TokenReserved(address indexed token);\n    event CustomContractSet(address indexed nativeToken, address indexed customContract, address indexed setBy);\n    event BridgingInitiated(address indexed sender, address recipient, address indexed token, uint256 indexed amount);\n    event BridgingFinalized(\n        address indexed nativeToken,\n        address indexed bridgedToken,\n        uint256 indexed amount,\n        address recipient\n    );\n    event NewToken(address indexed token);\n    event NewTokenDeployed(address indexed bridgedToken, address indexed nativeToken);\n    event RemoteTokenBridgeSet(address indexed remoteTokenBridge, address indexed setBy);\n    event TokenDeployed(address indexed token);\n    event DeploymentConfirmed(address[] tokens, address indexed confirmedBy);\n    event MessageServiceUpdated(\n        address indexed newMessageService,\n        address indexed oldMessageService,\n        address indexed setBy\n    );\n\n    error ReservedToken(address token);\n    error RemoteTokenBridgeAlreadySet(address remoteTokenBridge);\n    error AlreadyBridgedToken(address token);\n    error InvalidPermitData(bytes4 permitData, bytes4 permitSelector);\n    error PermitNotFromSender(address owner);\n    error PermitNotAllowingBridge(address spender);\n    error ZeroAmountNotAllowed(uint256 amount);\n    error NotReserved(address token);\n    error TokenNotDeployed(address token);\n    error TokenNativeOnOtherLayer(address token);\n    error AlreadyBrigedToNativeTokenSet(address token);\n    error StatusAddressNotAllowed(address token);\n\n    /**\n     * @notice This function is the single entry point to bridge tokens to the\n     *   other chain, both for native and already bridged tokens. You can use it\n     *   to bridge any ERC20. If the token is bridged for the first time an ERC20\n     *   (BridgedToken.sol) will be automatically deployed on the target chain.\n     * @dev User should first allow the bridge to transfer tokens on his behalf.\n     *   Alternatively, you can use `bridgeTokenWithPermit` to do so in a single\n     *   transaction. If you want the transfer to be automatically executed on the\n     *   destination chain. You should send enough ETH to pay the postman fees.\n     *   Note that Linea can reserve some tokens (which use a dedicated bridge).\n     *   In this case, the token cannot be bridged. Linea can only reserve tokens\n     *   that have not been bridged yet.\n     *   Linea can pause the bridge for security reason. In this case new bridge\n     *   transaction would revert.\n     * @param _token The address of the token to be bridged.\n     * @param _amount The amount of the token to be bridged.\n     * @param _recipient The address that will receive the tokens on the other chain.\n     */\n    function bridgeToken(\n        address _token,\n        uint256 _amount,\n        address _recipient\n    ) external payable;\n\n    /**\n     * @notice Similar to `bridgeToken` function but allows to pass additional\n     *   permit data to do the ERC20 approval in a single transaction.\n     * @param _token The address of the token to be bridged.\n     * @param _amount The amount of the token to be bridged.\n     * @param _recipient The address that will receive the tokens on the other chain.\n     * @param _permitData The permit data for the token, if applicable.\n     */\n    function bridgeTokenWithPermit(\n        address _token,\n        uint256 _amount,\n        address _recipient,\n        bytes calldata _permitData\n    ) external payable;\n\n    /**\n     * @dev It can only be called from the Message Service. To finalize the bridging\n     *   process, a user or postmen needs to use the `claimMessage` function of the\n     *   Message Service to trigger the transaction.\n     * @param _nativeToken The address of the token on its native chain.\n     * @param _amount The amount of the token to be received.\n     * @param _recipient The address that will receive the tokens.\n     * @param _chainId The source chainId or target chaindId for this token\n     * @param _tokenMetadata Additional data used to deploy the bridged token if it\n     *   doesn't exist already.\n     */\n    function completeBridging(\n        address _nativeToken,\n        uint256 _amount,\n        address _recipient,\n        uint256 _chainId,\n        bytes calldata _tokenMetadata\n    ) external;\n\n    /**\n     * @dev Change the address of the Message Service.\n     * @param _messageService The address of the new Message Service.\n     */\n    function setMessageService(address _messageService) external;\n\n    /**\n     * @dev It can only be called from the Message Service. To change the status of\n     *   the native tokens to DEPLOYED meaning they have been deployed on the other chain\n     *   a user or postman needs to use the `claimMessage` function of the\n     *   Message Service to trigger the transaction.\n     * @param _nativeTokens The addresses of the native tokens.\n     */\n    function setDeployed(address[] memory _nativeTokens) external;\n\n    /**\n     * @dev Sets the address of the remote token bridge. Can only be called once.\n     * @param _remoteTokenBridge The address of the remote token bridge to be set.\n     */\n    function setRemoteTokenBridge(address _remoteTokenBridge) external;\n\n    /**\n     * @dev Removes a token from the reserved list.\n     * @param _token The address of the token to be removed from the reserved list.\n     */\n    function removeReserved(address _token) external;\n\n    /**\n     * @dev Linea can set a custom ERC20 contract for specific ERC20.\n     *   For security purpose, Linea can only call this function if the token has\n     *   not been bridged yet.\n     * @param _nativeToken address of the token on the source chain.\n     * @param _targetContract address of the custom contract.\n     */\n    function setCustomContract(address _nativeToken, address _targetContract) external;\n\n    /**\n     * @dev Pause the contract, can only be called by the owner.\n     */\n    function pause() external;\n\n    /**\n     * @dev Unpause the contract, can only be called by the owner.\n     */\n    function unpause() external;\n}\n\ninterface IUSDCBridge {\n    event MessageServiceUpdated(address indexed oldAddress, address indexed newAddress);\n    event RemoteUSDCBridgeSet(address indexed newRemoteUSDCBridge);\n    event Deposited(address indexed depositor, uint256 amount, address indexed to);\n    event ReceivedFromOtherLayer(address indexed recipient, uint256 indexed amount);\n\n    error NoBurnCapabilities(address addr);\n    error AmountTooBig(uint256 amount, uint256 limit);\n    error NotMessageService(address addr, address messageService);\n    error ZeroAmountNotAllowed(uint256 amount);\n    error NotFromRemoteUSDCBridge(address sender, address remoteUSDCBridge);\n    error ZeroAddressNotAllowed(address addr);\n    error RemoteUSDCBridgeNotSet();\n    error SenderBalanceTooLow(uint256 amount, uint256 balance);\n    error SameMessageServiceAddr(address messageService);\n    error RemoteUSDCBridgeAlreadySet(address remoteUSDCBridge);\n\n    /**\n     * @dev Sends the sender's USDC from L1 to L2, locks the USDC sent\n     * in this contract and sends a message to the message bridge\n     * contract to mint the equivalent USDC on L2\n     * @param amount The amount of USDC to send\n     */\n    function deposit(uint256 amount) external;\n\n    /**\n     * @dev Sends the sender's USDC from L1 to the recipient on L2, locks the USDC sent\n     * in this contract and sends a message to the message bridge\n     * contract to mint the equivalent USDC on L2\n     * @param amount The amount of USDC to send\n     * @param to The recipient's address to receive the funds\n     */\n    function depositTo(uint256 amount, address to) external payable;\n\n    /**\n     * @dev This function is called by the message bridge when transferring USDC from L2 to L1\n     * It burns the USDC on L2 and unlocks the equivalent USDC from this contract to the recipient\n     * @param recipient The recipient to receive the USDC on L1\n     * @param amount The amount of USDC to receive\n     */\n    function receiveFromOtherLayer(address recipient, uint256 amount) external;\n}\n\n// solhint-disable-next-line contract-name-camelcase\ncontract Linea_Adapter is AdapterInterface {\n    using SafeERC20 for IERC20;\n\n    WETH9Interface public immutable l1Weth;\n    IERC20 public immutable l1Usdc;\n\n    IMessageService public immutable l1MessageService;\n    ITokenBridge public immutable l1TokenBridge;\n    IUSDCBridge public immutable l1UsdcBridge;\n\n    /**\n     * @notice Constructs new Adapter.\n     * @param _l1Weth WETH address on L1.\n     * @param _l1Usdc USDC address on L1.\n     * @param _l1MessageService Canonical message service contract on L1.\n     * @param _l1TokenBridge Canonical token bridge contract on L1.\n     * @param _l1UsdcBridge L1 USDC Bridge to ConsenSys's L2 Linea.\n     */\n    constructor(\n        WETH9Interface _l1Weth,\n        IERC20 _l1Usdc,\n        IMessageService _l1MessageService,\n        ITokenBridge _l1TokenBridge,\n        IUSDCBridge _l1UsdcBridge\n    ) {\n        l1Weth = _l1Weth;\n        l1Usdc = _l1Usdc;\n        l1MessageService = _l1MessageService;\n        l1TokenBridge = _l1TokenBridge;\n        l1UsdcBridge = _l1UsdcBridge;\n    }\n\n    /**\n     * @notice Send cross-chain message to target on Linea.\n     * @param target Contract on Linea that will receive message.\n     * @param message Data to send to target.\n     */\n    function relayMessage(address target, bytes calldata message) external payable override {\n        l1MessageService.sendMessage{ value: msg.value }(target, 0, message);\n        emit MessageRelayed(target, message);\n    }\n\n    /**\n     * @notice Bridge tokens to Linea.\n     * @param l1Token L1 token to deposit.\n     * @param l2Token L2 token to receive.\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\n     * @param to Bridge recipient.\n     */\n    function relayTokens(\n        address l1Token,\n        address l2Token,\n        uint256 amount,\n        address to\n    ) external payable override {\n        // If the l1Token is WETH then unwrap it to ETH then send the ETH directly\n        // via the Canoncial Message Service.\n        if (l1Token == address(l1Weth)) {\n            l1Weth.withdraw(amount);\n            l1MessageService.sendMessage{ value: amount }(to, 0, \"\");\n        }\n        // If the l1Token is USDC, then we need sent it via the USDC Bridge.\n        else if (l1Token == address(l1Usdc)) {\n            IERC20(l1Token).safeIncreaseAllowance(address(l1UsdcBridge), amount);\n            l1UsdcBridge.depositTo(amount, to);\n        }\n        // For other tokens, we can use the Canonical Token Bridge.\n        else {\n            IERC20(l1Token).safeIncreaseAllowance(address(l1TokenBridge), amount);\n            l1TokenBridge.bridgeToken(l1Token, amount, to);\n        }\n\n        emit TokensRelayed(l1Token, l2Token, amount, to);\n    }\n}\n"
    },
    "contracts/external/interfaces/WETH9Interface.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity ^0.8.0;\n\n/**\n * @notice Interface for the WETH9 contract.\n */\ninterface WETH9Interface {\n    /**\n     * @notice Burn Wrapped Ether and receive native Ether.\n     * @param wad Amount of WETH to unwrap and send to caller.\n     */\n    function withdraw(uint256 wad) external;\n\n    /**\n     * @notice Lock native Ether and mint Wrapped Ether ERC20\n     * @dev msg.value is amount of Wrapped Ether to mint/Ether to lock.\n     */\n    function deposit() external payable;\n\n    /**\n     * @notice Get balance of WETH held by `guy`.\n     * @param guy Address to get balance of.\n     * @return wad Amount of WETH held by `guy`.\n     */\n    function balanceOf(address guy) external view returns (uint256 wad);\n\n    /**\n     * @notice Transfer `wad` of WETH from caller to `guy`.\n     * @param guy Address to send WETH to.\n     * @param wad Amount of WETH to send.\n     * @return ok True if transfer succeeded.\n     */\n    function transfer(address guy, uint256 wad) external returns (bool);\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1000000
    },
    "viaIR": true,
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": ["ast"]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}
