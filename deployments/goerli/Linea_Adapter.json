{
  "address": "0x84e14730cf11d7e2a0ac448b8a88d8e02ef296fd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "_l1Weth",
          "type": "address"
        },
        {
          "internalType": "contract IMessageService",
          "name": "_l1MessageService",
          "type": "address"
        },
        {
          "internalType": "contract ITokenBridge",
          "name": "_l1TokenBridge",
          "type": "address"
        },
        {
          "internalType": "contract IUSDCBridge",
          "name": "_l1UsdcBridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "l1MessageService",
      "outputs": [
        {
          "internalType": "contract IMessageService",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1TokenBridge",
      "outputs": [
        {
          "internalType": "contract ITokenBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1UsdcBridge",
      "outputs": [
        {
          "internalType": "contract IUSDCBridge",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Weth",
      "outputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d92c02a37fdc5ce0d043b4ecf4970aa034efc282a5f0028563860ce236f1b25",
  "receipt": {
    "to": null,
    "from": "0x52a79c01f10e6ea89ded5c3f42f3a0ec362ed090",
    "contractAddress": "0x84e14730cf11d7e2a0ac448b8a88d8e02ef296fd",
    "transactionIndex": "0x4f",
    "gasUsed": "0xbe8d4",
    "logsBloom": "0x
    "blockHash": "0x66ad660630b0780404298644e97571438ee2506442a2b9dc1fe29cc8a8ddb0c0",
    "transactionHash": "0xd2a45d2d43227b0ae384045a8cbb8cfe982f5de6d9ee10caa482e325de89f2b3",
    "logs": [],
    "blockNumber": "0x9cfd0e",
    "cumulativeGasUsed": "0xc26c47",
    "status": "0x1"
  },
  "args": [
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0x70BaD09280FD342D02fe64119779BC1f0791BAC2",
    "0x5506A3805fB8A58Fa58248CC52d2b06D92cA94e6",
    "0x32D123756d32d3eD6580935f8edF416e57b940f4"
  ],
  "numDeployments": 5,
  "solcInputHash": "96f5ce663eb93e0ed9ef702816bce76e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"_l1Weth\",\"type\":\"address\"},{\"internalType\":\"contract IMessageService\",\"name\":\"_l1MessageService\",\"type\":\"address\"},{\"internalType\":\"contract ITokenBridge\",\"name\":\"_l1TokenBridge\",\"type\":\"address\"},{\"internalType\":\"contract IUSDCBridge\",\"name\":\"_l1UsdcBridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"l1MessageService\",\"outputs\":[{\"internalType\":\"contract IMessageService\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1TokenBridge\",\"outputs\":[{\"internalType\":\"contract ITokenBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1UsdcBridge\",\"outputs\":[{\"internalType\":\"contract IUSDCBridge\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Weth\",\"outputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_l1MessageService\":\"Canonical message service contract on L1.\",\"_l1TokenBridge\":\"Canonical token bridge contract on L1.\",\"_l1UsdcBridge\":\"L1 USDC Bridge to ConsenSys's L2 Linea.\",\"_l1Weth\":\"WETH address on L1.\"}},\"relayMessage(address,bytes)\":{\"params\":{\"message\":\"Data to send to target.\",\"target\":\"Contract on Linea that will receive message.\"}},\"relayTokens(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of L1 tokens to deposit and L2 tokens to receive.\",\"l1Token\":\"L1 token to deposit.\",\"l2Token\":\"L2 token to receive.\",\"to\":\"Bridge recipient.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send cross-chain message to target on Linea.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Bridge tokens to Linea.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Linea_Adapter.sol\":\"Linea_Adapter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/chain-adapters/Linea_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/AdapterInterface.sol\\\";\\nimport \\\"../external/interfaces/WETH9Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\n/**\\n * @notice Interface of Linea's Canonical Message Service\\n * See https://github.com/Consensys/linea-contracts/blob/3cf85529fd4539eb06ba998030c37e47f98c528a/contracts/interfaces/IMessageService.sol\\n */\\ninterface IMessageService {\\n    /**\\n     * @notice Sends a message for transporting from the given chain.\\n     * @dev This function should be called with a msg.value = _value + _fee. The fee will be paid on the destination chain.\\n     * @param _to The destination address on the destination chain.\\n     * @param _fee The message service fee on the origin chain.\\n     * @param _calldata The calldata used by the destination message service to call the destination contract.\\n     */\\n    function sendMessage(\\n        address _to,\\n        uint256 _fee,\\n        bytes calldata _calldata\\n    ) external payable;\\n}\\n\\n/**\\n * @notice Interface of Linea's Canonical Token Bridge\\n * See https://github.com/Consensys/linea-contracts/blob/3cf85529fd4539eb06ba998030c37e47f98c528a/contracts/tokenBridge/interfaces/ITokenBridge.sol\\n */\\ninterface ITokenBridge {\\n    /**\\n     * @notice This function is the single entry point to bridge tokens to the\\n     *   other chain, both for native and already bridged tokens. You can use it\\n     *   to bridge any ERC20. If the token is bridged for the first time an ERC20\\n     *   (BridgedToken.sol) will be automatically deployed on the target chain.\\n     * @dev User should first allow the bridge to transfer tokens on his behalf.\\n     *   Alternatively, you can use `bridgeTokenWithPermit` to do so in a single\\n     *   transaction. If you want the transfer to be automatically executed on the\\n     *   destination chain. You should send enough ETH to pay the postman fees.\\n     *   Note that Linea can reserve some tokens (which use a dedicated bridge).\\n     *   In this case, the token cannot be bridged. Linea can only reserve tokens\\n     *   that have not been bridged yet.\\n     *   Linea can pause the bridge for security reason. In this case new bridge\\n     *   transaction would revert.\\n     * @param _token The address of the token to be bridged.\\n     * @param _amount The amount of the token to be bridged.\\n     * @param _recipient The address that will receive the tokens on the other chain.\\n     */\\n    function bridgeToken(\\n        address _token,\\n        uint256 _amount,\\n        address _recipient\\n    ) external payable;\\n}\\n\\ninterface IUSDCBridge {\\n    function usdc() external view returns (address);\\n\\n    /**\\n     * @dev Sends the sender's USDC from L1 to the recipient on L2, locks the USDC sent\\n     * in this contract and sends a message to the message bridge\\n     * contract to mint the equivalent USDC on L2\\n     * @param amount The amount of USDC to send\\n     * @param to The recipient's address to receive the funds\\n     */\\n    function depositTo(uint256 amount, address to) external payable;\\n}\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract Linea_Adapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n\\n    WETH9Interface public immutable l1Weth;\\n    IMessageService public immutable l1MessageService;\\n    ITokenBridge public immutable l1TokenBridge;\\n    IUSDCBridge public immutable l1UsdcBridge;\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _l1Weth WETH address on L1.\\n     * @param _l1MessageService Canonical message service contract on L1.\\n     * @param _l1TokenBridge Canonical token bridge contract on L1.\\n     * @param _l1UsdcBridge L1 USDC Bridge to ConsenSys's L2 Linea.\\n     */\\n    constructor(\\n        WETH9Interface _l1Weth,\\n        IMessageService _l1MessageService,\\n        ITokenBridge _l1TokenBridge,\\n        IUSDCBridge _l1UsdcBridge\\n    ) {\\n        l1Weth = _l1Weth;\\n        l1MessageService = _l1MessageService;\\n        l1TokenBridge = _l1TokenBridge;\\n        l1UsdcBridge = _l1UsdcBridge;\\n    }\\n\\n    /**\\n     * @notice Send cross-chain message to target on Linea.\\n     * @param target Contract on Linea that will receive message.\\n     * @param message Data to send to target.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable override {\\n        // Linea currently does not support auto-claiming of cross-chain messages that have\\n        // non-empty calldata. As we need to manually claim these messages, we can set the\\n        // message fees to 0.\\n        l1MessageService.sendMessage(target, 0, message);\\n        emit MessageRelayed(target, message);\\n    }\\n\\n    /**\\n     * @notice Bridge tokens to Linea.\\n     * @param l1Token L1 token to deposit.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        // If the l1Token is WETH then unwrap it to ETH then send the ETH directly\\n        // via the Canoncial Message Service.\\n        if (l1Token == address(l1Weth)) {\\n            l1Weth.withdraw(amount);\\n            l1MessageService.sendMessage{ value: amount }(to, 0, \\\"\\\");\\n        }\\n        // If the l1Token is USDC, then we need sent it via the USDC Bridge.\\n        else if (l1Token == l1UsdcBridge.usdc()) {\\n            IERC20(l1Token).safeIncreaseAllowance(address(l1UsdcBridge), amount);\\n            l1UsdcBridge.depositTo(amount, to);\\n        }\\n        // For other tokens, we can use the Canonical Token Bridge.\\n        else {\\n            IERC20(l1Token).safeIncreaseAllowance(address(l1TokenBridge), amount);\\n            l1TokenBridge.bridgeToken(l1Token, amount, to);\\n        }\\n\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n}\\n\",\"keccak256\":\"0x02ca33e0e8d050efff4729243a9d16d190b9c4e0ab97cdf72c91716fe1920300\",\"license\":\"BUSL-1.1\"},\"contracts/chain-adapters/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n * This interface is implemented by an adapter contract that is deployed on L1.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    /**\\n     * @notice Send message to `target` on L2.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param target L2 address to send message to.\\n     * @param message Message to send to `target`.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    /**\\n     * @notice Send `amount` of `l1Token` to `to` on L2. `l2Token` is the L2 address equivalent of `l1Token`.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param l1Token L1 token to bridge.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of `l1Token` to bridge.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x1d52fcb8b10dc7f260345918c1a90d496a4c9f774402cbd5ebde881b8fed6d50\",\"license\":\"BUSL-1.1\"},\"contracts/external/interfaces/WETH9Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for the WETH9 contract.\\n */\\ninterface WETH9Interface {\\n    /**\\n     * @notice Burn Wrapped Ether and receive native Ether.\\n     * @param wad Amount of WETH to unwrap and send to caller.\\n     */\\n    function withdraw(uint256 wad) external;\\n\\n    /**\\n     * @notice Lock native Ether and mint Wrapped Ether ERC20\\n     * @dev msg.value is amount of Wrapped Ether to mint/Ether to lock.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Get balance of WETH held by `guy`.\\n     * @param guy Address to get balance of.\\n     * @return wad Amount of WETH held by `guy`.\\n     */\\n    function balanceOf(address guy) external view returns (uint256 wad);\\n\\n    /**\\n     * @notice Transfer `wad` of WETH from caller to `guy`.\\n     * @param guy Address to send WETH to.\\n     * @param wad Amount of WETH to send.\\n     * @return ok True if transfer succeeded.\\n     */\\n    function transfer(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3f7892554ec7f54681fdd3cc18a41346c246c9c1afba016c52990ef77741f718\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x610100346100e057601f610e2c38819003918201601f19168301916001600160401b038311848410176100e4578084926080946040528339810103126100e05780516001600160a01b03919082811681036100e05760208201519083821682036100e05760408301519284841684036100e0576060015193841684036100e05760805260a05260c05260e052604051610d3390816100f982396080518181816102c301526107c5015260a05181818160eb0152818161022d0152610339015260c05181818161055c0152610759015260e05181818161046501526106eb0152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffdfe6080604081815260049081361015610015575f80fd5b5f925f3560e01c908163146bf4b11461077d5750806336c717c11461070f578063385a6970146106a157806352c8c75c1461025157806364aaef7e146101e25763e6eb8ade14610063575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101de576100946107e9565b91602435928467ffffffffffffffff918286116101da57366023870112156101da57858401359283116101da57602486019560248436920101116101da5773ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b156101d657839187519384927f9f3ce55a000000000000000000000000000000000000000000000000000000008452168097830152826024830152606060448301528183816101628c8a606484019161088e565b03925af180156101cc576101b4575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101ae918451948594855280602086015284019161088e565b0390a180f35b6101bd9061080c565b6101c857845f610171565b8480fd5b85513d84823e3d90fd5b8380fd5b5080fd5b8280fd5b8382346101da57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101da576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610653576102856107e9565b9060243573ffffffffffffffffffffffffffffffffffffffff90818116809103610653576044359160643593818516809503610653579481169487917f0000000000000000000000000000000000000000000000000000000000000000811687810361043d57803b156101d65783809160248b51809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528b898401525af190811561043357849161041f575b50507f00000000000000000000000000000000000000000000000000000000000000001690813b156101de578560848492878b5195869485937f9f3ce55a000000000000000000000000000000000000000000000000000000008552840152856024840152606060448401528560648401525af18015610415576103f5575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493925b815194855260208501528301526060820152a180f35b61040390959493929561080c565b61041157909192855f6103b4565b8580fd5b87513d84823e3d90fd5b6104289061080c565b6101de57825f610335565b89513d86823e3d90fd5b5087517f3e413bee0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000821693506020818481875afa90811561069757908a949392915f91610657575b508116880361055157506104b98583896108cc565b813b156101de578460448492838b5195869485937f70aff70f0000000000000000000000000000000000000000000000000000000085528401528a60248401525af1801561041557610535575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493926103df565b61054390959493929561080c565b61041157909192855f610506565b9150915095929394957f000000000000000000000000000000000000000000000000000000000000000016906105888583896108cc565b813b15610653578660645f9283875195869485937f522ea81a0000000000000000000000000000000000000000000000000000000085528401528960248401528a60448401525af1801561064957610609575b5091608093917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95936103df565b7fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95939196509161063c6080959361080c565b5f969193955091936105db565b83513d5f823e3d90fd5b5f80fd5b919450506020813d60201161068f575b816106746020938361084d565b810103126106535751928084168403610653578993816104a4565b3d9150610667565b89513d5f823e3d90fd5b5034610653575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610653576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610653575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610653576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610653575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106535760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361065357565b67ffffffffffffffff811161082057604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761082057604052565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b9173ffffffffffffffffffffffffffffffffffffffff80931660409081517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526004953087830152602495169182868301526020948583604481855afa928315610bd3575f93610ba4575b508201809211610b7957835191858301937f095ea7b300000000000000000000000000000000000000000000000000000000855287840152604483015260448252608082019267ffffffffffffffff9280851084861117610b4e5760c0810185811085821117610b235786528685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152515f9182919082855af1903d15610b14573d928311610ae95790610a2e939291855192610a21887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561084d565b83523d5f8885013e610bdd565b8051838115918215610ac9575b5050905015610a4a5750505050565b517f08c379a000000000000000000000000000000000000000000000000000000000815292830152602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b83809293500103126106535782015180151581036106535780835f610a3b565b866041897f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b90610a2e939250606091610bdd565b8860418b7f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8760418a7f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b856011887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b9092508581813d8311610bcc575b610bbc818361084d565b810103126106535751915f610938565b503d610bb2565b85513d5f823e3d90fd5b91929015610c585750815115610bf1575090565b3b15610bfa5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610c6b5750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401525f5b848110610ce6575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f835f604480968601015201168101030190fd5b818101830151868201604401528593508201610ca656fea26469706673582212200ef05ed251b956cae7168e6e5ada02afb792c42e0ac70a68de1ed21ba08073dc64736f6c63430008170033",
  "deployedBytecode": "0x6080604081815260049081361015610015575f80fd5b5f925f3560e01c908163146bf4b11461077d5750806336c717c11461070f578063385a6970146106a157806352c8c75c1461025157806364aaef7e146101e25763e6eb8ade14610063575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101de576100946107e9565b91602435928467ffffffffffffffff918286116101da57366023870112156101da57858401359283116101da57602486019560248436920101116101da5773ffffffffffffffffffffffffffffffffffffffff90817f00000000000000000000000000000000000000000000000000000000000000001690813b156101d657839187519384927f9f3ce55a000000000000000000000000000000000000000000000000000000008452168097830152826024830152606060448301528183816101628c8a606484019161088e565b03925af180156101cc576101b4575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101ae918451948594855280602086015284019161088e565b0390a180f35b6101bd9061080c565b6101c857845f610171565b8480fd5b85513d84823e3d90fd5b8380fd5b5080fd5b8280fd5b8382346101da57817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101da576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610653576102856107e9565b9060243573ffffffffffffffffffffffffffffffffffffffff90818116809103610653576044359160643593818516809503610653579481169487917f0000000000000000000000000000000000000000000000000000000000000000811687810361043d57803b156101d65783809160248b51809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528b898401525af190811561043357849161041f575b50507f00000000000000000000000000000000000000000000000000000000000000001690813b156101de578560848492878b5195869485937f9f3ce55a000000000000000000000000000000000000000000000000000000008552840152856024840152606060448401528560648401525af18015610415576103f5575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493925b815194855260208501528301526060820152a180f35b61040390959493929561080c565b61041157909192855f6103b4565b8580fd5b87513d84823e3d90fd5b6104289061080c565b6101de57825f610335565b89513d86823e3d90fd5b5087517f3e413bee0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000821693506020818481875afa90811561069757908a949392915f91610657575b508116880361055157506104b98583896108cc565b813b156101de578460448492838b5195869485937f70aff70f0000000000000000000000000000000000000000000000000000000085528401528a60248401525af1801561041557610535575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493926103df565b61054390959493929561080c565b61041157909192855f610506565b9150915095929394957f000000000000000000000000000000000000000000000000000000000000000016906105888583896108cc565b813b15610653578660645f9283875195869485937f522ea81a0000000000000000000000000000000000000000000000000000000085528401528960248401528a60448401525af1801561064957610609575b5091608093917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95936103df565b7fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95939196509161063c6080959361080c565b5f969193955091936105db565b83513d5f823e3d90fd5b5f80fd5b919450506020813d60201161068f575b816106746020938361084d565b810103126106535751928084168403610653578993816104a4565b3d9150610667565b89513d5f823e3d90fd5b5034610653575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610653576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5034610653575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610653576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b34610653575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126106535760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361065357565b67ffffffffffffffff811161082057604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761082057604052565b601f82602094937fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe093818652868601375f8582860101520116010190565b9173ffffffffffffffffffffffffffffffffffffffff80931660409081517fdd62ed3e0000000000000000000000000000000000000000000000000000000081526004953087830152602495169182868301526020948583604481855afa928315610bd3575f93610ba4575b508201809211610b7957835191858301937f095ea7b300000000000000000000000000000000000000000000000000000000855287840152604483015260448252608082019267ffffffffffffffff9280851084861117610b4e5760c0810185811085821117610b235786528685527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152515f9182919082855af1903d15610b14573d928311610ae95790610a2e939291855192610a21887fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116018561084d565b83523d5f8885013e610bdd565b8051838115918215610ac9575b5050905015610a4a5750505050565b517f08c379a000000000000000000000000000000000000000000000000000000000815292830152602a908201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608490fd5b83809293500103126106535782015180151581036106535780835f610a3b565b866041897f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b90610a2e939250606091610bdd565b8860418b7f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b8760418a7f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b856011887f4e487b71000000000000000000000000000000000000000000000000000000005f52525ffd5b9092508581813d8311610bcc575b610bbc818361084d565b810103126106535751915f610938565b503d610bb2565b85513d5f823e3d90fd5b91929015610c585750815115610bf1575090565b3b15610bfa5790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610c6b5750805190602001fd5b604051907f08c379a00000000000000000000000000000000000000000000000000000000082528160208060048301528251928360248401525f5b848110610ce6575050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f835f604480968601015201168101030190fd5b818101830151868201604401528593508201610ca656fea26469706673582212200ef05ed251b956cae7168e6e5ada02afb792c42e0ac70a68de1ed21ba08073dc64736f6c63430008170033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_l1MessageService": "Canonical message service contract on L1.",
          "_l1TokenBridge": "Canonical token bridge contract on L1.",
          "_l1UsdcBridge": "L1 USDC Bridge to ConsenSys's L2 Linea.",
          "_l1Weth": "WETH address on L1."
        }
      },
      "relayMessage(address,bytes)": {
        "params": {
          "message": "Data to send to target.",
          "target": "Contract on Linea that will receive message."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of L1 tokens to deposit and L2 tokens to receive.",
          "l1Token": "L1 token to deposit.",
          "l2Token": "L2 token to receive.",
          "to": "Bridge recipient."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "relayMessage(address,bytes)": {
        "notice": "Send cross-chain message to target on Linea."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Bridge tokens to Linea."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
