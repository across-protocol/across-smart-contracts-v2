{
  "address": "0x6Dcde73F06D8D891281b8aeB75f2BBd94b68738e",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IRootChainManager",
          "name": "_rootChainManager",
          "type": "address"
        },
        {
          "internalType": "contract IFxStateSender",
          "name": "_fxStateSender",
          "type": "address"
        },
        {
          "internalType": "contract DepositManager",
          "name": "_depositManager",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_erc20Predicate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l1Matic",
          "type": "address"
        },
        {
          "internalType": "contract WETH9Interface",
          "name": "_l1Weth",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_l1Usdc",
          "type": "address"
        },
        {
          "internalType": "contract ITokenMessenger",
          "name": "_cctpTokenMessenger",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "MessageRelayed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "TokensRelayed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "cctpTokenMessenger",
      "outputs": [
        {
          "internalType": "contract ITokenMessenger",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "circleDomainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositManager",
      "outputs": [
        {
          "internalType": "contract DepositManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erc20Predicate",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fxStateSender",
      "outputs": [
        {
          "internalType": "contract IFxStateSender",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Matic",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Usdc",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "l1Weth",
      "outputs": [
        {
          "internalType": "contract WETH9Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "message",
          "type": "bytes"
        }
      ],
      "name": "relayMessage",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "l1Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "l2Token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "relayTokens",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rootChainManager",
      "outputs": [
        {
          "internalType": "contract IRootChainManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x17b69aad93d8515272f85ca35be0e3b288e055f36375223cf335b69f87b0d2f6",
  "receipt": {
    "to": null,
    "from": "0x52A79C01f10e6Ea89dED5c3f42F3a0EC362ed090",
    "contractAddress": "0x6Dcde73F06D8D891281b8aeB75f2BBd94b68738e",
    "transactionIndex": 28,
    "gasUsed": "958270",
    "logsBloom": "0x
    "blockHash": "0x42e48f1466d6cea4644b2ef0447754d01a82329cc8a8e203f74f6bde166c0635",
    "transactionHash": "0x17b69aad93d8515272f85ca35be0e3b288e055f36375223cf335b69f87b0d2f6",
    "logs": [],
    "blockNumber": 10315118,
    "cumulativeGasUsed": "6361266",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBbD7cBFA79faee899Eaf900F13C9065bF03B1A74",
    "0x3d1d3E34f7fB6D26245E6640E1c50710eFFf15bA",
    "0x7850ec290A2e2F40B82Ed962eaf30591bb5f5C96",
    "0xdD6596F2029e6233DEFfaCa316e6A95217d4Dc34",
    "0x499d11E0b6eAC7c0593d8Fb292DCBbF815Fb29Ae",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    "0x07865c6E87B9F70255377e024ace6630C1Eaa37F",
    "0xD0C3da58f55358142b8d3e06C1C30c5C6114EFE8"
  ],
  "numDeployments": 2,
  "solcInputHash": "8ccac8cf36ab35df78773cb6892919cd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.23+commit.f704f362\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IRootChainManager\",\"name\":\"_rootChainManager\",\"type\":\"address\"},{\"internalType\":\"contract IFxStateSender\",\"name\":\"_fxStateSender\",\"type\":\"address\"},{\"internalType\":\"contract DepositManager\",\"name\":\"_depositManager\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_erc20Predicate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l1Matic\",\"type\":\"address\"},{\"internalType\":\"contract WETH9Interface\",\"name\":\"_l1Weth\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_l1Usdc\",\"type\":\"address\"},{\"internalType\":\"contract ITokenMessenger\",\"name\":\"_cctpTokenMessenger\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"MessageRelayed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TokensRelayed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"cctpTokenMessenger\",\"outputs\":[{\"internalType\":\"contract ITokenMessenger\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circleDomainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositManager\",\"outputs\":[{\"internalType\":\"contract DepositManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erc20Predicate\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fxStateSender\",\"outputs\":[{\"internalType\":\"contract IFxStateSender\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Matic\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Usdc\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"l1Weth\",\"outputs\":[{\"internalType\":\"contract WETH9Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"message\",\"type\":\"bytes\"}],\"name\":\"relayMessage\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"l1Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"l2Token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"relayTokens\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rootChainManager\",\"outputs\":[{\"internalType\":\"contract IRootChainManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_cctpTokenMessenger\":\"TokenMessenger contract to bridge via CCTP.\",\"_depositManager\":\"DepositManager Polygon system contract to deposit tokens over the Plasma bridge (Matic).\",\"_erc20Predicate\":\"ERC20Predicate Polygon system contract to approve when depositing to the PoS bridge.\",\"_fxStateSender\":\"FxStateSender Polygon system contract to send arbitrary messages to L2.\",\"_l1Matic\":\"matic address on l1.\",\"_l1Usdc\":\"USDC address on L1.\",\"_l1Weth\":\"WETH address on L1.\",\"_rootChainManager\":\"RootChainManager Polygon system contract to deposit tokens over the PoS bridge.\"}},\"relayMessage(address,bytes)\":{\"params\":{\"message\":\"Data to send to target.\",\"target\":\"Contract on Polygon that will receive message.\"}},\"relayTokens(address,address,uint256,address)\":{\"params\":{\"amount\":\"Amount of L1 tokens to deposit and L2 tokens to receive.\",\"l1Token\":\"L1 token to deposit.\",\"l2Token\":\"L2 token to receive.\",\"to\":\"Bridge recipient.\"}}},\"stateVariables\":{\"cctpTokenMessenger\":{\"details\":\"Posted officially here: https://developers.circle.com/stablecoins/docs/evm-smart-contracts\"},\"circleDomainId\":{\"details\":\"This identifier is assigned by Circle and is not related to a chain ID.Official domain list can be found here: https://developers.circle.com/stablecoins/docs/supported-domains\"},\"l1Usdc\":{\"details\":\"Posted officially here: https://developers.circle.com/stablecoins/docs/usdc-on-main-networks\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"cctpTokenMessenger()\":{\"notice\":\"The official Circle CCTP token bridge contract endpoint.\"},\"circleDomainId()\":{\"notice\":\"Domain identifier used for Circle's CCTP bridge on Base.\"},\"constructor\":{\"notice\":\"Constructs new Adapter.\"},\"l1Usdc()\":{\"notice\":\"The official USDC contract address on this chain.\"},\"relayMessage(address,bytes)\":{\"notice\":\"Send cross-chain message to target on Polygon.\"},\"relayTokens(address,address,uint256,address)\":{\"notice\":\"Bridge tokens to Polygon.\"}},\"notice\":\"Sends cross chain messages Polygon L2 network.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/chain-adapters/Polygon_Adapter.sol\":\"Polygon_Adapter\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"contracts/chain-adapters/Polygon_Adapter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/AdapterInterface.sol\\\";\\nimport \\\"../external/interfaces/WETH9Interface.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"../libraries/CircleCCTPLib.sol\\\";\\nimport \\\"../external/interfaces/CCTPInterfaces.sol\\\";\\n\\n/**\\n * @notice Send tokens to Polygon.\\n */\\ninterface IRootChainManager {\\n    /**\\n     * @notice Send msg.value of ETH to Polygon\\n     * @param user Recipient of ETH on Polygon.\\n     */\\n    function depositEtherFor(address user) external payable;\\n\\n    /**\\n     * @notice Send ERC20 tokens to Polygon.\\n     * @param user Recipient of L2 equivalent tokens on Polygon.\\n     * @param rootToken L1 Address of token to send.\\n     * @param depositData Data to pass to L2 including amount of tokens to send. Should be abi.encode(amount).\\n     */\\n    function depositFor(\\n        address user,\\n        address rootToken,\\n        bytes calldata depositData\\n    ) external;\\n}\\n\\n/**\\n * @notice Send arbitrary messages to Polygon.\\n */\\ninterface IFxStateSender {\\n    /**\\n     * @notice Send arbitrary message to Polygon.\\n     * @param _receiver Address on Polygon to receive message.\\n     * @param _data Message to send to `_receiver` on Polygon.\\n     */\\n    function sendMessageToChild(address _receiver, bytes calldata _data) external;\\n}\\n\\n/**\\n * @notice Similar to RootChainManager, but for Matic (Plasma) bridge.\\n */\\ninterface DepositManager {\\n    /**\\n     * @notice Send tokens to Polygon. Only used to send MATIC in this Polygon_Adapter.\\n     * @param token L1 token to send. Should be MATIC.\\n     * @param user Recipient of L2 equivalent tokens on Polygon.\\n     * @param amount Amount of `token` to send.\\n     */\\n    function depositERC20ForUser(\\n        address token,\\n        address user,\\n        uint256 amount\\n    ) external;\\n}\\n\\n/**\\n * @notice Sends cross chain messages Polygon L2 network.\\n * @dev Public functions calling external contracts do not guard against reentrancy because they are expected to be\\n * called via delegatecall, which will execute this contract's logic within the context of the originating contract.\\n * For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods\\n * that call this contract's logic guard against reentrancy.\\n */\\n\\n// solhint-disable-next-line contract-name-camelcase\\ncontract Polygon_Adapter is AdapterInterface {\\n    using SafeERC20 for IERC20;\\n    IRootChainManager public immutable rootChainManager;\\n    IFxStateSender public immutable fxStateSender;\\n    DepositManager public immutable depositManager;\\n    address public immutable erc20Predicate;\\n    address public immutable l1Matic;\\n    WETH9Interface public immutable l1Weth;\\n\\n    /**\\n     * @notice Domain identifier used for Circle's CCTP bridge on Base.\\n     * @dev This identifier is assigned by Circle and is not related to a chain ID.\\n     * @dev Official domain list can be found here: https://developers.circle.com/stablecoins/docs/supported-domains\\n     */\\n    uint32 public constant circleDomainId = 7;\\n\\n    /**\\n     * @notice The official USDC contract address on this chain.\\n     * @dev Posted officially here: https://developers.circle.com/stablecoins/docs/usdc-on-main-networks\\n     */\\n    IERC20 public immutable l1Usdc;\\n\\n    /**\\n     * @notice The official Circle CCTP token bridge contract endpoint.\\n     * @dev Posted officially here: https://developers.circle.com/stablecoins/docs/evm-smart-contracts\\n     */\\n    ITokenMessenger public immutable cctpTokenMessenger;\\n\\n    /**\\n     * @notice Constructs new Adapter.\\n     * @param _rootChainManager RootChainManager Polygon system contract to deposit tokens over the PoS bridge.\\n     * @param _fxStateSender FxStateSender Polygon system contract to send arbitrary messages to L2.\\n     * @param _depositManager DepositManager Polygon system contract to deposit tokens over the Plasma bridge (Matic).\\n     * @param _erc20Predicate ERC20Predicate Polygon system contract to approve when depositing to the PoS bridge.\\n     * @param _l1Matic matic address on l1.\\n     * @param _l1Weth WETH address on L1.\\n     * @param _l1Usdc USDC address on L1.\\n     * @param _cctpTokenMessenger TokenMessenger contract to bridge via CCTP.\\n     */\\n    constructor(\\n        IRootChainManager _rootChainManager,\\n        IFxStateSender _fxStateSender,\\n        DepositManager _depositManager,\\n        address _erc20Predicate,\\n        address _l1Matic,\\n        WETH9Interface _l1Weth,\\n        IERC20 _l1Usdc,\\n        ITokenMessenger _cctpTokenMessenger\\n    ) {\\n        rootChainManager = _rootChainManager;\\n        fxStateSender = _fxStateSender;\\n        depositManager = _depositManager;\\n        erc20Predicate = _erc20Predicate;\\n        l1Matic = _l1Matic;\\n        l1Weth = _l1Weth;\\n        l1Usdc = _l1Usdc;\\n        cctpTokenMessenger = _cctpTokenMessenger;\\n    }\\n\\n    /**\\n     * @notice Send cross-chain message to target on Polygon.\\n     * @param target Contract on Polygon that will receive message.\\n     * @param message Data to send to target.\\n     */\\n\\n    function relayMessage(address target, bytes calldata message) external payable override {\\n        fxStateSender.sendMessageToChild(target, message);\\n        emit MessageRelayed(target, message);\\n    }\\n\\n    /**\\n     * @notice Bridge tokens to Polygon.\\n     * @param l1Token L1 token to deposit.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of L1 tokens to deposit and L2 tokens to receive.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable override {\\n        // If the l1Token is weth then unwrap it to ETH then send the ETH to the standard bridge.\\n        if (l1Token == address(l1Weth)) {\\n            l1Weth.withdraw(amount);\\n            rootChainManager.depositEtherFor{ value: amount }(to);\\n        }\\n        // If the l1Token is USDC, then we send it to the CCTP bridge\\n        else if (address(l1Usdc) == l1Token) {\\n            CircleCCTPLib._transferUsdc(l1Usdc, cctpTokenMessenger, circleDomainId, to, amount);\\n        } else if (l1Token == l1Matic) {\\n            IERC20(l1Token).safeIncreaseAllowance(address(depositManager), amount);\\n            depositManager.depositERC20ForUser(l1Token, to, amount);\\n        } else {\\n            IERC20(l1Token).safeIncreaseAllowance(erc20Predicate, amount);\\n            rootChainManager.depositFor(to, l1Token, abi.encode(amount));\\n        }\\n        emit TokensRelayed(l1Token, l2Token, amount, to);\\n    }\\n}\\n\",\"keccak256\":\"0x561741a3df8cc9ed243fcf18fdd55adfd6e176eee852342f1974bb94cc1ddc6b\",\"license\":\"BUSL-1.1\"},\"contracts/chain-adapters/interfaces/AdapterInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Sends cross chain messages and tokens to contracts on a specific L2 network.\\n * This interface is implemented by an adapter contract that is deployed on L1.\\n */\\n\\ninterface AdapterInterface {\\n    event MessageRelayed(address target, bytes message);\\n\\n    event TokensRelayed(address l1Token, address l2Token, uint256 amount, address to);\\n\\n    /**\\n     * @notice Send message to `target` on L2.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param target L2 address to send message to.\\n     * @param message Message to send to `target`.\\n     */\\n    function relayMessage(address target, bytes calldata message) external payable;\\n\\n    /**\\n     * @notice Send `amount` of `l1Token` to `to` on L2. `l2Token` is the L2 address equivalent of `l1Token`.\\n     * @dev This method is marked payable because relaying the message might require a fee\\n     * to be paid by the sender to forward the message to L2. However, it will not send msg.value\\n     * to the target contract on L2.\\n     * @param l1Token L1 token to bridge.\\n     * @param l2Token L2 token to receive.\\n     * @param amount Amount of `l1Token` to bridge.\\n     * @param to Bridge recipient.\\n     */\\n    function relayTokens(\\n        address l1Token,\\n        address l2Token,\\n        uint256 amount,\\n        address to\\n    ) external payable;\\n}\\n\",\"keccak256\":\"0x1d52fcb8b10dc7f260345918c1a90d496a4c9f774402cbd5ebde881b8fed6d50\",\"license\":\"BUSL-1.1\"},\"contracts/external/interfaces/CCTPInterfaces.sol\":{\"content\":\"/**\\n * Copyright (C) 2015, 2016, 2017 Dapphub\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\n/**\\n * Imported as-is from commit 139d8d0ce3b5531d3c7ec284f89d946dfb720016 of:\\n *   * https://github.com/walkerq/evm-cctp-contracts/blob/139d8d0ce3b5531d3c7ec284f89d946dfb720016/src/TokenMessenger.sol\\n * Changes applied post-import:\\n *   * Removed a majority of code from this contract and converted the needed function signatures in this interface.\\n */\\ninterface ITokenMessenger {\\n    /**\\n     * @notice Deposits and burns tokens from sender to be minted on destination domain.\\n     * Emits a `DepositForBurn` event.\\n     * @dev reverts if:\\n     * - given burnToken is not supported\\n     * - given destinationDomain has no TokenMessenger registered\\n     * - transferFrom() reverts. For example, if sender's burnToken balance or approved allowance\\n     * to this contract is less than `amount`.\\n     * - burn() reverts. For example, if `amount` is 0.\\n     * - MessageTransmitter returns false or reverts.\\n     * @param amount amount of tokens to burn\\n     * @param destinationDomain destination domain\\n     * @param mintRecipient address of mint recipient on destination domain\\n     * @param burnToken address of contract to burn deposited tokens, on local domain\\n     * @return _nonce unique nonce reserved by message\\n     */\\n    function depositForBurn(\\n        uint256 amount,\\n        uint32 destinationDomain,\\n        bytes32 mintRecipient,\\n        address burnToken\\n    ) external returns (uint64 _nonce);\\n}\\n\",\"keccak256\":\"0x6bb3f6d8142bf040827d7171a5ad3bdce7f83da49c4f828034ac4df3fba6187d\",\"license\":\"GPL-3.0-or-later\"},\"contracts/external/interfaces/WETH9Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\n/**\\n * @notice Interface for the WETH9 contract.\\n */\\ninterface WETH9Interface {\\n    /**\\n     * @notice Burn Wrapped Ether and receive native Ether.\\n     * @param wad Amount of WETH to unwrap and send to caller.\\n     */\\n    function withdraw(uint256 wad) external;\\n\\n    /**\\n     * @notice Lock native Ether and mint Wrapped Ether ERC20\\n     * @dev msg.value is amount of Wrapped Ether to mint/Ether to lock.\\n     */\\n    function deposit() external payable;\\n\\n    /**\\n     * @notice Get balance of WETH held by `guy`.\\n     * @param guy Address to get balance of.\\n     * @return wad Amount of WETH held by `guy`.\\n     */\\n    function balanceOf(address guy) external view returns (uint256 wad);\\n\\n    /**\\n     * @notice Transfer `wad` of WETH from caller to `guy`.\\n     * @param guy Address to send WETH to.\\n     * @param wad Amount of WETH to send.\\n     * @return ok True if transfer succeeded.\\n     */\\n    function transfer(address guy, uint256 wad) external returns (bool);\\n}\\n\",\"keccak256\":\"0x3f7892554ec7f54681fdd3cc18a41346c246c9c1afba016c52990ef77741f718\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/CircleCCTPLib.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"../external/interfaces/CCTPInterfaces.sol\\\";\\n\\nlibrary CircleCCTPLib {\\n    using SafeERC20 for IERC20;\\n\\n    /**\\n     * @notice converts address to bytes32 (alignment preserving cast.)\\n     * @param addr the address to convert to bytes32\\n     * @dev Sourced from the official CCTP repo: https://github.com/walkerq/evm-cctp-contracts/blob/139d8d0ce3b5531d3c7ec284f89d946dfb720016/src/messages/Message.sol#L142C1-L148C6\\n     */\\n    function _addressToBytes32(address addr) internal pure returns (bytes32) {\\n        return bytes32(uint256(uint160(addr)));\\n    }\\n\\n    /**\\n     * @notice Transfers USDC from the current domain to the given address on the new domain.\\n     * @param usdcToken USDC token contract on the current domain.\\n     * @param tokenMessenger TokenMessenger contract to bridge via CCTP.\\n     * @param circleDomain The new domain to transfer USDC to.\\n     * @param to Address to receive USDC on the new domain.\\n     * @param amount Amount of USDC to transfer.\\n     */\\n    function _transferUsdc(\\n        IERC20 usdcToken,\\n        ITokenMessenger tokenMessenger,\\n        uint32 circleDomain,\\n        address to,\\n        uint256 amount\\n    ) internal {\\n        // Only approve the exact amount to be transferred\\n        usdcToken.safeIncreaseAllowance(address(tokenMessenger), amount);\\n        // Submit the amount to be transferred to bridged via the TokenMessenger\\n        tokenMessenger.depositForBurn(amount, circleDomain, _addressToBytes32(to), address(usdcToken));\\n    }\\n}\\n\",\"keccak256\":\"0x73c5c00c86016ea90505977dfeae2500077f5f83ce897a042415bc2f2fbac161\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101803461016857620011f638819003601f8101601f191683016001600160401b0381118482101761016c5783928291604052833961010092839181010312610168578051906001600160a01b03908183168303610168576020810151828116810361016857604082015183811681036101685761007f60608401610180565b9061008c60808501610180565b9260a08501519686881688036101685760c08601519587871687036101685760e0015196871687036101685760805260a05260c05260e0528452610120928352610140908152610160918252604051926110619485620001958639608051858181610279015281816106210152610978015260a05185818161011f01526103c6015260c0518581816104a4015261087b015260e0518581816102e8015261095101525184818161035701526108520152518381816105aa0152610ad5015251828181610513015261071a01525181818161043501526107560152f35b5f80fd5b634e487b7160e01b5f52604160045260245ffd5b51906001600160a01b03821682036101685756fe6080604081815260049081361015610015575f80fd5b5f925f3560e01c908163146bf4b114610a8d5750806352c8c75c1461053757806356c3b587146104c85780636c7ac9d8146104595780639748cf7c146103ea578063a996cabb1461037b578063b28de9e81461030c578063b68649761461029d578063bd07018d1461022e578063ce9ca775146101f45763e6eb8ade1461009a575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ec576100cb610af9565b602435918467ffffffffffffffff948585116101f057366023860112156101f057848101359586116101f057602485019460248736920101116101f05773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b156101ec5785839186838a956101838951978896879586947fb47204770000000000000000000000000000000000000000000000000000000086528501610c16565b03925af180156101e2576101ca575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101c4915193849384610c16565b0390a180f35b6101d390610b1c565b6101de57845f610192565b8480fd5b83513d84823e3d90fd5b8280fd5b5080fd5b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905160078152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a895761056b610af9565b90602490813573ffffffffffffffffffffffffffffffffffffffff808216809203610a89576044359260643594828616809603610a89579582169588927f00000000000000000000000000000000000000000000000000000000000000008116868982036107155750803b156101de57848091848c51809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528c8a8401525af190811561070b5785916106f7575b50507f00000000000000000000000000000000000000000000000000000000000000001691823b156106f35783918791878b5195869485937f4faa8a260000000000000000000000000000000000000000000000000000000085528401525af180156106e9576106c9575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493925b815194855260208501528301526060820152a180f35b6106d7909594939295610b1c565b6106e557909192855f610688565b8580fd5b87513d84823e3d90fd5b8380fd5b61070090610b1c565b6106f357835f61061d565b8a513d87823e3d90fd5b9293917f00000000000000000000000000000000000000000000000000000000000000009150818116908a820361084b5791602095969161077d86608496957f0000000000000000000000000000000000000000000000000000000000000000168094610c77565b60078d5198899788967f6fd3504e0000000000000000000000000000000000000000000000000000000088528701528501528a604485015260648401525af18015610841576107f5575b50907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493926106b3565b60209493929194813d602011610839575b8161081360209383610b79565b81010312610835575167ffffffffffffffff8116036106e5579091925f6107c7565b8680fd5b3d9150610806565b86513d89823e3d90fd5b92935050507f000000000000000000000000000000000000000000000000000000000000000081168803610944577f000000000000000000000000000000000000000000000000000000000000000016906108a786838a610c77565b813b156106f357606488918580948a8d5197889687957f8b9e4f930000000000000000000000000000000000000000000000000000000087528601528401528960448401525af180156106e957610928575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493926106b3565b610936909594939295610b1c565b6106e557909192855f6108f9565b90925061097685969798957f00000000000000000000000000000000000000000000000000000000000000008a610c77565b7f00000000000000000000000000000000000000000000000000000000000000001690845191866020840152602083526109af83610b5d565b803b15610a8957875f8a95610a0282968a51988997889687957fe3dec8fb000000000000000000000000000000000000000000000000000000008752860152840152606060448401526064830190610bba565b03925af18015610a7f57610a3f575b5091608093917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95936106b3565b7fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b959391965091610a7260809593610b1c565b5f96919395509193610a11565b83513d5f823e3d90fd5b5f80fd5b34610a89575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a895760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610a8957565b67ffffffffffffffff8111610b3057604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff821117610b3057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b3057604052565b91908251928382525f5b848110610c025750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b602081830181015184830182015201610bc4565b9183606094601f9273ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09516865260406020870152816040870152868601375f8582860101520116010190565b73ffffffffffffffffffffffffffffffffffffffff8091166040918251907fdd62ed3e000000000000000000000000000000000000000000000000000000008252306004830152602494169182858301526020958683604481855afa928315610f51575f93610f22575b508201809211610ef657835191868301937f095ea7b300000000000000000000000000000000000000000000000000000000855286840152604483015260448252608082019267ffffffffffffffff9280851084861117610eca575f918291868852610d4c87610b5d565b8987527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af1903d15610ebb573d928311610e8f5790610dd2939291855192610dc5897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185610b79565b83523d5f8985013e610f5b565b8051848115918215610e6f575b5050905015610ded57505050565b60849291602a9151927f08c379a000000000000000000000000000000000000000000000000000000000845260048401528201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b8380929350010312610a89578301518015158103610a895780845f610ddf565b857f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b90610dd2939250606091610f5b565b867f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b847f4e487b71000000000000000000000000000000000000000000000000000000005f5260116004525ffd5b9092508681813d8311610f4a575b610f3a8183610b79565b81010312610a895751915f610ce1565b503d610f30565b85513d5f823e3d90fd5b91929015610fd65750815115610f6f575090565b3b15610f785790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610fe95750805190602001fd5b611027906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610bba565b0390fdfea2646970667358221220ad6182f14c2c2fc538ae05cb9fe1da92887e8c005887fea943ad7970d2217f1064736f6c63430008170033",
  "deployedBytecode": "0x6080604081815260049081361015610015575f80fd5b5f925f3560e01c908163146bf4b114610a8d5750806352c8c75c1461053757806356c3b587146104c85780636c7ac9d8146104595780639748cf7c146103ea578063a996cabb1461037b578063b28de9e81461030c578063b68649761461029d578063bd07018d1461022e578063ce9ca775146101f45763e6eb8ade1461009a575f80fd5b807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101ec576100cb610af9565b602435918467ffffffffffffffff948585116101f057366023860112156101f057848101359586116101f057602485019460248736920101116101f05773ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016803b156101ec5785839186838a956101838951978896879586947fb47204770000000000000000000000000000000000000000000000000000000086528501610c16565b03925af180156101e2576101ca575b50507f9e6c52944e331ba6270e7fe4cea2a4086bae8f7a27e1cdba07f416806f5d0ac4936101c4915193849384610c16565b0390a180f35b6101d390610b1c565b6101de57845f610192565b8480fd5b83513d84823e3d90fd5b8280fd5b5080fd5b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905160078152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b8382346101f057817ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126101f0576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b509060807ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a895761056b610af9565b90602490813573ffffffffffffffffffffffffffffffffffffffff808216809203610a89576044359260643594828616809603610a89579582169588927f00000000000000000000000000000000000000000000000000000000000000008116868982036107155750803b156101de57848091848c51809481937f2e1a7d4d0000000000000000000000000000000000000000000000000000000083528c8a8401525af190811561070b5785916106f7575b50507f00000000000000000000000000000000000000000000000000000000000000001691823b156106f35783918791878b5195869485937f4faa8a260000000000000000000000000000000000000000000000000000000085528401525af180156106e9576106c9575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493925b815194855260208501528301526060820152a180f35b6106d7909594939295610b1c565b6106e557909192855f610688565b8580fd5b87513d84823e3d90fd5b8380fd5b61070090610b1c565b6106f357835f61061d565b8a513d87823e3d90fd5b9293917f00000000000000000000000000000000000000000000000000000000000000009150818116908a820361084b5791602095969161077d86608496957f0000000000000000000000000000000000000000000000000000000000000000168094610c77565b60078d5198899788967f6fd3504e0000000000000000000000000000000000000000000000000000000088528701528501528a604485015260648401525af18015610841576107f5575b50907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493926106b3565b60209493929194813d602011610839575b8161081360209383610b79565b81010312610835575167ffffffffffffffff8116036106e5579091925f6107c7565b8680fd5b3d9150610806565b86513d89823e3d90fd5b92935050507f000000000000000000000000000000000000000000000000000000000000000081168803610944577f000000000000000000000000000000000000000000000000000000000000000016906108a786838a610c77565b813b156106f357606488918580948a8d5197889687957f8b9e4f930000000000000000000000000000000000000000000000000000000087528601528401528960448401525af180156106e957610928575b5050907fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b9460809493926106b3565b610936909594939295610b1c565b6106e557909192855f6108f9565b90925061097685969798957f00000000000000000000000000000000000000000000000000000000000000008a610c77565b7f00000000000000000000000000000000000000000000000000000000000000001690845191866020840152602083526109af83610b5d565b803b15610a8957875f8a95610a0282968a51988997889687957fe3dec8fb000000000000000000000000000000000000000000000000000000008752860152840152606060448401526064830190610bba565b03925af18015610a7f57610a3f575b5091608093917fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b95936106b3565b7fd7e09655439c3932e55857df3220186e5a7f0980825f20691c2b35d941dee75b959391965091610a7260809593610b1c565b5f96919395509193610a11565b83513d5f823e3d90fd5b5f80fd5b34610a89575f7ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc360112610a895760209073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b6004359073ffffffffffffffffffffffffffffffffffffffff82168203610a8957565b67ffffffffffffffff8111610b3057604052565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b6040810190811067ffffffffffffffff821117610b3057604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff821117610b3057604052565b91908251928382525f5b848110610c025750507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f845f6020809697860101520116010190565b602081830181015184830182015201610bc4565b9183606094601f9273ffffffffffffffffffffffffffffffffffffffff7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe09516865260406020870152816040870152868601375f8582860101520116010190565b73ffffffffffffffffffffffffffffffffffffffff8091166040918251907fdd62ed3e000000000000000000000000000000000000000000000000000000008252306004830152602494169182858301526020958683604481855afa928315610f51575f93610f22575b508201809211610ef657835191868301937f095ea7b300000000000000000000000000000000000000000000000000000000855286840152604483015260448252608082019267ffffffffffffffff9280851084861117610eca575f918291868852610d4c87610b5d565b8987527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c656460a0820152519082855af1903d15610ebb573d928311610e8f5790610dd2939291855192610dc5897fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8401160185610b79565b83523d5f8985013e610f5b565b8051848115918215610e6f575b5050905015610ded57505050565b60849291602a9151927f08c379a000000000000000000000000000000000000000000000000000000000845260048401528201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152fd5b8380929350010312610a89578301518015158103610a895780845f610ddf565b857f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b90610dd2939250606091610f5b565b867f4e487b71000000000000000000000000000000000000000000000000000000005f5260416004525ffd5b847f4e487b71000000000000000000000000000000000000000000000000000000005f5260116004525ffd5b9092508681813d8311610f4a575b610f3a8183610b79565b81010312610a895751915f610ce1565b503d610f30565b85513d5f823e3d90fd5b91929015610fd65750815115610f6f575090565b3b15610f785790565b60646040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152fd5b825190915015610fe95750805190602001fd5b611027906040519182917f08c379a0000000000000000000000000000000000000000000000000000000008352602060048401526024830190610bba565b0390fdfea2646970667358221220ad6182f14c2c2fc538ae05cb9fe1da92887e8c005887fea943ad7970d2217f1064736f6c63430008170033",
  "devdoc": {
    "details": "Public functions calling external contracts do not guard against reentrancy because they are expected to be called via delegatecall, which will execute this contract's logic within the context of the originating contract. For example, the HubPool will delegatecall these functions, therefore its only necessary that the HubPool's methods that call this contract's logic guard against reentrancy.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_cctpTokenMessenger": "TokenMessenger contract to bridge via CCTP.",
          "_depositManager": "DepositManager Polygon system contract to deposit tokens over the Plasma bridge (Matic).",
          "_erc20Predicate": "ERC20Predicate Polygon system contract to approve when depositing to the PoS bridge.",
          "_fxStateSender": "FxStateSender Polygon system contract to send arbitrary messages to L2.",
          "_l1Matic": "matic address on l1.",
          "_l1Usdc": "USDC address on L1.",
          "_l1Weth": "WETH address on L1.",
          "_rootChainManager": "RootChainManager Polygon system contract to deposit tokens over the PoS bridge."
        }
      },
      "relayMessage(address,bytes)": {
        "params": {
          "message": "Data to send to target.",
          "target": "Contract on Polygon that will receive message."
        }
      },
      "relayTokens(address,address,uint256,address)": {
        "params": {
          "amount": "Amount of L1 tokens to deposit and L2 tokens to receive.",
          "l1Token": "L1 token to deposit.",
          "l2Token": "L2 token to receive.",
          "to": "Bridge recipient."
        }
      }
    },
    "stateVariables": {
      "cctpTokenMessenger": {
        "details": "Posted officially here: https://developers.circle.com/stablecoins/docs/evm-smart-contracts"
      },
      "circleDomainId": {
        "details": "This identifier is assigned by Circle and is not related to a chain ID.Official domain list can be found here: https://developers.circle.com/stablecoins/docs/supported-domains"
      },
      "l1Usdc": {
        "details": "Posted officially here: https://developers.circle.com/stablecoins/docs/usdc-on-main-networks"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "cctpTokenMessenger()": {
        "notice": "The official Circle CCTP token bridge contract endpoint."
      },
      "circleDomainId()": {
        "notice": "Domain identifier used for Circle's CCTP bridge on Base."
      },
      "constructor": {
        "notice": "Constructs new Adapter."
      },
      "l1Usdc()": {
        "notice": "The official USDC contract address on this chain."
      },
      "relayMessage(address,bytes)": {
        "notice": "Send cross-chain message to target on Polygon."
      },
      "relayTokens(address,address,uint256,address)": {
        "notice": "Bridge tokens to Polygon."
      }
    },
    "notice": "Sends cross chain messages Polygon L2 network.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
